
DAC_LOAD_DRIVER_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b288  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e9c  0800b438  0800b438  0001b438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2d4  0800e2d4  00020328  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2d4  0800e2d4  0001e2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2dc  0800e2dc  00020328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2dc  0800e2dc  0001e2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2e0  0800e2e0  0001e2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000328  20000000  0800e2e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  20000328  0800e60c  00020328  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d88  0800e60c  00020d88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cf9  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bf  00000000  00000000  00039051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0003c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  0003d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fa5  00000000  00000000  0003e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bc4  00000000  00000000  00065575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddead  00000000  00000000  0007b139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158fe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c0  00000000  00000000  0015903c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000328 	.word	0x20000328
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b420 	.word	0x0800b420

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000032c 	.word	0x2000032c
 80001ec:	0800b420 	.word	0x0800b420

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	0000      	movs	r0, r0
	...

08001010 <mainalgor>:
DAC_HandleTypeDef hdac;
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

void mainalgor(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

	 HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001016:	2100      	movs	r1, #0
 8001018:	48a1      	ldr	r0, [pc, #644]	; (80012a0 <mainalgor+0x290>)
 800101a:	f002 ffee 	bl	8003ffa <HAL_DAC_Start>
	 HAL_ADC_Start(&hadc1);
 800101e:	48a1      	ldr	r0, [pc, #644]	; (80012a4 <mainalgor+0x294>)
 8001020:	f002 fb5e 	bl	80036e0 <HAL_ADC_Start>
	 adcval = HAL_ADC_GetValue(&hadc1);
 8001024:	489f      	ldr	r0, [pc, #636]	; (80012a4 <mainalgor+0x294>)
 8001026:	f002 fca5 	bl	8003974 <HAL_ADC_GetValue>
 800102a:	4603      	mov	r3, r0
 800102c:	4a9e      	ldr	r2, [pc, #632]	; (80012a8 <mainalgor+0x298>)
 800102e:	6013      	str	r3, [r2, #0]
	 vtemp = adcval*0.806;
 8001030:	4b9d      	ldr	r3, [pc, #628]	; (80012a8 <mainalgor+0x298>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa75 	bl	8000524 <__aeabi_ui2d>
 800103a:	a389      	add	r3, pc, #548	; (adr r3, 8001260 <mainalgor+0x250>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff faea 	bl	8000618 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fddc 	bl	8000c08 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	4a96      	ldr	r2, [pc, #600]	; (80012ac <mainalgor+0x29c>)
 8001054:	6013      	str	r3, [r2, #0]
	 temp = ((13.582 - sqrt((13.582*13.582)+(4*0.00433)*(2230.8-vtemp)))/(2*-0.00433))+30;
 8001056:	4b95      	ldr	r3, [pc, #596]	; (80012ac <mainalgor+0x29c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa84 	bl	8000568 <__aeabi_f2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	a180      	add	r1, pc, #512	; (adr r1, 8001268 <mainalgor+0x258>)
 8001066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800106a:	f7ff f91d 	bl	80002a8 <__aeabi_dsub>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	a37e      	add	r3, pc, #504	; (adr r3, 8001270 <mainalgor+0x260>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff facc 	bl	8000618 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	a37b      	add	r3, pc, #492	; (adr r3, 8001278 <mainalgor+0x268>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff f90d 	bl	80002ac <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	ec43 2b17 	vmov	d7, r2, r3
 800109a:	eeb0 0a47 	vmov.f32	s0, s14
 800109e:	eef0 0a67 	vmov.f32	s1, s15
 80010a2:	f00a f8d5 	bl	800b250 <sqrt>
 80010a6:	ec53 2b10 	vmov	r2, r3, d0
 80010aa:	a175      	add	r1, pc, #468	; (adr r1, 8001280 <mainalgor+0x270>)
 80010ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010b0:	f7ff f8fa 	bl	80002a8 <__aeabi_dsub>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	a372      	add	r3, pc, #456	; (adr r3, 8001288 <mainalgor+0x278>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fbd3 	bl	800086c <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b77      	ldr	r3, [pc, #476]	; (80012b0 <mainalgor+0x2a0>)
 80010d4:	f7ff f8ea 	bl	80002ac <__adddf3>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fd92 	bl	8000c08 <__aeabi_d2f>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a73      	ldr	r2, [pc, #460]	; (80012b4 <mainalgor+0x2a4>)
 80010e8:	6013      	str	r3, [r2, #0]
	 data2 = temp;
 80010ea:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <mainalgor+0x2a4>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f4:	ee17 2a90 	vmov	r2, s15
 80010f8:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <mainalgor+0x2a8>)
 80010fa:	601a      	str	r2, [r3, #0]
	 HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f002 fa87 	bl	8003610 <HAL_Delay>


	 HAL_ADC_Start(&hadc3);
 8001102:	486e      	ldr	r0, [pc, #440]	; (80012bc <mainalgor+0x2ac>)
 8001104:	f002 faec 	bl	80036e0 <HAL_ADC_Start>

	 		  if(HAL_ADC_PollForConversion(&hadc3, 1) == HAL_OK)
 8001108:	2101      	movs	r1, #1
 800110a:	486c      	ldr	r0, [pc, #432]	; (80012bc <mainalgor+0x2ac>)
 800110c:	f002 fbae 	bl	800386c <HAL_ADC_PollForConversion>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d13d      	bne.n	8001192 <mainalgor+0x182>
	 		  {
	 			  rawvoltage = HAL_ADC_GetValue(&hadc3);
 8001116:	4869      	ldr	r0, [pc, #420]	; (80012bc <mainalgor+0x2ac>)
 8001118:	f002 fc2c 	bl	8003974 <HAL_ADC_GetValue>
 800111c:	ee07 0a90 	vmov	s15, r0
 8001120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001124:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <mainalgor+0x2b0>)
 8001126:	edc3 7a00 	vstr	s15, [r3]
	 			  realvoltage = (rawvoltage*(3.236/4095))*(50/3.236);
 800112a:	4b65      	ldr	r3, [pc, #404]	; (80012c0 <mainalgor+0x2b0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa1a 	bl	8000568 <__aeabi_f2d>
 8001134:	a356      	add	r3, pc, #344	; (adr r3, 8001290 <mainalgor+0x280>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fa6d 	bl	8000618 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	a354      	add	r3, pc, #336	; (adr r3, 8001298 <mainalgor+0x288>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa64 	bl	8000618 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fd56 	bl	8000c08 <__aeabi_d2f>
 800115c:	4603      	mov	r3, r0
 800115e:	4a59      	ldr	r2, [pc, #356]	; (80012c4 <mainalgor+0x2b4>)
 8001160:	6013      	str	r3, [r2, #0]
	 			  resistor = realvoltage/(z/1000);
 8001162:	4b58      	ldr	r3, [pc, #352]	; (80012c4 <mainalgor+0x2b4>)
 8001164:	edd3 6a00 	vldr	s13, [r3]
 8001168:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <mainalgor+0x2b8>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ed9f 6a57 	vldr	s12, [pc, #348]	; 80012cc <mainalgor+0x2bc>
 8001172:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117a:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <mainalgor+0x2c0>)
 800117c:	edc3 7a00 	vstr	s15, [r3]
	 			  // if (z = 0) (resistor = 0);
	 			  data3 = resistor;
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <mainalgor+0x2c0>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118a:	ee17 2a90 	vmov	r2, s15
 800118e:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <mainalgor+0x2c4>)
 8001190:	601a      	str	r2, [r3, #0]

	 		  }
	 		  HAL_Delay(10);
 8001192:	200a      	movs	r0, #10
 8001194:	f002 fa3c 	bl	8003610 <HAL_Delay>



	 		 if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 8001198:	2101      	movs	r1, #1
 800119a:	484f      	ldr	r0, [pc, #316]	; (80012d8 <mainalgor+0x2c8>)
 800119c:	f003 f9b2 	bl	8004504 <HAL_GPIO_ReadPin>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d037      	beq.n	8001216 <mainalgor+0x206>
	 		 		  uint32_t time1=HAL_GetTick();
 80011a6:	f002 fa27 	bl	80035f8 <HAL_GetTick>
 80011aa:	6078      	str	r0, [r7, #4]
	 		 		  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 80011ac:	e02c      	b.n	8001208 <mainalgor+0x1f8>
	 		 			  if (HAL_GetTick()-time1 > 300){
 80011ae:	f002 fa23 	bl	80035f8 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011bc:	d910      	bls.n	80011e0 <mainalgor+0x1d0>
	 		 				  time1=HAL_GetTick();
 80011be:	f002 fa1b 	bl	80035f8 <HAL_GetTick>
 80011c2:	6078      	str	r0, [r7, #4]
	 		 				  z+=10;
 80011c4:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <mainalgor+0x2b8>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <mainalgor+0x2b8>)
 80011d4:	edc3 7a00 	vstr	s15, [r3]
	 		 				  HAL_Delay(5);
 80011d8:	2005      	movs	r0, #5
 80011da:	f002 fa19 	bl	8003610 <HAL_Delay>
	 		 				  break;
 80011de:	e01a      	b.n	8001216 <mainalgor+0x206>
	 		 	   }
	 		 	  if (HAL_GetTick()-time1 > 20) {
 80011e0:	f002 fa0a 	bl	80035f8 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b14      	cmp	r3, #20
 80011ec:	d90c      	bls.n	8001208 <mainalgor+0x1f8>
	 		 	   z += 1;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <mainalgor+0x2b8>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <mainalgor+0x2b8>)
 80011fe:	edc3 7a00 	vstr	s15, [r3]

	 		 	   HAL_Delay(100);
 8001202:	2064      	movs	r0, #100	; 0x64
 8001204:	f002 fa04 	bl	8003610 <HAL_Delay>
	 		 		  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 8001208:	2101      	movs	r1, #1
 800120a:	4833      	ldr	r0, [pc, #204]	; (80012d8 <mainalgor+0x2c8>)
 800120c:	f003 f97a 	bl	8004504 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1cb      	bne.n	80011ae <mainalgor+0x19e>
	 		 	   }
	 		 	   }
	 		 	   }

	 		 if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 8001216:	2102      	movs	r1, #2
 8001218:	4830      	ldr	r0, [pc, #192]	; (80012dc <mainalgor+0x2cc>)
 800121a:	f003 f973 	bl	8004504 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d078      	beq.n	8001316 <mainalgor+0x306>
	 					  uint32_t time2=HAL_GetTick();
 8001224:	f002 f9e8 	bl	80035f8 <HAL_GetTick>
 8001228:	6038      	str	r0, [r7, #0]
	 					  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 800122a:	e06d      	b.n	8001308 <mainalgor+0x2f8>
	 						  if (HAL_GetTick()-time2 > 300){
 800122c:	f002 f9e4 	bl	80035f8 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800123a:	d951      	bls.n	80012e0 <mainalgor+0x2d0>
	 							  time2=HAL_GetTick();
 800123c:	f002 f9dc 	bl	80035f8 <HAL_GetTick>
 8001240:	6038      	str	r0, [r7, #0]
	 							  z-=10;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <mainalgor+0x2b8>)
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800124c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <mainalgor+0x2b8>)
 8001252:	edc3 7a00 	vstr	s15, [r3]
	 							  HAL_Delay(5);
 8001256:	2005      	movs	r0, #5
 8001258:	f002 f9da 	bl	8003610 <HAL_Delay>
	 							  break;
 800125c:	e05b      	b.n	8001316 <mainalgor+0x306>
 800125e:	bf00      	nop
 8001260:	83126e98 	.word	0x83126e98
 8001264:	3fe9cac0 	.word	0x3fe9cac0
 8001268:	9999999a 	.word	0x9999999a
 800126c:	40a16d99 	.word	0x40a16d99
 8001270:	8644523f 	.word	0x8644523f
 8001274:	3f91bc55 	.word	0x3f91bc55
 8001278:	2bc72e28 	.word	0x2bc72e28
 800127c:	40670f10 	.word	0x40670f10
 8001280:	e76c8b44 	.word	0xe76c8b44
 8001284:	402b29fb 	.word	0x402b29fb
 8001288:	8644523f 	.word	0x8644523f
 800128c:	bf81bc55 	.word	0xbf81bc55
 8001290:	46f3484c 	.word	0x46f3484c
 8001294:	3f49e4f2 	.word	0x3f49e4f2
 8001298:	5102370f 	.word	0x5102370f
 800129c:	402ee700 	.word	0x402ee700
 80012a0:	20000824 	.word	0x20000824
 80012a4:	20000794 	.word	0x20000794
 80012a8:	2000084c 	.word	0x2000084c
 80012ac:	20000844 	.word	0x20000844
 80012b0:	403e0000 	.word	0x403e0000
 80012b4:	20000788 	.word	0x20000788
 80012b8:	20000784 	.word	0x20000784
 80012bc:	200007dc 	.word	0x200007dc
 80012c0:	20000848 	.word	0x20000848
 80012c4:	2000078c 	.word	0x2000078c
 80012c8:	20000790 	.word	0x20000790
 80012cc:	447a0000 	.word	0x447a0000
 80012d0:	2000083c 	.word	0x2000083c
 80012d4:	20000840 	.word	0x20000840
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
	 				   }
	 				 if (HAL_GetTick()-time2 > 20) {
 80012e0:	f002 f98a 	bl	80035f8 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b14      	cmp	r3, #20
 80012ec:	d90c      	bls.n	8001308 <mainalgor+0x2f8>
	 				   z -= 1;
 80012ee:	4b55      	ldr	r3, [pc, #340]	; (8001444 <mainalgor+0x434>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012fc:	4b51      	ldr	r3, [pc, #324]	; (8001444 <mainalgor+0x434>)
 80012fe:	edc3 7a00 	vstr	s15, [r3]

	 				   HAL_Delay(100);
 8001302:	2064      	movs	r0, #100	; 0x64
 8001304:	f002 f984 	bl	8003610 <HAL_Delay>
	 					  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 8001308:	2102      	movs	r1, #2
 800130a:	484f      	ldr	r0, [pc, #316]	; (8001448 <mainalgor+0x438>)
 800130c:	f003 f8fa 	bl	8004504 <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d18a      	bne.n	800122c <mainalgor+0x21c>
	 				   }
	 				   }
	 				   }

	 		y = z*20;
 8001316:	4b4b      	ldr	r3, [pc, #300]	; (8001444 <mainalgor+0x434>)
 8001318:	edd3 7a00 	vldr	s15, [r3]
 800131c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <mainalgor+0x43c>)
 8001326:	edc3 7a00 	vstr	s15, [r3]
	 		x = y/((3.3/4096)*1000);
 800132a:	4b48      	ldr	r3, [pc, #288]	; (800144c <mainalgor+0x43c>)
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001450 <mainalgor+0x440>
 8001334:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <mainalgor+0x444>)
 800133a:	edc3 7a00 	vstr	s15, [r3]

	 		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, x);
 800133e:	4b45      	ldr	r3, [pc, #276]	; (8001454 <mainalgor+0x444>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001348:	ee17 3a90 	vmov	r3, s15
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	4841      	ldr	r0, [pc, #260]	; (8001458 <mainalgor+0x448>)
 8001352:	f002 ff05 	bl	8004160 <HAL_DAC_SetValue>

	 		data1 = z;
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <mainalgor+0x434>)
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	4b3d      	ldr	r3, [pc, #244]	; (800145c <mainalgor+0x44c>)
 8001366:	601a      	str	r2, [r3, #0]

	 		if(z>100) (z=100);
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <mainalgor+0x434>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001460 <mainalgor+0x450>
 8001372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	dd02      	ble.n	8001382 <mainalgor+0x372>
 800137c:	4b31      	ldr	r3, [pc, #196]	; (8001444 <mainalgor+0x434>)
 800137e:	4a39      	ldr	r2, [pc, #228]	; (8001464 <mainalgor+0x454>)
 8001380:	601a      	str	r2, [r3, #0]
	 		if(x>4095) (x=4095);
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <mainalgor+0x444>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001468 <mainalgor+0x458>
 800138c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	dd02      	ble.n	800139c <mainalgor+0x38c>
 8001396:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <mainalgor+0x444>)
 8001398:	4a34      	ldr	r2, [pc, #208]	; (800146c <mainalgor+0x45c>)
 800139a:	601a      	str	r2, [r3, #0]
	 		if(z<0)(z=0);
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <mainalgor+0x434>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d503      	bpl.n	80013b4 <mainalgor+0x3a4>
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <mainalgor+0x434>)
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

	 		SSD1306_GotoXY (1, 1);
 80013b4:	2101      	movs	r1, #1
 80013b6:	2001      	movs	r0, #1
 80013b8:	f001 f99a 	bl	80026f0 <SSD1306_GotoXY>

	 			  sprintf(yazi4,"Curr| Res %d          ",data3);
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <mainalgor+0x460>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	492c      	ldr	r1, [pc, #176]	; (8001474 <mainalgor+0x464>)
 80013c4:	482c      	ldr	r0, [pc, #176]	; (8001478 <mainalgor+0x468>)
 80013c6:	f006 f99f 	bl	8007708 <siprintf>
	 			  SSD1306_Puts(yazi4,&Font_7x10,1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	492b      	ldr	r1, [pc, #172]	; (800147c <mainalgor+0x46c>)
 80013ce:	482a      	ldr	r0, [pc, #168]	; (8001478 <mainalgor+0x468>)
 80013d0:	f001 fa24 	bl	800281c <SSD1306_Puts>
	 			  SSD1306_GotoXY(105,1);
 80013d4:	2101      	movs	r1, #1
 80013d6:	2069      	movs	r0, #105	; 0x69
 80013d8:	f001 f98a 	bl	80026f0 <SSD1306_GotoXY>
	 			  SSD1306_Puts("ohm",&Font_7x10,1);
 80013dc:	2201      	movs	r2, #1
 80013de:	4927      	ldr	r1, [pc, #156]	; (800147c <mainalgor+0x46c>)
 80013e0:	4827      	ldr	r0, [pc, #156]	; (8001480 <mainalgor+0x470>)
 80013e2:	f001 fa1b 	bl	800281c <SSD1306_Puts>

	 			  sprintf(yazi3,"Temperature %d C        ",data2);
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <mainalgor+0x474>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4926      	ldr	r1, [pc, #152]	; (8001488 <mainalgor+0x478>)
 80013ee:	4827      	ldr	r0, [pc, #156]	; (800148c <mainalgor+0x47c>)
 80013f0:	f006 f98a 	bl	8007708 <siprintf>
	 			  SSD1306_GotoXY (1, 19);
 80013f4:	2113      	movs	r1, #19
 80013f6:	2001      	movs	r0, #1
 80013f8:	f001 f97a 	bl	80026f0 <SSD1306_GotoXY>
	 			  SSD1306_Puts(yazi3,&Font_7x10,1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	491f      	ldr	r1, [pc, #124]	; (800147c <mainalgor+0x46c>)
 8001400:	4822      	ldr	r0, [pc, #136]	; (800148c <mainalgor+0x47c>)
 8001402:	f001 fa0b 	bl	800281c <SSD1306_Puts>

	 			  sprintf(yazi1," %d         ",data1);
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <mainalgor+0x44c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4920      	ldr	r1, [pc, #128]	; (8001490 <mainalgor+0x480>)
 800140e:	4821      	ldr	r0, [pc, #132]	; (8001494 <mainalgor+0x484>)
 8001410:	f006 f97a 	bl	8007708 <siprintf>
	 			  SSD1306_GotoXY (1, 37);
 8001414:	2125      	movs	r1, #37	; 0x25
 8001416:	2001      	movs	r0, #1
 8001418:	f001 f96a 	bl	80026f0 <SSD1306_GotoXY>
	 			  SSD1306_Puts(yazi1,&Font_16x26,1);
 800141c:	2201      	movs	r2, #1
 800141e:	491e      	ldr	r1, [pc, #120]	; (8001498 <mainalgor+0x488>)
 8001420:	481c      	ldr	r0, [pc, #112]	; (8001494 <mainalgor+0x484>)
 8001422:	f001 f9fb 	bl	800281c <SSD1306_Puts>

	 			  SSD1306_GotoXY (87,37);
 8001426:	2125      	movs	r1, #37	; 0x25
 8001428:	2057      	movs	r0, #87	; 0x57
 800142a:	f001 f961 	bl	80026f0 <SSD1306_GotoXY>
	 			  SSD1306_Puts("mA  ", &Font_16x26,1);
 800142e:	2201      	movs	r2, #1
 8001430:	4919      	ldr	r1, [pc, #100]	; (8001498 <mainalgor+0x488>)
 8001432:	481a      	ldr	r0, [pc, #104]	; (800149c <mainalgor+0x48c>)
 8001434:	f001 f9f2 	bl	800281c <SSD1306_Puts>
	 			  SSD1306_UpdateScreen();
 8001438:	f001 f8b4 	bl	80025a4 <SSD1306_UpdateScreen>

}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000790 	.word	0x20000790
 8001448:	40020800 	.word	0x40020800
 800144c:	20000348 	.word	0x20000348
 8001450:	3f4e4000 	.word	0x3f4e4000
 8001454:	20000344 	.word	0x20000344
 8001458:	20000824 	.word	0x20000824
 800145c:	20000780 	.word	0x20000780
 8001460:	42c80000 	.word	0x42c80000
 8001464:	42c80000 	.word	0x42c80000
 8001468:	457ff000 	.word	0x457ff000
 800146c:	457ff000 	.word	0x457ff000
 8001470:	20000840 	.word	0x20000840
 8001474:	0800b438 	.word	0x0800b438
 8001478:	20000040 	.word	0x20000040
 800147c:	20000060 	.word	0x20000060
 8001480:	0800b450 	.word	0x0800b450
 8001484:	20000784 	.word	0x20000784
 8001488:	0800b454 	.word	0x0800b454
 800148c:	20000020 	.word	0x20000020
 8001490:	0800b470 	.word	0x0800b470
 8001494:	20000000 	.word	0x20000000
 8001498:	20000070 	.word	0x20000070
 800149c:	0800b480 	.word	0x0800b480

080014a0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f023 030f 	bic.w	r3, r3, #15
 80014b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f043 030c 	orr.w	r3, r3, #12
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	f043 030c 	orr.w	r3, r3, #12
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	2364      	movs	r3, #100	; 0x64
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2304      	movs	r3, #4
 80014ea:	214e      	movs	r1, #78	; 0x4e
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <lcd_send_cmd+0x5c>)
 80014ee:	f003 f97f 	bl	80047f0 <HAL_I2C_Master_Transmit>
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000c98 	.word	0x20000c98

08001500 <lcd_init>:
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8001504:	2002      	movs	r0, #2
 8001506:	f7ff ffcb 	bl	80014a0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f7ff ffc8 	bl	80014a0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8001510:	200c      	movs	r0, #12
 8001512:	f7ff ffc5 	bl	80014a0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8001516:	2080      	movs	r0, #128	; 0x80
 8001518:	f7ff ffc2 	bl	80014a0 <lcd_send_cmd>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <interface>:
float setmode1 = 1;
uint32_t button=0;

void interface(void)

{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	  SSD1306_GotoXY (1,1);
 8001524:	2101      	movs	r1, #1
 8001526:	2001      	movs	r0, #1
 8001528:	f001 f8e2 	bl	80026f0 <SSD1306_GotoXY>
	  SSD1306_Puts ("SELECT A MODE",&Font_7x10,1);
 800152c:	2201      	movs	r2, #1
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <interface+0x30>)
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <interface+0x34>)
 8001532:	f001 f973 	bl	800281c <SSD1306_Puts>
	  SSD1306_GotoXY(1,19);
 8001536:	2113      	movs	r1, #19
 8001538:	2001      	movs	r0, #1
 800153a:	f001 f8d9 	bl	80026f0 <SSD1306_GotoXY>
	  SSD1306_Puts("1-Cur 2-Res 3-Watt",&Font_7x10,1);
 800153e:	2201      	movs	r2, #1
 8001540:	4903      	ldr	r1, [pc, #12]	; (8001550 <interface+0x30>)
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <interface+0x38>)
 8001544:	f001 f96a 	bl	800281c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001548:	f001 f82c 	bl	80025a4 <SSD1306_UpdateScreen>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000060 	.word	0x20000060
 8001554:	0800b488 	.word	0x0800b488
 8001558:	0800b498 	.word	0x0800b498

0800155c <selecting>:

void selecting(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

	  // SSD1306_Fill(SSD1306_COLOR_BLACK);
	  // SSD1306_UpdateScreen();
	   if(setmode1>3)(setmode1=3);
 8001560:	4bb2      	ldr	r3, [pc, #712]	; (800182c <selecting+0x2d0>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800156a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	dd02      	ble.n	800157a <selecting+0x1e>
 8001574:	4bad      	ldr	r3, [pc, #692]	; (800182c <selecting+0x2d0>)
 8001576:	4aae      	ldr	r2, [pc, #696]	; (8001830 <selecting+0x2d4>)
 8001578:	601a      	str	r2, [r3, #0]
	   if(setmode1<1)(setmode1=1);
 800157a:	4bac      	ldr	r3, [pc, #688]	; (800182c <selecting+0x2d0>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	d503      	bpl.n	8001596 <selecting+0x3a>
 800158e:	4ba7      	ldr	r3, [pc, #668]	; (800182c <selecting+0x2d0>)
 8001590:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001594:	601a      	str	r2, [r3, #0]
		  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))
 8001596:	2101      	movs	r1, #1
 8001598:	48a6      	ldr	r0, [pc, #664]	; (8001834 <selecting+0x2d8>)
 800159a:	f002 ffb3 	bl	8004504 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00c      	beq.n	80015be <selecting+0x62>
		  {
			  setmode1+=1;
 80015a4:	4ba1      	ldr	r3, [pc, #644]	; (800182c <selecting+0x2d0>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b2:	4b9e      	ldr	r3, [pc, #632]	; (800182c <selecting+0x2d0>)
 80015b4:	edc3 7a00 	vstr	s15, [r3]
			  HAL_Delay(200);
 80015b8:	20c8      	movs	r0, #200	; 0xc8
 80015ba:	f002 f829 	bl	8003610 <HAL_Delay>
		  }

		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1))
 80015be:	2102      	movs	r1, #2
 80015c0:	489d      	ldr	r0, [pc, #628]	; (8001838 <selecting+0x2dc>)
 80015c2:	f002 ff9f 	bl	8004504 <HAL_GPIO_ReadPin>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <selecting+0x8a>
		  {
			  setmode1-=1;
 80015cc:	4b97      	ldr	r3, [pc, #604]	; (800182c <selecting+0x2d0>)
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015da:	4b94      	ldr	r3, [pc, #592]	; (800182c <selecting+0x2d0>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]
			  HAL_Delay(200);
 80015e0:	20c8      	movs	r0, #200	; 0xc8
 80015e2:	f002 f815 	bl	8003610 <HAL_Delay>
		  }

		  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13))  {(button=1); HAL_Delay(200);}
 80015e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ea:	4894      	ldr	r0, [pc, #592]	; (800183c <selecting+0x2e0>)
 80015ec:	f002 ff8a 	bl	8004504 <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <selecting+0xa8>
 80015f6:	4b92      	ldr	r3, [pc, #584]	; (8001840 <selecting+0x2e4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	20c8      	movs	r0, #200	; 0xc8
 80015fe:	f002 f807 	bl	8003610 <HAL_Delay>
 8001602:	e002      	b.n	800160a <selecting+0xae>
		  else{(button=0); }
 8001604:	4b8e      	ldr	r3, [pc, #568]	; (8001840 <selecting+0x2e4>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]


		  if(setmode1==1)
 800160a:	4b88      	ldr	r3, [pc, #544]	; (800182c <selecting+0x2d0>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001614:	eef4 7a47 	vcmp.f32	s15, s14
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	d14f      	bne.n	80016be <selecting+0x162>
		  	  {
		  		  SSD1306_GotoXY (1,1);
 800161e:	2101      	movs	r1, #1
 8001620:	2001      	movs	r0, #1
 8001622:	f001 f865 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts ("SELECT A MODE          ",&Font_7x10,1);
 8001626:	2201      	movs	r2, #1
 8001628:	4986      	ldr	r1, [pc, #536]	; (8001844 <selecting+0x2e8>)
 800162a:	4887      	ldr	r0, [pc, #540]	; (8001848 <selecting+0x2ec>)
 800162c:	f001 f8f6 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,19);
 8001630:	2113      	movs	r1, #19
 8001632:	2001      	movs	r0, #1
 8001634:	f001 f85c 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts("1-Cur 2-Res 3-Watt",&Font_7x10,1);
 8001638:	2201      	movs	r2, #1
 800163a:	4982      	ldr	r1, [pc, #520]	; (8001844 <selecting+0x2e8>)
 800163c:	4883      	ldr	r0, [pc, #524]	; (800184c <selecting+0x2f0>)
 800163e:	f001 f8ed 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,30);
 8001642:	211e      	movs	r1, #30
 8001644:	2001      	movs	r0, #1
 8001646:	f001 f853 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts("                  ",&Font_7x10,1);
 800164a:	2201      	movs	r2, #1
 800164c:	497d      	ldr	r1, [pc, #500]	; (8001844 <selecting+0x2e8>)
 800164e:	4880      	ldr	r0, [pc, #512]	; (8001850 <selecting+0x2f4>)
 8001650:	f001 f8e4 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,40);
 8001654:	2128      	movs	r1, #40	; 0x28
 8001656:	2001      	movs	r0, #1
 8001658:	f001 f84a 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts(" ^                ",&Font_11x18,1);
 800165c:	2201      	movs	r2, #1
 800165e:	497d      	ldr	r1, [pc, #500]	; (8001854 <selecting+0x2f8>)
 8001660:	487d      	ldr	r0, [pc, #500]	; (8001858 <selecting+0x2fc>)
 8001662:	f001 f8db 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_UpdateScreen();
 8001666:	f000 ff9d 	bl	80025a4 <SSD1306_UpdateScreen>



		  if(setmode1==1 && button == 1)
 800166a:	4b70      	ldr	r3, [pc, #448]	; (800182c <selecting+0x2d0>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001674:	eef4 7a47 	vcmp.f32	s15, s14
 8001678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167c:	d11f      	bne.n	80016be <selecting+0x162>
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <selecting+0x2e4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d11b      	bne.n	80016be <selecting+0x162>

			  {
				  while(setmode1==1)
 8001686:	e010      	b.n	80016aa <selecting+0x14e>
				  {
				  mainalgor();
 8001688:	f7ff fcc2 	bl	8001010 <mainalgor>

				  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13)==GPIO_PIN_SET)
 800168c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001690:	486a      	ldr	r0, [pc, #424]	; (800183c <selecting+0x2e0>)
 8001692:	f002 ff37 	bl	8004504 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <selecting+0x14e>

					  {
					  HAL_Delay(200);
 800169c:	20c8      	movs	r0, #200	; 0xc8
 800169e:	f001 ffb7 	bl	8003610 <HAL_Delay>
					  setmode1 = 0;
 80016a2:	4b62      	ldr	r3, [pc, #392]	; (800182c <selecting+0x2d0>)
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
				  while(setmode1==1)
 80016aa:	4b60      	ldr	r3, [pc, #384]	; (800182c <selecting+0x2d0>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016b4:	eef4 7a47 	vcmp.f32	s15, s14
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016bc:	d0e4      	beq.n	8001688 <selecting+0x12c>
				  }


			  }}

		  if (setmode1==2)
 80016be:	4b5b      	ldr	r3, [pc, #364]	; (800182c <selecting+0x2d0>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80016c8:	eef4 7a47 	vcmp.f32	s15, s14
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	d14f      	bne.n	8001772 <selecting+0x216>
		  	  {
		  		  SSD1306_GotoXY (1,1);
 80016d2:	2101      	movs	r1, #1
 80016d4:	2001      	movs	r0, #1
 80016d6:	f001 f80b 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts ("SELECT A MODE         ",&Font_7x10,1);
 80016da:	2201      	movs	r2, #1
 80016dc:	4959      	ldr	r1, [pc, #356]	; (8001844 <selecting+0x2e8>)
 80016de:	485f      	ldr	r0, [pc, #380]	; (800185c <selecting+0x300>)
 80016e0:	f001 f89c 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,19);
 80016e4:	2113      	movs	r1, #19
 80016e6:	2001      	movs	r0, #1
 80016e8:	f001 f802 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts("1-Cur 2-Res 3-Watt",&Font_7x10,1);
 80016ec:	2201      	movs	r2, #1
 80016ee:	4955      	ldr	r1, [pc, #340]	; (8001844 <selecting+0x2e8>)
 80016f0:	4856      	ldr	r0, [pc, #344]	; (800184c <selecting+0x2f0>)
 80016f2:	f001 f893 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,30);
 80016f6:	211e      	movs	r1, #30
 80016f8:	2001      	movs	r0, #1
 80016fa:	f000 fff9 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts("                   ",&Font_7x10,1);
 80016fe:	2201      	movs	r2, #1
 8001700:	4950      	ldr	r1, [pc, #320]	; (8001844 <selecting+0x2e8>)
 8001702:	4857      	ldr	r0, [pc, #348]	; (8001860 <selecting+0x304>)
 8001704:	f001 f88a 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,40);
 8001708:	2128      	movs	r1, #40	; 0x28
 800170a:	2001      	movs	r0, #1
 800170c:	f000 fff0 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts("     ^           ",&Font_11x18,1);
 8001710:	2201      	movs	r2, #1
 8001712:	4950      	ldr	r1, [pc, #320]	; (8001854 <selecting+0x2f8>)
 8001714:	4853      	ldr	r0, [pc, #332]	; (8001864 <selecting+0x308>)
 8001716:	f001 f881 	bl	800281c <SSD1306_Puts>
	      		  SSD1306_UpdateScreen();
 800171a:	f000 ff43 	bl	80025a4 <SSD1306_UpdateScreen>

		  	  if(setmode1==2 && button == 1)
 800171e:	4b43      	ldr	r3, [pc, #268]	; (800182c <selecting+0x2d0>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001728:	eef4 7a47 	vcmp.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	d11f      	bne.n	8001772 <selecting+0x216>
 8001732:	4b43      	ldr	r3, [pc, #268]	; (8001840 <selecting+0x2e4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d11b      	bne.n	8001772 <selecting+0x216>

		  	  {

		  		  while(setmode1==2)
 800173a:	e010      	b.n	800175e <selecting+0x202>
		  				  {
		  				  resistorr();
 800173c:	f000 fbf0 	bl	8001f20 <resistorr>

		  				  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13)==GPIO_PIN_SET)
 8001740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001744:	483d      	ldr	r0, [pc, #244]	; (800183c <selecting+0x2e0>)
 8001746:	f002 fedd 	bl	8004504 <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d106      	bne.n	800175e <selecting+0x202>

		  					  {
		  					HAL_Delay(200);
 8001750:	20c8      	movs	r0, #200	; 0xc8
 8001752:	f001 ff5d 	bl	8003610 <HAL_Delay>
		  					  setmode1=0;
 8001756:	4b35      	ldr	r3, [pc, #212]	; (800182c <selecting+0x2d0>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
		  		  while(setmode1==2)
 800175e:	4b33      	ldr	r3, [pc, #204]	; (800182c <selecting+0x2d0>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001768:	eef4 7a47 	vcmp.f32	s15, s14
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	d0e4      	beq.n	800173c <selecting+0x1e0>
		  					  }
		  				  }

		  	  }}

		  if (setmode1==3)
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <selecting+0x2d0>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800177c:	eef4 7a47 	vcmp.f32	s15, s14
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	d14f      	bne.n	8001826 <selecting+0x2ca>
		  	  {

		  		  SSD1306_GotoXY (1,1);
 8001786:	2101      	movs	r1, #1
 8001788:	2001      	movs	r0, #1
 800178a:	f000 ffb1 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts ("SELECT A MODE         ",&Font_7x10,1);
 800178e:	2201      	movs	r2, #1
 8001790:	492c      	ldr	r1, [pc, #176]	; (8001844 <selecting+0x2e8>)
 8001792:	4832      	ldr	r0, [pc, #200]	; (800185c <selecting+0x300>)
 8001794:	f001 f842 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,19);
 8001798:	2113      	movs	r1, #19
 800179a:	2001      	movs	r0, #1
 800179c:	f000 ffa8 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts("1-Cur 2-Res 3-Watt",&Font_7x10,1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	4928      	ldr	r1, [pc, #160]	; (8001844 <selecting+0x2e8>)
 80017a4:	4829      	ldr	r0, [pc, #164]	; (800184c <selecting+0x2f0>)
 80017a6:	f001 f839 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,30);
 80017aa:	211e      	movs	r1, #30
 80017ac:	2001      	movs	r0, #1
 80017ae:	f000 ff9f 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts("                  ",&Font_7x10,1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	4923      	ldr	r1, [pc, #140]	; (8001844 <selecting+0x2e8>)
 80017b6:	4826      	ldr	r0, [pc, #152]	; (8001850 <selecting+0x2f4>)
 80017b8:	f001 f830 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,40);
 80017bc:	2128      	movs	r1, #40	; 0x28
 80017be:	2001      	movs	r0, #1
 80017c0:	f000 ff96 	bl	80026f0 <SSD1306_GotoXY>
		  		  SSD1306_Puts("         ^          ",&Font_11x18,1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	4923      	ldr	r1, [pc, #140]	; (8001854 <selecting+0x2f8>)
 80017c8:	4827      	ldr	r0, [pc, #156]	; (8001868 <selecting+0x30c>)
 80017ca:	f001 f827 	bl	800281c <SSD1306_Puts>
		  		  SSD1306_UpdateScreen();
 80017ce:	f000 fee9 	bl	80025a4 <SSD1306_UpdateScreen>

		  	  if(setmode1==3 && button == 1)
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <selecting+0x2d0>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80017dc:	eef4 7a47 	vcmp.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	d11f      	bne.n	8001826 <selecting+0x2ca>
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <selecting+0x2e4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d11b      	bne.n	8001826 <selecting+0x2ca>

		  	  {
		  		 while(setmode1==3)
 80017ee:	e010      	b.n	8001812 <selecting+0x2b6>
		  		 {
		  			watter();
 80017f0:	f001 fbea 	bl	8002fc8 <watter>


	                if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13)==GPIO_PIN_SET)
 80017f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <selecting+0x2e0>)
 80017fa:	f002 fe83 	bl	8004504 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b01      	cmp	r3, #1
 8001802:	d106      	bne.n	8001812 <selecting+0x2b6>

		  			{

	                	HAL_Delay(200);
 8001804:	20c8      	movs	r0, #200	; 0xc8
 8001806:	f001 ff03 	bl	8003610 <HAL_Delay>
	                	setmode1=0;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <selecting+0x2d0>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
		  		 while(setmode1==3)
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <selecting+0x2d0>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800181c:	eef4 7a47 	vcmp.f32	s15, s14
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	d0e4      	beq.n	80017f0 <selecting+0x294>
		  			}
		  			}


		  	  }}
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000078 	.word	0x20000078
 8001830:	40400000 	.word	0x40400000
 8001834:	40020400 	.word	0x40020400
 8001838:	40020800 	.word	0x40020800
 800183c:	40021400 	.word	0x40021400
 8001840:	2000034c 	.word	0x2000034c
 8001844:	20000060 	.word	0x20000060
 8001848:	0800b4ac 	.word	0x0800b4ac
 800184c:	0800b498 	.word	0x0800b498
 8001850:	0800b4c4 	.word	0x0800b4c4
 8001854:	20000068 	.word	0x20000068
 8001858:	0800b4d8 	.word	0x0800b4d8
 800185c:	0800b4ec 	.word	0x0800b4ec
 8001860:	0800b504 	.word	0x0800b504
 8001864:	0800b518 	.word	0x0800b518
 8001868:	0800b52c 	.word	0x0800b52c

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001870:	f001 fe5c 	bl	800352c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001874:	f000 f818 	bl	80018a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001878:	f000 fa16 	bl	8001ca8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800187c:	f000 f9bc 	bl	8001bf8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001880:	f000 f9e4 	bl	8001c4c <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8001884:	f000 f924 	bl	8001ad0 <MX_DAC_Init>
  MX_I2C2_Init();
 8001888:	f000 f94c 	bl	8001b24 <MX_I2C2_Init>
  MX_ADC1_Init();
 800188c:	f000 f87c 	bl	8001988 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001890:	f000 f8cc 	bl	8001a2c <MX_ADC3_Init>
  MX_UART5_Init();
 8001894:	f000 f986 	bl	8001ba4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
welcome_lcd();
 8001898:	f001 fde8 	bl	800346c <welcome_lcd>
interface();
 800189c:	f7ff fe40 	bl	8001520 <interface>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
selecting();
 80018a0:	f7ff fe5c 	bl	800155c <selecting>
  {
 80018a4:	e7fc      	b.n	80018a0 <main+0x34>
	...

080018a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b094      	sub	sp, #80	; 0x50
 80018ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ae:	f107 0320 	add.w	r3, r7, #32
 80018b2:	2230      	movs	r2, #48	; 0x30
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f005 f89e 	bl	80069f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <SystemClock_Config+0xd8>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	4a2a      	ldr	r2, [pc, #168]	; (8001980 <SystemClock_Config+0xd8>)
 80018d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018da:	6413      	str	r3, [r2, #64]	; 0x40
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <SystemClock_Config+0xd8>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <SystemClock_Config+0xdc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018f4:	4a23      	ldr	r2, [pc, #140]	; (8001984 <SystemClock_Config+0xdc>)
 80018f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <SystemClock_Config+0xdc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001908:	2303      	movs	r3, #3
 800190a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800190c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001912:	2301      	movs	r3, #1
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001916:	2310      	movs	r3, #16
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800191a:	2302      	movs	r3, #2
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001922:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001924:	2304      	movs	r3, #4
 8001926:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001928:	23a8      	movs	r3, #168	; 0xa8
 800192a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800192c:	2302      	movs	r3, #2
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001930:	2307      	movs	r3, #7
 8001932:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	4618      	mov	r0, r3
 800193a:	f003 fd27 	bl	800538c <HAL_RCC_OscConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001944:	f000 fae4 	bl	8001f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001948:	230f      	movs	r3, #15
 800194a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001954:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800195a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f003 ff80 	bl	800586c <HAL_RCC_ClockConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001972:	f000 facd 	bl	8001f10 <Error_Handler>
  }
}
 8001976:	bf00      	nop
 8001978:	3750      	adds	r7, #80	; 0x50
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40007000 	.word	0x40007000

08001988 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800198e:	463b      	mov	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_ADC1_Init+0x98>)
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <MX_ADC1_Init+0x9c>)
 800199e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <MX_ADC1_Init+0xa0>)
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_ADC1_Init+0x98>)
 80019ea:	f001 fe35 	bl	8003658 <HAL_ADC_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019f4:	f000 fa8c 	bl	8001f10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019f8:	2303      	movs	r3, #3
 80019fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_ADC1_Init+0x98>)
 8001a0a:	f001 ffc1 	bl	8003990 <HAL_ADC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a14:	f000 fa7c 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000794 	.word	0x20000794
 8001a24:	40012000 	.word	0x40012000
 8001a28:	0f000001 	.word	0x0f000001

08001a2c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a32:	463b      	mov	r3, r7
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a40:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <MX_ADC3_Init+0x9c>)
 8001a42:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a4a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a6e:	4a17      	ldr	r2, [pc, #92]	; (8001acc <MX_ADC3_Init+0xa0>)
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001a8e:	f001 fde3 	bl	8003658 <HAL_ADC_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001a98:	f000 fa3a 	bl	8001f10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_ADC3_Init+0x98>)
 8001aae:	f001 ff6f 	bl	8003990 <HAL_ADC_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001ab8:	f000 fa2a 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200007dc 	.word	0x200007dc
 8001ac8:	40012200 	.word	0x40012200
 8001acc:	0f000001 	.word	0x0f000001

08001ad0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_DAC_Init+0x4c>)
 8001ae0:	4a0f      	ldr	r2, [pc, #60]	; (8001b20 <MX_DAC_Init+0x50>)
 8001ae2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_DAC_Init+0x4c>)
 8001ae6:	f002 fa66 	bl	8003fb6 <HAL_DAC_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001af0:	f000 fa0e 	bl	8001f10 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001afc:	463b      	mov	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_DAC_Init+0x4c>)
 8001b04:	f002 fadf 	bl	80040c6 <HAL_DAC_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001b0e:	f000 f9ff 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000824 	.word	0x20000824
 8001b20:	40007400 	.word	0x40007400

08001b24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <MX_I2C2_Init+0x78>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <MX_I2C2_Init+0x7c>)
 8001b32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b62:	f002 fd01 	bl	8004568 <HAL_I2C_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b6c:	f000 f9d0 	bl	8001f10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b70:	2100      	movs	r1, #0
 8001b72:	4809      	ldr	r0, [pc, #36]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b74:	f003 fa71 	bl	800505a <HAL_I2CEx_ConfigAnalogFilter>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b7e:	f000 f9c7 	bl	8001f10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b82:	2100      	movs	r1, #0
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <MX_I2C2_Init+0x74>)
 8001b86:	f003 faa4 	bl	80050d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b90:	f000 f9be 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000c98 	.word	0x20000c98
 8001b9c:	40005800 	.word	0x40005800
 8001ba0:	00061a80 	.word	0x00061a80

08001ba4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_UART5_Init+0x4c>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <MX_UART5_Init+0x50>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <MX_UART5_Init+0x4c>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <MX_UART5_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_UART5_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <MX_UART5_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_UART5_Init+0x4c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <MX_UART5_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_UART5_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_UART5_Init+0x4c>)
 8001bdc:	f004 f842 	bl	8005c64 <HAL_UART_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001be6:	f000 f993 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000cec 	.word	0x20000cec
 8001bf4:	40005000 	.word	0x40005000

08001bf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <MX_USART3_UART_Init+0x50>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c30:	f004 f818 	bl	8005c64 <HAL_UART_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c3a:	f000 f969 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000850 	.word	0x20000850
 8001c48:	40004800 	.word	0x40004800

08001c4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c90:	f003 fa5e 	bl	8005150 <HAL_PCD_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c9a:	f000 f939 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000890 	.word	0x20000890

08001ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	4b8c      	ldr	r3, [pc, #560]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a8b      	ldr	r2, [pc, #556]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b89      	ldr	r3, [pc, #548]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	4b85      	ldr	r3, [pc, #532]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a84      	ldr	r2, [pc, #528]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001ce4:	f043 0320 	orr.w	r3, r3, #32
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a7d      	ldr	r2, [pc, #500]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b7b      	ldr	r3, [pc, #492]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b77      	ldr	r3, [pc, #476]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a76      	ldr	r2, [pc, #472]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b74      	ldr	r3, [pc, #464]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a6f      	ldr	r2, [pc, #444]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a68      	ldr	r2, [pc, #416]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a61      	ldr	r2, [pc, #388]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <MX_GPIO_Init+0x24c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2140      	movs	r1, #64	; 0x40
 8001d86:	485c      	ldr	r0, [pc, #368]	; (8001ef8 <MX_GPIO_Init+0x250>)
 8001d88:	f002 fbd4 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	485a      	ldr	r0, [pc, #360]	; (8001efc <MX_GPIO_Init+0x254>)
 8001d92:	f002 fbcf 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d9c:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <MX_GPIO_Init+0x258>)
 8001d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4856      	ldr	r0, [pc, #344]	; (8001f04 <MX_GPIO_Init+0x25c>)
 8001dac:	f002 f9fe 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13;
 8001db0:	f242 0310 	movw	r3, #8208	; 0x2010
 8001db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4850      	ldr	r0, [pc, #320]	; (8001f08 <MX_GPIO_Init+0x260>)
 8001dc6:	f002 f9f1 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11;
 8001dca:	f640 0302 	movw	r3, #2050	; 0x802
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4849      	ldr	r0, [pc, #292]	; (8001f04 <MX_GPIO_Init+0x25c>)
 8001de0:	f002 f9e4 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001de4:	2386      	movs	r3, #134	; 0x86
 8001de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001df4:	230b      	movs	r3, #11
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4843      	ldr	r0, [pc, #268]	; (8001f0c <MX_GPIO_Init+0x264>)
 8001e00:	f002 f9d4 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e04:	2320      	movs	r3, #32
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	483d      	ldr	r0, [pc, #244]	; (8001f0c <MX_GPIO_Init+0x264>)
 8001e18:	f002 f9c8 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e1c:	2330      	movs	r3, #48	; 0x30
 8001e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e2c:	230b      	movs	r3, #11
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4833      	ldr	r0, [pc, #204]	; (8001f04 <MX_GPIO_Init+0x25c>)
 8001e38:	f002 f9b8 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8001e3c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e46:	2302      	movs	r3, #2
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	482a      	ldr	r0, [pc, #168]	; (8001efc <MX_GPIO_Init+0x254>)
 8001e52:	f002 f9ab 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e68:	230b      	movs	r3, #11
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	4822      	ldr	r0, [pc, #136]	; (8001efc <MX_GPIO_Init+0x254>)
 8001e74:	f002 f99a 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e78:	2340      	movs	r3, #64	; 0x40
 8001e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	481a      	ldr	r0, [pc, #104]	; (8001ef8 <MX_GPIO_Init+0x250>)
 8001e90:	f002 f98c 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <MX_GPIO_Init+0x250>)
 8001ea8:	f002 f980 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001eac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ebe:	230b      	movs	r3, #11
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <MX_GPIO_Init+0x250>)
 8001eca:	f002 f96f 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_GPIO_Init+0x254>)
 8001ee6:	f002 f961 	bl	80041ac <HAL_GPIO_Init>

}
 8001eea:	bf00      	nop
 8001eec:	3730      	adds	r7, #48	; 0x30
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40020400 	.word	0x40020400
 8001f00:	10110000 	.word	0x10110000
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40021400 	.word	0x40021400
 8001f0c:	40020000 	.word	0x40020000

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <resistorr>:
float temp1 , vtemp1 , adcval1 ;


void resistorr(void)

{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001f26:	2100      	movs	r1, #0
 8001f28:	489d      	ldr	r0, [pc, #628]	; (80021a0 <resistorr+0x280>)
 8001f2a:	f002 f866 	bl	8003ffa <HAL_DAC_Start>
    HAL_ADC_Start(&hadc1);
 8001f2e:	489d      	ldr	r0, [pc, #628]	; (80021a4 <resistorr+0x284>)
 8001f30:	f001 fbd6 	bl	80036e0 <HAL_ADC_Start>
    adcval1 = HAL_ADC_GetValue(&hadc1);
 8001f34:	489b      	ldr	r0, [pc, #620]	; (80021a4 <resistorr+0x284>)
 8001f36:	f001 fd1d 	bl	8003974 <HAL_ADC_GetValue>
 8001f3a:	ee07 0a90 	vmov	s15, r0
 8001f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f42:	4b99      	ldr	r3, [pc, #612]	; (80021a8 <resistorr+0x288>)
 8001f44:	edc3 7a00 	vstr	s15, [r3]
    vtemp1 = adcval1*0.806;
 8001f48:	4b97      	ldr	r3, [pc, #604]	; (80021a8 <resistorr+0x288>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fb0b 	bl	8000568 <__aeabi_f2d>
 8001f52:	a385      	add	r3, pc, #532	; (adr r3, 8002168 <resistorr+0x248>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fb5e 	bl	8000618 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fe50 	bl	8000c08 <__aeabi_d2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4a90      	ldr	r2, [pc, #576]	; (80021ac <resistorr+0x28c>)
 8001f6c:	6013      	str	r3, [r2, #0]
    temp1 = ((13.582 - sqrt((13.582*13.582)+(4*0.00433)*(2230.8-vtemp1)))/(2*-0.00433))+30;
 8001f6e:	4b8f      	ldr	r3, [pc, #572]	; (80021ac <resistorr+0x28c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe faf8 	bl	8000568 <__aeabi_f2d>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	a17c      	add	r1, pc, #496	; (adr r1, 8002170 <resistorr+0x250>)
 8001f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f82:	f7fe f991 	bl	80002a8 <__aeabi_dsub>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	a37a      	add	r3, pc, #488	; (adr r3, 8002178 <resistorr+0x258>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fb40 	bl	8000618 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	a377      	add	r3, pc, #476	; (adr r3, 8002180 <resistorr+0x260>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe f981 	bl	80002ac <__adddf3>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	ec43 2b17 	vmov	d7, r2, r3
 8001fb2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fb6:	eef0 0a67 	vmov.f32	s1, s15
 8001fba:	f009 f949 	bl	800b250 <sqrt>
 8001fbe:	ec53 2b10 	vmov	r2, r3, d0
 8001fc2:	a171      	add	r1, pc, #452	; (adr r1, 8002188 <resistorr+0x268>)
 8001fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fc8:	f7fe f96e 	bl	80002a8 <__aeabi_dsub>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	a36e      	add	r3, pc, #440	; (adr r3, 8002190 <resistorr+0x270>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fc47 	bl	800086c <__aeabi_ddiv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <resistorr+0x290>)
 8001fec:	f7fe f95e 	bl	80002ac <__adddf3>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7fe fe06 	bl	8000c08 <__aeabi_d2f>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a6d      	ldr	r2, [pc, #436]	; (80021b4 <resistorr+0x294>)
 8002000:	6013      	str	r3, [r2, #0]
    data21 = temp1;
 8002002:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <resistorr+0x294>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200c:	ee17 2a90 	vmov	r2, s15
 8002010:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <resistorr+0x298>)
 8002012:	601a      	str	r2, [r3, #0]

    	 HAL_Delay(10);
 8002014:	200a      	movs	r0, #10
 8002016:	f001 fafb 	bl	8003610 <HAL_Delay>



		HAL_ADC_Start(&hadc3);
 800201a:	4868      	ldr	r0, [pc, #416]	; (80021bc <resistorr+0x29c>)
 800201c:	f001 fb60 	bl	80036e0 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	4865      	ldr	r0, [pc, #404]	; (80021bc <resistorr+0x29c>)
 8002026:	f001 fc21 	bl	800386c <HAL_ADC_PollForConversion>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d135      	bne.n	800209c <resistorr+0x17c>
		  {
			  raw1voltage = HAL_ADC_GetValue(&hadc3);
 8002030:	4862      	ldr	r0, [pc, #392]	; (80021bc <resistorr+0x29c>)
 8002032:	f001 fc9f 	bl	8003974 <HAL_ADC_GetValue>
 8002036:	ee07 0a90 	vmov	s15, r0
 800203a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800203e:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <resistorr+0x2a0>)
 8002040:	edc3 7a00 	vstr	s15, [r3]
			  real1voltage = (raw1voltage*12.4100)/1000;
 8002044:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <resistorr+0x2a0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa8d 	bl	8000568 <__aeabi_f2d>
 800204e:	a352      	add	r3, pc, #328	; (adr r3, 8002198 <resistorr+0x278>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fae0 	bl	8000618 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <resistorr+0x2a4>)
 8002066:	f7fe fc01 	bl	800086c <__aeabi_ddiv>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fdc9 	bl	8000c08 <__aeabi_d2f>
 8002076:	4603      	mov	r3, r0
 8002078:	4a53      	ldr	r2, [pc, #332]	; (80021c8 <resistorr+0x2a8>)
 800207a:	6013      	str	r3, [r2, #0]
			  if (z1 = 0) (resistor1 = 0);
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <resistorr+0x2ac>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	4b51      	ldr	r3, [pc, #324]	; (80021cc <resistorr+0x2ac>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d003      	beq.n	800209c <resistorr+0x17c>
 8002094:	4b4e      	ldr	r3, [pc, #312]	; (80021d0 <resistorr+0x2b0>)
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	601a      	str	r2, [r3, #0]


		  }
		  HAL_Delay(10);
 800209c:	200a      	movs	r0, #10
 800209e:	f001 fab7 	bl	8003610 <HAL_Delay>


		  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))
 80020a2:	2101      	movs	r1, #1
 80020a4:	484b      	ldr	r0, [pc, #300]	; (80021d4 <resistorr+0x2b4>)
 80020a6:	f002 fa2d 	bl	8004504 <HAL_GPIO_ReadPin>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d037      	beq.n	8002120 <resistorr+0x200>
		  {
		 			  uint32_t time5=HAL_GetTick();
 80020b0:	f001 faa2 	bl	80035f8 <HAL_GetTick>
 80020b4:	6078      	str	r0, [r7, #4]
		 			  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 80020b6:	e02c      	b.n	8002112 <resistorr+0x1f2>
		 				  if (HAL_GetTick()-time5 > 300){
 80020b8:	f001 fa9e 	bl	80035f8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80020c6:	d910      	bls.n	80020ea <resistorr+0x1ca>
		 					  time5=HAL_GetTick();
 80020c8:	f001 fa96 	bl	80035f8 <HAL_GetTick>
 80020cc:	6078      	str	r0, [r7, #4]
		 					  resistor1+=50;
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <resistorr+0x2b0>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80021d8 <resistorr+0x2b8>
 80020d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020dc:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <resistorr+0x2b0>)
 80020de:	edc3 7a00 	vstr	s15, [r3]
		 					  HAL_Delay(5);
 80020e2:	2005      	movs	r0, #5
 80020e4:	f001 fa94 	bl	8003610 <HAL_Delay>
		 					  break;
 80020e8:	e01a      	b.n	8002120 <resistorr+0x200>
		 		   }
		 		 if (HAL_GetTick()-time5 > 20) {
 80020ea:	f001 fa85 	bl	80035f8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b14      	cmp	r3, #20
 80020f6:	d90c      	bls.n	8002112 <resistorr+0x1f2>
		 		   resistor1 += 1;
 80020f8:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <resistorr+0x2b0>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002102:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <resistorr+0x2b0>)
 8002108:	edc3 7a00 	vstr	s15, [r3]

		 		   HAL_Delay(100);
 800210c:	2064      	movs	r0, #100	; 0x64
 800210e:	f001 fa7f 	bl	8003610 <HAL_Delay>
		 			  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 8002112:	2101      	movs	r1, #1
 8002114:	482f      	ldr	r0, [pc, #188]	; (80021d4 <resistorr+0x2b4>)
 8002116:	f002 f9f5 	bl	8004504 <HAL_GPIO_ReadPin>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1cb      	bne.n	80020b8 <resistorr+0x198>
		 		   }
		 		   }
		 		   }


		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 8002120:	2102      	movs	r1, #2
 8002122:	482e      	ldr	r0, [pc, #184]	; (80021dc <resistorr+0x2bc>)
 8002124:	f002 f9ee 	bl	8004504 <HAL_GPIO_ReadPin>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d073      	beq.n	8002216 <resistorr+0x2f6>
		 			  uint32_t time4=HAL_GetTick();
 800212e:	f001 fa63 	bl	80035f8 <HAL_GetTick>
 8002132:	6038      	str	r0, [r7, #0]
		 			  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 8002134:	e068      	b.n	8002208 <resistorr+0x2e8>
		 				  if (HAL_GetTick()-time4 > 300){
 8002136:	f001 fa5f 	bl	80035f8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002144:	d94c      	bls.n	80021e0 <resistorr+0x2c0>
		 					  time4=HAL_GetTick();
 8002146:	f001 fa57 	bl	80035f8 <HAL_GetTick>
 800214a:	6038      	str	r0, [r7, #0]
		 					  resistor1 -= 50;
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <resistorr+0x2b0>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80021d8 <resistorr+0x2b8>
 8002156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <resistorr+0x2b0>)
 800215c:	edc3 7a00 	vstr	s15, [r3]
		 					  HAL_Delay(5);
 8002160:	2005      	movs	r0, #5
 8002162:	f001 fa55 	bl	8003610 <HAL_Delay>
		 					  break;
 8002166:	e056      	b.n	8002216 <resistorr+0x2f6>
 8002168:	83126e98 	.word	0x83126e98
 800216c:	3fe9cac0 	.word	0x3fe9cac0
 8002170:	9999999a 	.word	0x9999999a
 8002174:	40a16d99 	.word	0x40a16d99
 8002178:	8644523f 	.word	0x8644523f
 800217c:	3f91bc55 	.word	0x3f91bc55
 8002180:	2bc72e28 	.word	0x2bc72e28
 8002184:	40670f10 	.word	0x40670f10
 8002188:	e76c8b44 	.word	0xe76c8b44
 800218c:	402b29fb 	.word	0x402b29fb
 8002190:	8644523f 	.word	0x8644523f
 8002194:	bf81bc55 	.word	0xbf81bc55
 8002198:	851eb852 	.word	0x851eb852
 800219c:	4028d1eb 	.word	0x4028d1eb
 80021a0:	20000824 	.word	0x20000824
 80021a4:	20000794 	.word	0x20000794
 80021a8:	20000d4c 	.word	0x20000d4c
 80021ac:	20000d2c 	.word	0x20000d2c
 80021b0:	403e0000 	.word	0x403e0000
 80021b4:	20000d40 	.word	0x20000d40
 80021b8:	20000d30 	.word	0x20000d30
 80021bc:	200007dc 	.word	0x200007dc
 80021c0:	20000350 	.word	0x20000350
 80021c4:	408f4000 	.word	0x408f4000
 80021c8:	20000354 	.word	0x20000354
 80021cc:	20000080 	.word	0x20000080
 80021d0:	2000007c 	.word	0x2000007c
 80021d4:	40020400 	.word	0x40020400
 80021d8:	42480000 	.word	0x42480000
 80021dc:	40020800 	.word	0x40020800
		 		   }
		 		   if (HAL_GetTick()-time4 > 20){
 80021e0:	f001 fa0a 	bl	80035f8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b14      	cmp	r3, #20
 80021ec:	d90c      	bls.n	8002208 <resistorr+0x2e8>
		 		   resistor1 -= 1;
 80021ee:	4b74      	ldr	r3, [pc, #464]	; (80023c0 <resistorr+0x4a0>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021fc:	4b70      	ldr	r3, [pc, #448]	; (80023c0 <resistorr+0x4a0>)
 80021fe:	edc3 7a00 	vstr	s15, [r3]

		 		   HAL_Delay(100);
 8002202:	2064      	movs	r0, #100	; 0x64
 8002204:	f001 fa04 	bl	8003610 <HAL_Delay>
		 			  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 8002208:	2102      	movs	r1, #2
 800220a:	486e      	ldr	r0, [pc, #440]	; (80023c4 <resistorr+0x4a4>)
 800220c:	f002 f97a 	bl	8004504 <HAL_GPIO_ReadPin>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d18f      	bne.n	8002136 <resistorr+0x216>
		 		   }
		 		   }
		 		   }


		  z1 = (real1voltage / resistor1)*1000;
 8002216:	4b6c      	ldr	r3, [pc, #432]	; (80023c8 <resistorr+0x4a8>)
 8002218:	edd3 6a00 	vldr	s13, [r3]
 800221c:	4b68      	ldr	r3, [pc, #416]	; (80023c0 <resistorr+0x4a0>)
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002226:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80023cc <resistorr+0x4ac>
 800222a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222e:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <resistorr+0x4b0>)
 8002230:	edc3 7a00 	vstr	s15, [r3]
		  //resistor1def = (real1voltage/z1)*100;
		  data31 = resistor1;
 8002234:	4b62      	ldr	r3, [pc, #392]	; (80023c0 <resistorr+0x4a0>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800223e:	ee17 2a90 	vmov	r2, s15
 8002242:	4b64      	ldr	r3, [pc, #400]	; (80023d4 <resistorr+0x4b4>)
 8002244:	601a      	str	r2, [r3, #0]
		  data11 = z1;
 8002246:	4b62      	ldr	r3, [pc, #392]	; (80023d0 <resistorr+0x4b0>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002250:	ee17 2a90 	vmov	r2, s15
 8002254:	4b60      	ldr	r3, [pc, #384]	; (80023d8 <resistorr+0x4b8>)
 8002256:	601a      	str	r2, [r3, #0]

		  if(z1>100) (z1=100);
 8002258:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <resistorr+0x4b0>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80023dc <resistorr+0x4bc>
 8002262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226a:	dd02      	ble.n	8002272 <resistorr+0x352>
 800226c:	4b58      	ldr	r3, [pc, #352]	; (80023d0 <resistorr+0x4b0>)
 800226e:	4a5c      	ldr	r2, [pc, #368]	; (80023e0 <resistorr+0x4c0>)
 8002270:	601a      	str	r2, [r3, #0]
		  if(data11>100) (data11=100);
 8002272:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <resistorr+0x4b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d902      	bls.n	8002280 <resistorr+0x360>
 800227a:	4b57      	ldr	r3, [pc, #348]	; (80023d8 <resistorr+0x4b8>)
 800227c:	2264      	movs	r2, #100	; 0x64
 800227e:	601a      	str	r2, [r3, #0]

		  SSD1306_GotoXY (1, 1);
 8002280:	2101      	movs	r1, #1
 8002282:	2001      	movs	r0, #1
 8002284:	f000 fa34 	bl	80026f0 <SSD1306_GotoXY>
		  sprintf(yazi41,"Res| Curr %d            ",data11);
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <resistorr+0x4b8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4955      	ldr	r1, [pc, #340]	; (80023e4 <resistorr+0x4c4>)
 8002290:	4855      	ldr	r0, [pc, #340]	; (80023e8 <resistorr+0x4c8>)
 8002292:	f005 fa39 	bl	8007708 <siprintf>
		  SSD1306_Puts(yazi41,&Font_7x10,1);
 8002296:	2201      	movs	r2, #1
 8002298:	4954      	ldr	r1, [pc, #336]	; (80023ec <resistorr+0x4cc>)
 800229a:	4853      	ldr	r0, [pc, #332]	; (80023e8 <resistorr+0x4c8>)
 800229c:	f000 fabe 	bl	800281c <SSD1306_Puts>
		  SSD1306_GotoXY(105,1);
 80022a0:	2101      	movs	r1, #1
 80022a2:	2069      	movs	r0, #105	; 0x69
 80022a4:	f000 fa24 	bl	80026f0 <SSD1306_GotoXY>
		  SSD1306_Puts("mA",&Font_7x10,1);
 80022a8:	2201      	movs	r2, #1
 80022aa:	4950      	ldr	r1, [pc, #320]	; (80023ec <resistorr+0x4cc>)
 80022ac:	4850      	ldr	r0, [pc, #320]	; (80023f0 <resistorr+0x4d0>)
 80022ae:	f000 fab5 	bl	800281c <SSD1306_Puts>
		  sprintf(yazi31,"Temperature %d C    ",data21);
 80022b2:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <resistorr+0x4d4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	494f      	ldr	r1, [pc, #316]	; (80023f8 <resistorr+0x4d8>)
 80022ba:	4850      	ldr	r0, [pc, #320]	; (80023fc <resistorr+0x4dc>)
 80022bc:	f005 fa24 	bl	8007708 <siprintf>
		  SSD1306_GotoXY (1, 19);
 80022c0:	2113      	movs	r1, #19
 80022c2:	2001      	movs	r0, #1
 80022c4:	f000 fa14 	bl	80026f0 <SSD1306_GotoXY>
		  SSD1306_Puts(yazi31,&Font_7x10,1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	4948      	ldr	r1, [pc, #288]	; (80023ec <resistorr+0x4cc>)
 80022cc:	484b      	ldr	r0, [pc, #300]	; (80023fc <resistorr+0x4dc>)
 80022ce:	f000 faa5 	bl	800281c <SSD1306_Puts>
		  sprintf(yazi11,"%d       ",data31);
 80022d2:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <resistorr+0x4b4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4949      	ldr	r1, [pc, #292]	; (8002400 <resistorr+0x4e0>)
 80022da:	484a      	ldr	r0, [pc, #296]	; (8002404 <resistorr+0x4e4>)
 80022dc:	f005 fa14 	bl	8007708 <siprintf>
		  SSD1306_GotoXY (1, 37);
 80022e0:	2125      	movs	r1, #37	; 0x25
 80022e2:	2001      	movs	r0, #1
 80022e4:	f000 fa04 	bl	80026f0 <SSD1306_GotoXY>
		  SSD1306_Puts(yazi11,&Font_16x26,1);
 80022e8:	2201      	movs	r2, #1
 80022ea:	4947      	ldr	r1, [pc, #284]	; (8002408 <resistorr+0x4e8>)
 80022ec:	4845      	ldr	r0, [pc, #276]	; (8002404 <resistorr+0x4e4>)
 80022ee:	f000 fa95 	bl	800281c <SSD1306_Puts>
		  SSD1306_GotoXY (75,37);
 80022f2:	2125      	movs	r1, #37	; 0x25
 80022f4:	204b      	movs	r0, #75	; 0x4b
 80022f6:	f000 f9fb 	bl	80026f0 <SSD1306_GotoXY>
		  SSD1306_Puts("ohm  ", &Font_16x26,1);
 80022fa:	2201      	movs	r2, #1
 80022fc:	4942      	ldr	r1, [pc, #264]	; (8002408 <resistorr+0x4e8>)
 80022fe:	4843      	ldr	r0, [pc, #268]	; (800240c <resistorr+0x4ec>)
 8002300:	f000 fa8c 	bl	800281c <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8002304:	f000 f94e 	bl	80025a4 <SSD1306_UpdateScreen>
		  HAL_Delay(20);
 8002308:	2014      	movs	r0, #20
 800230a:	f001 f981 	bl	8003610 <HAL_Delay>

		  if(resistor1<1) (resistor1=1);
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <resistorr+0x4a0>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	d503      	bpl.n	800232a <resistorr+0x40a>
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <resistorr+0x4a0>)
 8002324:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002328:	601a      	str	r2, [r3, #0]
		  if(z1<0) (z1=0);
 800232a:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <resistorr+0x4b0>)
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	d503      	bpl.n	8002342 <resistorr+0x422>
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <resistorr+0x4b0>)
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	601a      	str	r2, [r3, #0]


		  // z1 mA cinsinden değer bize voltaj lazım, resistor belli

		  y3 = z1*20;
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <resistorr+0x4b0>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800234c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <resistorr+0x4f0>)
 8002352:	edc3 7a00 	vstr	s15, [r3]

		  x1 = y3 /((3.3/4096)*1000);
 8002356:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <resistorr+0x4f0>)
 8002358:	ed93 7a00 	vldr	s14, [r3]
 800235c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002414 <resistorr+0x4f4>
 8002360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002364:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <resistorr+0x4f8>)
 8002366:	edc3 7a00 	vstr	s15, [r3]

		  if(x1>4095) (x1 = 4095);
 800236a:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <resistorr+0x4f8>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800241c <resistorr+0x4fc>
 8002374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237c:	dd02      	ble.n	8002384 <resistorr+0x464>
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <resistorr+0x4f8>)
 8002380:	4a27      	ldr	r2, [pc, #156]	; (8002420 <resistorr+0x500>)
 8002382:	601a      	str	r2, [r3, #0]
		  if(z1>100) (z1=100);
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <resistorr+0x4b0>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80023dc <resistorr+0x4bc>
 800238e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	dd02      	ble.n	800239e <resistorr+0x47e>
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <resistorr+0x4b0>)
 800239a:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <resistorr+0x4c0>)
 800239c:	601a      	str	r2, [r3, #0]

		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, x1);
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <resistorr+0x4f8>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a8:	ee17 3a90 	vmov	r3, s15
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	481c      	ldr	r0, [pc, #112]	; (8002424 <resistorr+0x504>)
 80023b2:	f001 fed5 	bl	8004160 <HAL_DAC_SetValue>

		 }
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000007c 	.word	0x2000007c
 80023c4:	40020800 	.word	0x40020800
 80023c8:	20000354 	.word	0x20000354
 80023cc:	447a0000 	.word	0x447a0000
 80023d0:	20000080 	.word	0x20000080
 80023d4:	20000d48 	.word	0x20000d48
 80023d8:	20000d44 	.word	0x20000d44
 80023dc:	42c80000 	.word	0x42c80000
 80023e0:	42c80000 	.word	0x42c80000
 80023e4:	0800b544 	.word	0x0800b544
 80023e8:	200000c4 	.word	0x200000c4
 80023ec:	20000060 	.word	0x20000060
 80023f0:	0800b560 	.word	0x0800b560
 80023f4:	20000d30 	.word	0x20000d30
 80023f8:	0800b564 	.word	0x0800b564
 80023fc:	200000a4 	.word	0x200000a4
 8002400:	0800b57c 	.word	0x0800b57c
 8002404:	20000084 	.word	0x20000084
 8002408:	20000070 	.word	0x20000070
 800240c:	0800b588 	.word	0x0800b588
 8002410:	20000d34 	.word	0x20000d34
 8002414:	3f4e4000 	.word	0x3f4e4000
 8002418:	20000358 	.word	0x20000358
 800241c:	457ff000 	.word	0x457ff000
 8002420:	457ff000 	.word	0x457ff000
 8002424:	20000824 	.word	0x20000824

08002428 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800242e:	f000 fa1b 	bl	8002868 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002432:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002436:	2201      	movs	r2, #1
 8002438:	2178      	movs	r1, #120	; 0x78
 800243a:	4858      	ldr	r0, [pc, #352]	; (800259c <SSD1306_Init+0x174>)
 800243c:	f002 fad6 	bl	80049ec <HAL_I2C_IsDeviceReady>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002446:	2300      	movs	r3, #0
 8002448:	e0a4      	b.n	8002594 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800244a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800244e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002450:	e002      	b.n	8002458 <SSD1306_Init+0x30>
		p--;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3b01      	subs	r3, #1
 8002456:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f9      	bne.n	8002452 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800245e:	22ae      	movs	r2, #174	; 0xae
 8002460:	2100      	movs	r1, #0
 8002462:	2078      	movs	r0, #120	; 0x78
 8002464:	f000 fa6e 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002468:	2220      	movs	r2, #32
 800246a:	2100      	movs	r1, #0
 800246c:	2078      	movs	r0, #120	; 0x78
 800246e:	f000 fa69 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002472:	2210      	movs	r2, #16
 8002474:	2100      	movs	r1, #0
 8002476:	2078      	movs	r0, #120	; 0x78
 8002478:	f000 fa64 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800247c:	22b0      	movs	r2, #176	; 0xb0
 800247e:	2100      	movs	r1, #0
 8002480:	2078      	movs	r0, #120	; 0x78
 8002482:	f000 fa5f 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002486:	22c8      	movs	r2, #200	; 0xc8
 8002488:	2100      	movs	r1, #0
 800248a:	2078      	movs	r0, #120	; 0x78
 800248c:	f000 fa5a 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002490:	2200      	movs	r2, #0
 8002492:	2100      	movs	r1, #0
 8002494:	2078      	movs	r0, #120	; 0x78
 8002496:	f000 fa55 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800249a:	2210      	movs	r2, #16
 800249c:	2100      	movs	r1, #0
 800249e:	2078      	movs	r0, #120	; 0x78
 80024a0:	f000 fa50 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80024a4:	2240      	movs	r2, #64	; 0x40
 80024a6:	2100      	movs	r1, #0
 80024a8:	2078      	movs	r0, #120	; 0x78
 80024aa:	f000 fa4b 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80024ae:	2281      	movs	r2, #129	; 0x81
 80024b0:	2100      	movs	r1, #0
 80024b2:	2078      	movs	r0, #120	; 0x78
 80024b4:	f000 fa46 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80024b8:	22ff      	movs	r2, #255	; 0xff
 80024ba:	2100      	movs	r1, #0
 80024bc:	2078      	movs	r0, #120	; 0x78
 80024be:	f000 fa41 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80024c2:	22a1      	movs	r2, #161	; 0xa1
 80024c4:	2100      	movs	r1, #0
 80024c6:	2078      	movs	r0, #120	; 0x78
 80024c8:	f000 fa3c 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80024cc:	22a6      	movs	r2, #166	; 0xa6
 80024ce:	2100      	movs	r1, #0
 80024d0:	2078      	movs	r0, #120	; 0x78
 80024d2:	f000 fa37 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80024d6:	22a8      	movs	r2, #168	; 0xa8
 80024d8:	2100      	movs	r1, #0
 80024da:	2078      	movs	r0, #120	; 0x78
 80024dc:	f000 fa32 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80024e0:	223f      	movs	r2, #63	; 0x3f
 80024e2:	2100      	movs	r1, #0
 80024e4:	2078      	movs	r0, #120	; 0x78
 80024e6:	f000 fa2d 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80024ea:	22a4      	movs	r2, #164	; 0xa4
 80024ec:	2100      	movs	r1, #0
 80024ee:	2078      	movs	r0, #120	; 0x78
 80024f0:	f000 fa28 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80024f4:	22d3      	movs	r2, #211	; 0xd3
 80024f6:	2100      	movs	r1, #0
 80024f8:	2078      	movs	r0, #120	; 0x78
 80024fa:	f000 fa23 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	2078      	movs	r0, #120	; 0x78
 8002504:	f000 fa1e 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002508:	22d5      	movs	r2, #213	; 0xd5
 800250a:	2100      	movs	r1, #0
 800250c:	2078      	movs	r0, #120	; 0x78
 800250e:	f000 fa19 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002512:	22f0      	movs	r2, #240	; 0xf0
 8002514:	2100      	movs	r1, #0
 8002516:	2078      	movs	r0, #120	; 0x78
 8002518:	f000 fa14 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800251c:	22d9      	movs	r2, #217	; 0xd9
 800251e:	2100      	movs	r1, #0
 8002520:	2078      	movs	r0, #120	; 0x78
 8002522:	f000 fa0f 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002526:	2222      	movs	r2, #34	; 0x22
 8002528:	2100      	movs	r1, #0
 800252a:	2078      	movs	r0, #120	; 0x78
 800252c:	f000 fa0a 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002530:	22da      	movs	r2, #218	; 0xda
 8002532:	2100      	movs	r1, #0
 8002534:	2078      	movs	r0, #120	; 0x78
 8002536:	f000 fa05 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800253a:	2212      	movs	r2, #18
 800253c:	2100      	movs	r1, #0
 800253e:	2078      	movs	r0, #120	; 0x78
 8002540:	f000 fa00 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002544:	22db      	movs	r2, #219	; 0xdb
 8002546:	2100      	movs	r1, #0
 8002548:	2078      	movs	r0, #120	; 0x78
 800254a:	f000 f9fb 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800254e:	2220      	movs	r2, #32
 8002550:	2100      	movs	r1, #0
 8002552:	2078      	movs	r0, #120	; 0x78
 8002554:	f000 f9f6 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002558:	228d      	movs	r2, #141	; 0x8d
 800255a:	2100      	movs	r1, #0
 800255c:	2078      	movs	r0, #120	; 0x78
 800255e:	f000 f9f1 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002562:	2214      	movs	r2, #20
 8002564:	2100      	movs	r1, #0
 8002566:	2078      	movs	r0, #120	; 0x78
 8002568:	f000 f9ec 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800256c:	22af      	movs	r2, #175	; 0xaf
 800256e:	2100      	movs	r1, #0
 8002570:	2078      	movs	r0, #120	; 0x78
 8002572:	f000 f9e7 	bl	8002944 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002576:	2000      	movs	r0, #0
 8002578:	f000 f842 	bl	8002600 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800257c:	f000 f812 	bl	80025a4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <SSD1306_Init+0x178>)
 8002582:	2200      	movs	r2, #0
 8002584:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <SSD1306_Init+0x178>)
 8002588:	2200      	movs	r2, #0
 800258a:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <SSD1306_Init+0x178>)
 800258e:	2201      	movs	r2, #1
 8002590:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000c98 	.word	0x20000c98
 80025a0:	2000075c 	.word	0x2000075c

080025a4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80025aa:	2300      	movs	r3, #0
 80025ac:	71fb      	strb	r3, [r7, #7]
 80025ae:	e01d      	b.n	80025ec <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	3b50      	subs	r3, #80	; 0x50
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	2100      	movs	r1, #0
 80025ba:	2078      	movs	r0, #120	; 0x78
 80025bc:	f000 f9c2 	bl	8002944 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2100      	movs	r1, #0
 80025c4:	2078      	movs	r0, #120	; 0x78
 80025c6:	f000 f9bd 	bl	8002944 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80025ca:	2210      	movs	r2, #16
 80025cc:	2100      	movs	r1, #0
 80025ce:	2078      	movs	r0, #120	; 0x78
 80025d0:	f000 f9b8 	bl	8002944 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	01db      	lsls	r3, r3, #7
 80025d8:	4a08      	ldr	r2, [pc, #32]	; (80025fc <SSD1306_UpdateScreen+0x58>)
 80025da:	441a      	add	r2, r3
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	2140      	movs	r1, #64	; 0x40
 80025e0:	2078      	movs	r0, #120	; 0x78
 80025e2:	f000 f957 	bl	8002894 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	3301      	adds	r3, #1
 80025ea:	71fb      	strb	r3, [r7, #7]
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2b07      	cmp	r3, #7
 80025f0:	d9de      	bls.n	80025b0 <SSD1306_UpdateScreen+0xc>
	}
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2000035c 	.word	0x2000035c

08002600 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <SSD1306_Fill+0x14>
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <SSD1306_Fill+0x16>
 8002614:	23ff      	movs	r3, #255	; 0xff
 8002616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261a:	4619      	mov	r1, r3
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <SSD1306_Fill+0x2c>)
 800261e:	f004 f9eb 	bl	80069f8 <memset>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000035c 	.word	0x2000035c

08002630 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	80fb      	strh	r3, [r7, #6]
 800263a:	460b      	mov	r3, r1
 800263c:	80bb      	strh	r3, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	70fb      	strb	r3, [r7, #3]
	if (
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	2b7f      	cmp	r3, #127	; 0x7f
 8002646:	d848      	bhi.n	80026da <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002648:	88bb      	ldrh	r3, [r7, #4]
 800264a:	2b3f      	cmp	r3, #63	; 0x3f
 800264c:	d845      	bhi.n	80026da <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800264e:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <SSD1306_DrawPixel+0xb8>)
 8002650:	791b      	ldrb	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d11a      	bne.n	80026a0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800266a:	88fa      	ldrh	r2, [r7, #6]
 800266c:	88bb      	ldrh	r3, [r7, #4]
 800266e:	08db      	lsrs	r3, r3, #3
 8002670:	b298      	uxth	r0, r3
 8002672:	4603      	mov	r3, r0
 8002674:	01db      	lsls	r3, r3, #7
 8002676:	4413      	add	r3, r2
 8002678:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <SSD1306_DrawPixel+0xbc>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	b25a      	sxtb	r2, r3
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	2101      	movs	r1, #1
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	b25b      	sxtb	r3, r3
 800268c:	4313      	orrs	r3, r2
 800268e:	b259      	sxtb	r1, r3
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	4603      	mov	r3, r0
 8002694:	01db      	lsls	r3, r3, #7
 8002696:	4413      	add	r3, r2
 8002698:	b2c9      	uxtb	r1, r1
 800269a:	4a14      	ldr	r2, [pc, #80]	; (80026ec <SSD1306_DrawPixel+0xbc>)
 800269c:	54d1      	strb	r1, [r2, r3]
 800269e:	e01d      	b.n	80026dc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	88bb      	ldrh	r3, [r7, #4]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	b298      	uxth	r0, r3
 80026a8:	4603      	mov	r3, r0
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	4413      	add	r3, r2
 80026ae:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <SSD1306_DrawPixel+0xbc>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	b25a      	sxtb	r2, r3
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	b25b      	sxtb	r3, r3
 80026c6:	4013      	ands	r3, r2
 80026c8:	b259      	sxtb	r1, r3
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	4603      	mov	r3, r0
 80026ce:	01db      	lsls	r3, r3, #7
 80026d0:	4413      	add	r3, r2
 80026d2:	b2c9      	uxtb	r1, r1
 80026d4:	4a05      	ldr	r2, [pc, #20]	; (80026ec <SSD1306_DrawPixel+0xbc>)
 80026d6:	54d1      	strb	r1, [r2, r3]
 80026d8:	e000      	b.n	80026dc <SSD1306_DrawPixel+0xac>
		return;
 80026da:	bf00      	nop
	}
}
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	2000075c 	.word	0x2000075c
 80026ec:	2000035c 	.word	0x2000035c

080026f0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	460a      	mov	r2, r1
 80026fa:	80fb      	strh	r3, [r7, #6]
 80026fc:	4613      	mov	r3, r2
 80026fe:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <SSD1306_GotoXY+0x28>)
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002706:	4a04      	ldr	r2, [pc, #16]	; (8002718 <SSD1306_GotoXY+0x28>)
 8002708:	88bb      	ldrh	r3, [r7, #4]
 800270a:	8053      	strh	r3, [r2, #2]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	2000075c 	.word	0x2000075c

0800271c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
 8002728:	4613      	mov	r3, r2
 800272a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800272c:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <SSD1306_Putc+0xfc>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
	if (
 8002738:	2b7f      	cmp	r3, #127	; 0x7f
 800273a:	dc07      	bgt.n	800274c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <SSD1306_Putc+0xfc>)
 800273e:	885b      	ldrh	r3, [r3, #2]
 8002740:	461a      	mov	r2, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002748:	2b3f      	cmp	r3, #63	; 0x3f
 800274a:	dd01      	ble.n	8002750 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800274c:	2300      	movs	r3, #0
 800274e:	e05e      	b.n	800280e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e04b      	b.n	80027ee <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	3b20      	subs	r3, #32
 800275e:	6839      	ldr	r1, [r7, #0]
 8002760:	7849      	ldrb	r1, [r1, #1]
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4619      	mov	r1, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	440b      	add	r3, r1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e030      	b.n	80027dc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d010      	beq.n	80027ac <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <SSD1306_Putc+0xfc>)
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4413      	add	r3, r2
 8002794:	b298      	uxth	r0, r3
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <SSD1306_Putc+0xfc>)
 8002798:	885a      	ldrh	r2, [r3, #2]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	b29b      	uxth	r3, r3
 800279e:	4413      	add	r3, r2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	79ba      	ldrb	r2, [r7, #6]
 80027a4:	4619      	mov	r1, r3
 80027a6:	f7ff ff43 	bl	8002630 <SSD1306_DrawPixel>
 80027aa:	e014      	b.n	80027d6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80027ac:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <SSD1306_Putc+0xfc>)
 80027ae:	881a      	ldrh	r2, [r3, #0]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	b298      	uxth	r0, r3
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <SSD1306_Putc+0xfc>)
 80027ba:	885a      	ldrh	r2, [r3, #2]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	b299      	uxth	r1, r3
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf0c      	ite	eq
 80027ca:	2301      	moveq	r3, #1
 80027cc:	2300      	movne	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	f7ff ff2d 	bl	8002630 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	3301      	adds	r3, #1
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d3c8      	bcc.n	800277a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	461a      	mov	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d3ad      	bcc.n	8002756 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <SSD1306_Putc+0xfc>)
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	4413      	add	r3, r2
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <SSD1306_Putc+0xfc>)
 800280a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800280c:	79fb      	ldrb	r3, [r7, #7]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2000075c 	.word	0x2000075c

0800281c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800282a:	e012      	b.n	8002852 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	79fa      	ldrb	r2, [r7, #7]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff71 	bl	800271c <SSD1306_Putc>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d002      	beq.n	800284c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	e008      	b.n	800285e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3301      	adds	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e8      	bne.n	800282c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	781b      	ldrb	r3, [r3, #0]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <ssd1306_I2C_Init+0x28>)
 8002870:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002872:	e002      	b.n	800287a <ssd1306_I2C_Init+0x12>
		p--;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	607b      	str	r3, [r7, #4]
	while(p>0)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f9      	bne.n	8002874 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	0003d090 	.word	0x0003d090

08002894 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af02      	add	r7, sp, #8
 800289a:	603a      	str	r2, [r7, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
 80028a2:	460b      	mov	r3, r1
 80028a4:	71bb      	strb	r3, [r7, #6]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80bb      	strh	r3, [r7, #4]
 80028aa:	466b      	mov	r3, sp
 80028ac:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80028ae:	88bb      	ldrh	r3, [r7, #4]
 80028b0:	1c5c      	adds	r4, r3, #1
 80028b2:	1e63      	subs	r3, r4, #1
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4623      	mov	r3, r4
 80028b8:	4618      	mov	r0, r3
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	00cb      	lsls	r3, r1, #3
 80028c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80028cc:	00c2      	lsls	r2, r0, #3
 80028ce:	4623      	mov	r3, r4
 80028d0:	4618      	mov	r0, r3
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	00cb      	lsls	r3, r1, #3
 80028e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80028e4:	00c2      	lsls	r2, r0, #3
 80028e6:	4623      	mov	r3, r4
 80028e8:	3307      	adds	r3, #7
 80028ea:	08db      	lsrs	r3, r3, #3
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	ebad 0d03 	sub.w	sp, sp, r3
 80028f2:	ab02      	add	r3, sp, #8
 80028f4:	3300      	adds	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	79ba      	ldrb	r2, [r7, #6]
 80028fc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
 8002902:	e00a      	b.n	800291a <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	3b01      	subs	r3, #1
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	441a      	add	r2, r3
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	7811      	ldrb	r1, [r2, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	3301      	adds	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	b29b      	uxth	r3, r3
 800291e:	88ba      	ldrh	r2, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d2ef      	bcs.n	8002904 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count, 10);
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	b299      	uxth	r1, r3
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	88bb      	ldrh	r3, [r7, #4]
 800292c:	200a      	movs	r0, #10
 800292e:	9000      	str	r0, [sp, #0]
 8002930:	4803      	ldr	r0, [pc, #12]	; (8002940 <ssd1306_I2C_WriteMulti+0xac>)
 8002932:	f001 ff5d 	bl	80047f0 <HAL_I2C_Master_Transmit>
 8002936:	46ad      	mov	sp, r5
}
 8002938:	bf00      	nop
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bdb0      	pop	{r4, r5, r7, pc}
 8002940:	20000c98 	.word	0x20000c98

08002944 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af02      	add	r7, sp, #8
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	460b      	mov	r3, r1
 8002950:	71bb      	strb	r3, [r7, #6]
 8002952:	4613      	mov	r3, r2
 8002954:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002956:	79bb      	ldrb	r3, [r7, #6]
 8002958:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800295a:	797b      	ldrb	r3, [r7, #5]
 800295c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	b299      	uxth	r1, r3
 8002962:	f107 020c 	add.w	r2, r7, #12
 8002966:	230a      	movs	r3, #10
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2302      	movs	r3, #2
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <ssd1306_I2C_Write+0x38>)
 800296e:	f001 ff3f 	bl	80047f0 <HAL_I2C_Master_Transmit>
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000c98 	.word	0x20000c98

08002980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_MspInit+0x4c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <HAL_MspInit+0x4c>)
 8002990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_MspInit+0x4c>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_MspInit+0x4c>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_MspInit+0x4c>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_MspInit+0x4c>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2e      	ldr	r2, [pc, #184]	; (8002aa8 <HAL_ADC_MspInit+0xd8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d128      	bne.n	8002a44 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a25      	ldr	r2, [pc, #148]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a36:	f107 031c 	add.w	r3, r7, #28
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	481c      	ldr	r0, [pc, #112]	; (8002ab0 <HAL_ADC_MspInit+0xe0>)
 8002a3e:	f001 fbb5 	bl	80041ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a42:	e02c      	b.n	8002a9e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <HAL_ADC_MspInit+0xe4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d127      	bne.n	8002a9e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a86:	2301      	movs	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	4619      	mov	r1, r3
 8002a98:	4807      	ldr	r0, [pc, #28]	; (8002ab8 <HAL_ADC_MspInit+0xe8>)
 8002a9a:	f001 fb87 	bl	80041ac <HAL_GPIO_Init>
}
 8002a9e:	bf00      	nop
 8002aa0:	3730      	adds	r7, #48	; 0x30
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40012000 	.word	0x40012000
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40012200 	.word	0x40012200
 8002ab8:	40020800 	.word	0x40020800

08002abc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_DAC_MspInit+0x7c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d127      	bne.n	8002b2e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_DAC_MspInit+0x80>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <HAL_DAC_MspInit+0x80>)
 8002ae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <HAL_DAC_MspInit+0x80>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_DAC_MspInit+0x80>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <HAL_DAC_MspInit+0x80>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <HAL_DAC_MspInit+0x80>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b16:	2310      	movs	r3, #16
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	4619      	mov	r1, r3
 8002b28:	4805      	ldr	r0, [pc, #20]	; (8002b40 <HAL_DAC_MspInit+0x84>)
 8002b2a:	f001 fb3f 	bl	80041ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002b2e:	bf00      	nop
 8002b30:	3728      	adds	r7, #40	; 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40007400 	.word	0x40007400
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40020000 	.word	0x40020000

08002b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a19      	ldr	r2, [pc, #100]	; (8002bc8 <HAL_I2C_MspInit+0x84>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d12b      	bne.n	8002bbe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_I2C_MspInit+0x88>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_I2C_MspInit+0x88>)
 8002b70:	f043 0320 	orr.w	r3, r3, #32
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_I2C_MspInit+0x88>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b82:	2303      	movs	r3, #3
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b86:	2312      	movs	r3, #18
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b92:	2304      	movs	r3, #4
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <HAL_I2C_MspInit+0x8c>)
 8002b9e:	f001 fb05 	bl	80041ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_I2C_MspInit+0x88>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <HAL_I2C_MspInit+0x88>)
 8002bac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_I2C_MspInit+0x88>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40005800 	.word	0x40005800
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40021400 	.word	0x40021400

08002bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08c      	sub	sp, #48	; 0x30
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 031c 	add.w	r3, r7, #28
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a42      	ldr	r2, [pc, #264]	; (8002cfc <HAL_UART_MspInit+0x128>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d14b      	bne.n	8002c8e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a39      	ldr	r2, [pc, #228]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c5c:	2308      	movs	r3, #8
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	4619      	mov	r1, r3
 8002c66:	4827      	ldr	r0, [pc, #156]	; (8002d04 <HAL_UART_MspInit+0x130>)
 8002c68:	f001 faa0 	bl	80041ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c74:	2301      	movs	r3, #1
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	4619      	mov	r1, r3
 8002c86:	4820      	ldr	r0, [pc, #128]	; (8002d08 <HAL_UART_MspInit+0x134>)
 8002c88:	f001 fa90 	bl	80041ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c8c:	e031      	b.n	8002cf2 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_UART_MspInit+0x138>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d12c      	bne.n	8002cf2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002cbe:	f043 0308 	orr.w	r3, r3, #8
 8002cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_UART_MspInit+0x12c>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002cd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ce6:	f107 031c 	add.w	r3, r7, #28
 8002cea:	4619      	mov	r1, r3
 8002cec:	4806      	ldr	r0, [pc, #24]	; (8002d08 <HAL_UART_MspInit+0x134>)
 8002cee:	f001 fa5d 	bl	80041ac <HAL_GPIO_Init>
}
 8002cf2:	bf00      	nop
 8002cf4:	3730      	adds	r7, #48	; 0x30
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40005000 	.word	0x40005000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020800 	.word	0x40020800
 8002d08:	40020c00 	.word	0x40020c00
 8002d0c:	40004800 	.word	0x40004800

08002d10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d30:	d13f      	bne.n	8002db2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <HAL_PCD_MspInit+0xac>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a20      	ldr	r2, [pc, #128]	; (8002dbc <HAL_PCD_MspInit+0xac>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_PCD_MspInit+0xac>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d60:	230a      	movs	r3, #10
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4815      	ldr	r0, [pc, #84]	; (8002dc0 <HAL_PCD_MspInit+0xb0>)
 8002d6c:	f001 fa1e 	bl	80041ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	f107 0314 	add.w	r3, r7, #20
 8002d82:	4619      	mov	r1, r3
 8002d84:	480e      	ldr	r0, [pc, #56]	; (8002dc0 <HAL_PCD_MspInit+0xb0>)
 8002d86:	f001 fa11 	bl	80041ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_PCD_MspInit+0xac>)
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <HAL_PCD_MspInit+0xac>)
 8002d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d94:	6353      	str	r3, [r2, #52]	; 0x34
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_PCD_MspInit+0xac>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <HAL_PCD_MspInit+0xac>)
 8002da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da4:	6453      	str	r3, [r2, #68]	; 0x44
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_PCD_MspInit+0xac>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002db2:	bf00      	nop
 8002db4:	3728      	adds	r7, #40	; 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40020000 	.word	0x40020000

08002dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd6:	e7fe      	b.n	8002dd6 <HardFault_Handler+0x4>

08002dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ddc:	e7fe      	b.n	8002ddc <MemManage_Handler+0x4>

08002dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <BusFault_Handler+0x4>

08002de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <UsageFault_Handler+0x4>

08002dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e18:	f000 fbda 	bl	80035d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
	return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_kill>:

int _kill(int pid, int sig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e3a:	f003 fdb3 	bl	80069a4 <__errno>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2216      	movs	r2, #22
 8002e42:	601a      	str	r2, [r3, #0]
	return -1;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_exit>:

void _exit (int status)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ffe7 	bl	8002e30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e62:	e7fe      	b.n	8002e62 <_exit+0x12>

08002e64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e00a      	b.n	8002e8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e76:	f3af 8000 	nop.w
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	60ba      	str	r2, [r7, #8]
 8002e82:	b2ca      	uxtb	r2, r1
 8002e84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	dbf0      	blt.n	8002e76 <_read+0x12>
	}

return len;
 8002e94:	687b      	ldr	r3, [r7, #4]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e009      	b.n	8002ec4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	60ba      	str	r2, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	dbf1      	blt.n	8002eb0 <_write+0x12>
	}
	return len;
 8002ecc:	687b      	ldr	r3, [r7, #4]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <_close>:

int _close(int file)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
	return -1;
 8002ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002efe:	605a      	str	r2, [r3, #4]
	return 0;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <_isatty>:

int _isatty(int file)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
	return 1;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <_sbrk+0x50>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <_sbrk+0x16>
		heap_end = &end;
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <_sbrk+0x50>)
 8002f52:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <_sbrk+0x54>)
 8002f54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <_sbrk+0x50>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <_sbrk+0x50>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	466a      	mov	r2, sp
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d907      	bls.n	8002f7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002f6a:	f003 fd1b 	bl	80069a4 <__errno>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	220c      	movs	r2, #12
 8002f72:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295
 8002f78:	e006      	b.n	8002f88 <_sbrk+0x48>
	}

	heap_end += incr;
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <_sbrk+0x50>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <_sbrk+0x50>)
 8002f84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000764 	.word	0x20000764
 8002f94:	20000d88 	.word	0x20000d88

08002f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <SystemInit+0x28>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <SystemInit+0x28>)
 8002fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <SystemInit+0x28>)
 8002fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fb2:	609a      	str	r2, [r3, #8]
#endif
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000ed00 	.word	0xe000ed00
 8002fc4:	00000000 	.word	0x00000000

08002fc8 <watter>:
float temp2 , vtemp2 , adcval2 ;


void watter(void)

{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4895      	ldr	r0, [pc, #596]	; (8003228 <watter+0x260>)
 8002fd2:	f001 f812 	bl	8003ffa <HAL_DAC_Start>
    HAL_ADC_Start(&hadc1);
 8002fd6:	4895      	ldr	r0, [pc, #596]	; (800322c <watter+0x264>)
 8002fd8:	f000 fb82 	bl	80036e0 <HAL_ADC_Start>
    adcval2 = HAL_ADC_GetValue(&hadc1);
 8002fdc:	4893      	ldr	r0, [pc, #588]	; (800322c <watter+0x264>)
 8002fde:	f000 fcc9 	bl	8003974 <HAL_ADC_GetValue>
 8002fe2:	ee07 0a90 	vmov	s15, r0
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	4b91      	ldr	r3, [pc, #580]	; (8003230 <watter+0x268>)
 8002fec:	edc3 7a00 	vstr	s15, [r3]
    vtemp2 = adcval2*0.806;
 8002ff0:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <watter+0x268>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fab7 	bl	8000568 <__aeabi_f2d>
 8002ffa:	a37d      	add	r3, pc, #500	; (adr r3, 80031f0 <watter+0x228>)
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd fb0a 	bl	8000618 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd fdfc 	bl	8000c08 <__aeabi_d2f>
 8003010:	4603      	mov	r3, r0
 8003012:	4a88      	ldr	r2, [pc, #544]	; (8003234 <watter+0x26c>)
 8003014:	6013      	str	r3, [r2, #0]
    temp2 = ((13.582 - sqrt((13.582*13.582)+(4*0.00433)*(2230.8-vtemp2)))/(2*-0.00433))+30;
 8003016:	4b87      	ldr	r3, [pc, #540]	; (8003234 <watter+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd faa4 	bl	8000568 <__aeabi_f2d>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	a174      	add	r1, pc, #464	; (adr r1, 80031f8 <watter+0x230>)
 8003026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800302a:	f7fd f93d 	bl	80002a8 <__aeabi_dsub>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	a372      	add	r3, pc, #456	; (adr r3, 8003200 <watter+0x238>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd faec 	bl	8000618 <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	a36f      	add	r3, pc, #444	; (adr r3, 8003208 <watter+0x240>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd f92d 	bl	80002ac <__adddf3>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	ec43 2b17 	vmov	d7, r2, r3
 800305a:	eeb0 0a47 	vmov.f32	s0, s14
 800305e:	eef0 0a67 	vmov.f32	s1, s15
 8003062:	f008 f8f5 	bl	800b250 <sqrt>
 8003066:	ec53 2b10 	vmov	r2, r3, d0
 800306a:	a169      	add	r1, pc, #420	; (adr r1, 8003210 <watter+0x248>)
 800306c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003070:	f7fd f91a 	bl	80002a8 <__aeabi_dsub>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	a366      	add	r3, pc, #408	; (adr r3, 8003218 <watter+0x250>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	f7fd fbf3 	bl	800086c <__aeabi_ddiv>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b69      	ldr	r3, [pc, #420]	; (8003238 <watter+0x270>)
 8003094:	f7fd f90a 	bl	80002ac <__adddf3>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fdb2 	bl	8000c08 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4a65      	ldr	r2, [pc, #404]	; (800323c <watter+0x274>)
 80030a8:	6013      	str	r3, [r2, #0]
    data22 = temp2;
 80030aa:	4b64      	ldr	r3, [pc, #400]	; (800323c <watter+0x274>)
 80030ac:	edd3 7a00 	vldr	s15, [r3]
 80030b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b4:	ee17 2a90 	vmov	r2, s15
 80030b8:	4b61      	ldr	r3, [pc, #388]	; (8003240 <watter+0x278>)
 80030ba:	601a      	str	r2, [r3, #0]
    HAL_Delay(10);
 80030bc:	200a      	movs	r0, #10
 80030be:	f000 faa7 	bl	8003610 <HAL_Delay>



    HAL_ADC_Start(&hadc3);
 80030c2:	4860      	ldr	r0, [pc, #384]	; (8003244 <watter+0x27c>)
 80030c4:	f000 fb0c 	bl	80036e0 <HAL_ADC_Start>
    if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	485d      	ldr	r0, [pc, #372]	; (8003244 <watter+0x27c>)
 80030ce:	f000 fbcd 	bl	800386c <HAL_ADC_PollForConversion>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d125      	bne.n	8003124 <watter+0x15c>
    {
    raw2voltage = HAL_ADC_GetValue(&hadc3);
 80030d8:	485a      	ldr	r0, [pc, #360]	; (8003244 <watter+0x27c>)
 80030da:	f000 fc4b 	bl	8003974 <HAL_ADC_GetValue>
 80030de:	ee07 0a90 	vmov	s15, r0
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	4b58      	ldr	r3, [pc, #352]	; (8003248 <watter+0x280>)
 80030e8:	edc3 7a00 	vstr	s15, [r3]
    real2voltage = (raw2voltage*12.4100)/1000;
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <watter+0x280>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fa39 	bl	8000568 <__aeabi_f2d>
 80030f6:	a34a      	add	r3, pc, #296	; (adr r3, 8003220 <watter+0x258>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd fa8c 	bl	8000618 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	4b4f      	ldr	r3, [pc, #316]	; (800324c <watter+0x284>)
 800310e:	f7fd fbad 	bl	800086c <__aeabi_ddiv>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7fd fd75 	bl	8000c08 <__aeabi_d2f>
 800311e:	4603      	mov	r3, r0
 8003120:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <watter+0x288>)
 8003122:	6013      	str	r3, [r2, #0]
    }

    if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))
 8003124:	2101      	movs	r1, #1
 8003126:	484b      	ldr	r0, [pc, #300]	; (8003254 <watter+0x28c>)
 8003128:	f001 f9ec 	bl	8004504 <HAL_GPIO_ReadPin>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d037      	beq.n	80031a2 <watter+0x1da>

    {
		  uint32_t time3=HAL_GetTick();
 8003132:	f000 fa61 	bl	80035f8 <HAL_GetTick>
 8003136:	6078      	str	r0, [r7, #4]
		  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 8003138:	e02c      	b.n	8003194 <watter+0x1cc>
			  if (HAL_GetTick()-time3 > 300){
 800313a:	f000 fa5d 	bl	80035f8 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003148:	d910      	bls.n	800316c <watter+0x1a4>
				  time3=HAL_GetTick();
 800314a:	f000 fa55 	bl	80035f8 <HAL_GetTick>
 800314e:	6078      	str	r0, [r7, #4]
				  setwatt+=100;
 8003150:	4b41      	ldr	r3, [pc, #260]	; (8003258 <watter+0x290>)
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800325c <watter+0x294>
 800315a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800315e:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <watter+0x290>)
 8003160:	edc3 7a00 	vstr	s15, [r3]
				  HAL_Delay(5);
 8003164:	2005      	movs	r0, #5
 8003166:	f000 fa53 	bl	8003610 <HAL_Delay>
				  break;
 800316a:	e01a      	b.n	80031a2 <watter+0x1da>
	   }
	  if (HAL_GetTick()-time3 > 20) {
 800316c:	f000 fa44 	bl	80035f8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b14      	cmp	r3, #20
 8003178:	d90c      	bls.n	8003194 <watter+0x1cc>
	   setwatt += 50;
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <watter+0x290>)
 800317c:	edd3 7a00 	vldr	s15, [r3]
 8003180:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003260 <watter+0x298>
 8003184:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003188:	4b33      	ldr	r3, [pc, #204]	; (8003258 <watter+0x290>)
 800318a:	edc3 7a00 	vstr	s15, [r3]

	   HAL_Delay(100);
 800318e:	2064      	movs	r0, #100	; 0x64
 8003190:	f000 fa3e 	bl	8003610 <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 8003194:	2101      	movs	r1, #1
 8003196:	482f      	ldr	r0, [pc, #188]	; (8003254 <watter+0x28c>)
 8003198:	f001 f9b4 	bl	8004504 <HAL_GPIO_ReadPin>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1cb      	bne.n	800313a <watter+0x172>
	   }
	   }
	   }


    if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 80031a2:	2102      	movs	r1, #2
 80031a4:	482f      	ldr	r0, [pc, #188]	; (8003264 <watter+0x29c>)
 80031a6:	f001 f9ad 	bl	8004504 <HAL_GPIO_ReadPin>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d076      	beq.n	800329e <watter+0x2d6>
		  uint32_t time7=HAL_GetTick();
 80031b0:	f000 fa22 	bl	80035f8 <HAL_GetTick>
 80031b4:	6038      	str	r0, [r7, #0]
		  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 80031b6:	e06b      	b.n	8003290 <watter+0x2c8>
			  if (HAL_GetTick()-time7 > 300){
 80031b8:	f000 fa1e 	bl	80035f8 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80031c6:	d94f      	bls.n	8003268 <watter+0x2a0>
				  time7=HAL_GetTick();
 80031c8:	f000 fa16 	bl	80035f8 <HAL_GetTick>
 80031cc:	6038      	str	r0, [r7, #0]
				  setwatt-=100;
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <watter+0x290>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800325c <watter+0x294>
 80031d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031dc:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <watter+0x290>)
 80031de:	edc3 7a00 	vstr	s15, [r3]
				  HAL_Delay(5);
 80031e2:	2005      	movs	r0, #5
 80031e4:	f000 fa14 	bl	8003610 <HAL_Delay>
				  break;
 80031e8:	e059      	b.n	800329e <watter+0x2d6>
 80031ea:	bf00      	nop
 80031ec:	f3af 8000 	nop.w
 80031f0:	83126e98 	.word	0x83126e98
 80031f4:	3fe9cac0 	.word	0x3fe9cac0
 80031f8:	9999999a 	.word	0x9999999a
 80031fc:	40a16d99 	.word	0x40a16d99
 8003200:	8644523f 	.word	0x8644523f
 8003204:	3f91bc55 	.word	0x3f91bc55
 8003208:	2bc72e28 	.word	0x2bc72e28
 800320c:	40670f10 	.word	0x40670f10
 8003210:	e76c8b44 	.word	0xe76c8b44
 8003214:	402b29fb 	.word	0x402b29fb
 8003218:	8644523f 	.word	0x8644523f
 800321c:	bf81bc55 	.word	0xbf81bc55
 8003220:	851eb852 	.word	0x851eb852
 8003224:	4028d1eb 	.word	0x4028d1eb
 8003228:	20000824 	.word	0x20000824
 800322c:	20000794 	.word	0x20000794
 8003230:	20000d50 	.word	0x20000d50
 8003234:	20000d64 	.word	0x20000d64
 8003238:	403e0000 	.word	0x403e0000
 800323c:	20000d54 	.word	0x20000d54
 8003240:	20000d60 	.word	0x20000d60
 8003244:	200007dc 	.word	0x200007dc
 8003248:	20000768 	.word	0x20000768
 800324c:	408f4000 	.word	0x408f4000
 8003250:	2000076c 	.word	0x2000076c
 8003254:	40020400 	.word	0x40020400
 8003258:	20000d6c 	.word	0x20000d6c
 800325c:	42c80000 	.word	0x42c80000
 8003260:	42480000 	.word	0x42480000
 8003264:	40020800 	.word	0x40020800
	   }
	   if (HAL_GetTick()-time7 > 20) {
 8003268:	f000 f9c6 	bl	80035f8 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b14      	cmp	r3, #20
 8003274:	d90c      	bls.n	8003290 <watter+0x2c8>
	   setwatt -= 50;
 8003276:	4b67      	ldr	r3, [pc, #412]	; (8003414 <watter+0x44c>)
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003418 <watter+0x450>
 8003280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003284:	4b63      	ldr	r3, [pc, #396]	; (8003414 <watter+0x44c>)
 8003286:	edc3 7a00 	vstr	s15, [r3]

	   HAL_Delay(100);
 800328a:	2064      	movs	r0, #100	; 0x64
 800328c:	f000 f9c0 	bl	8003610 <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 8003290:	2102      	movs	r1, #2
 8003292:	4862      	ldr	r0, [pc, #392]	; (800341c <watter+0x454>)
 8003294:	f001 f936 	bl	8004504 <HAL_GPIO_ReadPin>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d18c      	bne.n	80031b8 <watter+0x1f0>
	   }
	   }



	  if(real2voltage < 1) (z2 = 0);
 800329e:	4b60      	ldr	r3, [pc, #384]	; (8003420 <watter+0x458>)
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b0:	d503      	bpl.n	80032ba <watter+0x2f2>
 80032b2:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <watter+0x45c>)
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]


    z2 =  setwatt / real2voltage;
 80032ba:	4b56      	ldr	r3, [pc, #344]	; (8003414 <watter+0x44c>)
 80032bc:	edd3 6a00 	vldr	s13, [r3]
 80032c0:	4b57      	ldr	r3, [pc, #348]	; (8003420 <watter+0x458>)
 80032c2:	ed93 7a00 	vldr	s14, [r3]
 80032c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ca:	4b56      	ldr	r3, [pc, #344]	; (8003424 <watter+0x45c>)
 80032cc:	edc3 7a00 	vstr	s15, [r3]

    y2 = z2*20;
 80032d0:	4b54      	ldr	r3, [pc, #336]	; (8003424 <watter+0x45c>)
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80032da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032de:	4b52      	ldr	r3, [pc, #328]	; (8003428 <watter+0x460>)
 80032e0:	edc3 7a00 	vstr	s15, [r3]
    x2 = y2 /((3.3/4096)*1000);
 80032e4:	4b50      	ldr	r3, [pc, #320]	; (8003428 <watter+0x460>)
 80032e6:	ed93 7a00 	vldr	s14, [r3]
 80032ea:	eddf 6a50 	vldr	s13, [pc, #320]	; 800342c <watter+0x464>
 80032ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032f2:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <watter+0x468>)
 80032f4:	edc3 7a00 	vstr	s15, [r3]
    data12 = z2 - 1;
 80032f8:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <watter+0x45c>)
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800330a:	ee17 2a90 	vmov	r2, s15
 800330e:	4b49      	ldr	r3, [pc, #292]	; (8003434 <watter+0x46c>)
 8003310:	601a      	str	r2, [r3, #0]
    if(data12>100) (data12 = 100);
 8003312:	4b48      	ldr	r3, [pc, #288]	; (8003434 <watter+0x46c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d902      	bls.n	8003320 <watter+0x358>
 800331a:	4b46      	ldr	r3, [pc, #280]	; (8003434 <watter+0x46c>)
 800331c:	2264      	movs	r2, #100	; 0x64
 800331e:	601a      	str	r2, [r3, #0]
    data32 = setwatt;
 8003320:	4b3c      	ldr	r3, [pc, #240]	; (8003414 <watter+0x44c>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800332a:	ee17 2a90 	vmov	r2, s15
 800332e:	4b42      	ldr	r3, [pc, #264]	; (8003438 <watter+0x470>)
 8003330:	601a      	str	r2, [r3, #0]
    if (setwatt<0)(setwatt=0);
 8003332:	4b38      	ldr	r3, [pc, #224]	; (8003414 <watter+0x44c>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003340:	d503      	bpl.n	800334a <watter+0x382>
 8003342:	4b34      	ldr	r3, [pc, #208]	; (8003414 <watter+0x44c>)
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	601a      	str	r2, [r3, #0]

    SSD1306_GotoXY (1, 1);
 800334a:	2101      	movs	r1, #1
 800334c:	2001      	movs	r0, #1
 800334e:	f7ff f9cf 	bl	80026f0 <SSD1306_GotoXY>
   		  sprintf(yazi42,"Watt|Curr %d            ",data12);
 8003352:	4b38      	ldr	r3, [pc, #224]	; (8003434 <watter+0x46c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	4938      	ldr	r1, [pc, #224]	; (800343c <watter+0x474>)
 800335a:	4839      	ldr	r0, [pc, #228]	; (8003440 <watter+0x478>)
 800335c:	f004 f9d4 	bl	8007708 <siprintf>
   		  SSD1306_Puts(yazi42,&Font_7x10,1);
 8003360:	2201      	movs	r2, #1
 8003362:	4938      	ldr	r1, [pc, #224]	; (8003444 <watter+0x47c>)
 8003364:	4836      	ldr	r0, [pc, #216]	; (8003440 <watter+0x478>)
 8003366:	f7ff fa59 	bl	800281c <SSD1306_Puts>
   		  SSD1306_GotoXY(105,1);
 800336a:	2101      	movs	r1, #1
 800336c:	2069      	movs	r0, #105	; 0x69
 800336e:	f7ff f9bf 	bl	80026f0 <SSD1306_GotoXY>
   		  SSD1306_Puts("mA",&Font_7x10,1);
 8003372:	2201      	movs	r2, #1
 8003374:	4933      	ldr	r1, [pc, #204]	; (8003444 <watter+0x47c>)
 8003376:	4834      	ldr	r0, [pc, #208]	; (8003448 <watter+0x480>)
 8003378:	f7ff fa50 	bl	800281c <SSD1306_Puts>
   		  sprintf(yazi32,"Temperature %d C    ",data22);
 800337c:	4b33      	ldr	r3, [pc, #204]	; (800344c <watter+0x484>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	4933      	ldr	r1, [pc, #204]	; (8003450 <watter+0x488>)
 8003384:	4833      	ldr	r0, [pc, #204]	; (8003454 <watter+0x48c>)
 8003386:	f004 f9bf 	bl	8007708 <siprintf>
   		  SSD1306_GotoXY (1, 19);
 800338a:	2113      	movs	r1, #19
 800338c:	2001      	movs	r0, #1
 800338e:	f7ff f9af 	bl	80026f0 <SSD1306_GotoXY>
   		  SSD1306_Puts(yazi32,&Font_7x10,1);
 8003392:	2201      	movs	r2, #1
 8003394:	492b      	ldr	r1, [pc, #172]	; (8003444 <watter+0x47c>)
 8003396:	482f      	ldr	r0, [pc, #188]	; (8003454 <watter+0x48c>)
 8003398:	f7ff fa40 	bl	800281c <SSD1306_Puts>
   		  sprintf(yazi12," %d       ",data32);
 800339c:	4b26      	ldr	r3, [pc, #152]	; (8003438 <watter+0x470>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	492d      	ldr	r1, [pc, #180]	; (8003458 <watter+0x490>)
 80033a4:	482d      	ldr	r0, [pc, #180]	; (800345c <watter+0x494>)
 80033a6:	f004 f9af 	bl	8007708 <siprintf>
   		  SSD1306_GotoXY (1, 37);
 80033aa:	2125      	movs	r1, #37	; 0x25
 80033ac:	2001      	movs	r0, #1
 80033ae:	f7ff f99f 	bl	80026f0 <SSD1306_GotoXY>
   		  SSD1306_Puts(yazi12,&Font_16x26,1);
 80033b2:	2201      	movs	r2, #1
 80033b4:	492a      	ldr	r1, [pc, #168]	; (8003460 <watter+0x498>)
 80033b6:	4829      	ldr	r0, [pc, #164]	; (800345c <watter+0x494>)
 80033b8:	f7ff fa30 	bl	800281c <SSD1306_Puts>
   		  SSD1306_GotoXY (87,37);
 80033bc:	2125      	movs	r1, #37	; 0x25
 80033be:	2057      	movs	r0, #87	; 0x57
 80033c0:	f7ff f996 	bl	80026f0 <SSD1306_GotoXY>
   		  SSD1306_Puts("mW   ", &Font_16x26,1);
 80033c4:	2201      	movs	r2, #1
 80033c6:	4926      	ldr	r1, [pc, #152]	; (8003460 <watter+0x498>)
 80033c8:	4826      	ldr	r0, [pc, #152]	; (8003464 <watter+0x49c>)
 80033ca:	f7ff fa27 	bl	800281c <SSD1306_Puts>
   		  SSD1306_UpdateScreen();
 80033ce:	f7ff f8e9 	bl	80025a4 <SSD1306_UpdateScreen>
   		  HAL_Delay(20);
 80033d2:	2014      	movs	r0, #20
 80033d4:	f000 f91c 	bl	8003610 <HAL_Delay>

   		  if(real2voltage < 1) (data12 = 0);
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <watter+0x458>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	d502      	bpl.n	80033f2 <watter+0x42a>
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <watter+0x46c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, x2);
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <watter+0x468>)
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033fc:	ee17 3a90 	vmov	r3, s15
 8003400:	2200      	movs	r2, #0
 8003402:	2100      	movs	r1, #0
 8003404:	4818      	ldr	r0, [pc, #96]	; (8003468 <watter+0x4a0>)
 8003406:	f000 feab 	bl	8004160 <HAL_DAC_SetValue>





}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000d6c 	.word	0x20000d6c
 8003418:	42480000 	.word	0x42480000
 800341c:	40020800 	.word	0x40020800
 8003420:	2000076c 	.word	0x2000076c
 8003424:	20000774 	.word	0x20000774
 8003428:	20000d5c 	.word	0x20000d5c
 800342c:	3f4e4000 	.word	0x3f4e4000
 8003430:	20000770 	.word	0x20000770
 8003434:	20000d68 	.word	0x20000d68
 8003438:	20000d58 	.word	0x20000d58
 800343c:	0800b590 	.word	0x0800b590
 8003440:	20000128 	.word	0x20000128
 8003444:	20000060 	.word	0x20000060
 8003448:	0800b5ac 	.word	0x0800b5ac
 800344c:	20000d60 	.word	0x20000d60
 8003450:	0800b5b0 	.word	0x0800b5b0
 8003454:	20000108 	.word	0x20000108
 8003458:	0800b5c8 	.word	0x0800b5c8
 800345c:	200000e8 	.word	0x200000e8
 8003460:	20000070 	.word	0x20000070
 8003464:	0800b5d4 	.word	0x0800b5d4
 8003468:	20000824 	.word	0x20000824

0800346c <welcome_lcd>:
 */
#include <ssd1306.h>
#include <i2c-lcd.h>

void welcome_lcd(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  lcd_init ();
 8003470:	f7fe f846 	bl	8001500 <lcd_init>
  SSD1306_Init ();
 8003474:	f7fe ffd8 	bl	8002428 <SSD1306_Init>
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003478:	2000      	movs	r0, #0
 800347a:	f7ff f8c1 	bl	8002600 <SSD1306_Fill>
  SSD1306_UpdateScreen();
 800347e:	f7ff f891 	bl	80025a4 <SSD1306_UpdateScreen>
  SSD1306_GotoXY (10, 18);
 8003482:	2112      	movs	r1, #18
 8003484:	200a      	movs	r0, #10
 8003486:	f7ff f933 	bl	80026f0 <SSD1306_GotoXY>
  SSD1306_Puts ("WELCOME", &Font_11x18, 1);
 800348a:	2201      	movs	r2, #1
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <welcome_lcd+0x5c>)
 800348e:	480f      	ldr	r0, [pc, #60]	; (80034cc <welcome_lcd+0x60>)
 8003490:	f7ff f9c4 	bl	800281c <SSD1306_Puts>
  SSD1306_GotoXY(2,45);
 8003494:	212d      	movs	r1, #45	; 0x2d
 8003496:	2002      	movs	r0, #2
 8003498:	f7ff f92a 	bl	80026f0 <SSD1306_GotoXY>
  SSD1306_Puts("   ANTSIS ELC.",&Font_7x10,1);
 800349c:	2201      	movs	r2, #1
 800349e:	490c      	ldr	r1, [pc, #48]	; (80034d0 <welcome_lcd+0x64>)
 80034a0:	480c      	ldr	r0, [pc, #48]	; (80034d4 <welcome_lcd+0x68>)
 80034a2:	f7ff f9bb 	bl	800281c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80034a6:	f7ff f87d 	bl	80025a4 <SSD1306_UpdateScreen>
  HAL_Delay(500);
 80034aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034ae:	f000 f8af 	bl	8003610 <HAL_Delay>
  SSD1306_Fill (0);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f7ff f8a4 	bl	8002600 <SSD1306_Fill>
  SSD1306_UpdateScreen(); //display
 80034b8:	f7ff f874 	bl	80025a4 <SSD1306_UpdateScreen>
  SSD1306_GotoXY (0, 0);
 80034bc:	2100      	movs	r1, #0
 80034be:	2000      	movs	r0, #0
 80034c0:	f7ff f916 	bl	80026f0 <SSD1306_GotoXY>
}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000068 	.word	0x20000068
 80034cc:	0800b5dc 	.word	0x0800b5dc
 80034d0:	20000060 	.word	0x20000060
 80034d4:	0800b5e4 	.word	0x0800b5e4

080034d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80034d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003510 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034de:	e003      	b.n	80034e8 <LoopCopyDataInit>

080034e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034e6:	3104      	adds	r1, #4

080034e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034e8:	480b      	ldr	r0, [pc, #44]	; (8003518 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034f0:	d3f6      	bcc.n	80034e0 <CopyDataInit>
  ldr  r2, =_sbss
 80034f2:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034f4:	e002      	b.n	80034fc <LoopFillZerobss>

080034f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034f8:	f842 3b04 	str.w	r3, [r2], #4

080034fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003500:	d3f9      	bcc.n	80034f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003502:	f7ff fd49 	bl	8002f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003506:	f003 fa53 	bl	80069b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800350a:	f7fe f9af 	bl	800186c <main>
  bx  lr    
 800350e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003510:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003514:	0800e2e4 	.word	0x0800e2e4
  ldr  r0, =_sdata
 8003518:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800351c:	20000328 	.word	0x20000328
  ldr  r2, =_sbss
 8003520:	20000328 	.word	0x20000328
  ldr  r3, = _ebss
 8003524:	20000d88 	.word	0x20000d88

08003528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003528:	e7fe      	b.n	8003528 <ADC_IRQHandler>
	...

0800352c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_Init+0x40>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <HAL_Init+0x40>)
 8003536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800353a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_Init+0x40>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <HAL_Init+0x40>)
 8003542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003546:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_Init+0x40>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a07      	ldr	r2, [pc, #28]	; (800356c <HAL_Init+0x40>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003554:	2003      	movs	r0, #3
 8003556:	f000 fcfb 	bl	8003f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800355a:	2000      	movs	r0, #0
 800355c:	f000 f808 	bl	8003570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003560:	f7ff fa0e 	bl	8002980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023c00 	.word	0x40023c00

08003570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_InitTick+0x54>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_InitTick+0x58>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003586:	fbb3 f3f1 	udiv	r3, r3, r1
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fd05 	bl	8003f9e <HAL_SYSTICK_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e00e      	b.n	80035bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d80a      	bhi.n	80035ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a4:	2200      	movs	r2, #0
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f000 fcdb 	bl	8003f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035b0:	4a06      	ldr	r2, [pc, #24]	; (80035cc <HAL_InitTick+0x5c>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200000e4 	.word	0x200000e4
 80035c8:	2000014c 	.word	0x2000014c
 80035cc:	20000148 	.word	0x20000148

080035d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x20>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_IncTick+0x24>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_IncTick+0x24>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	2000014c 	.word	0x2000014c
 80035f4:	20000d74 	.word	0x20000d74

080035f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return uwTick;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_GetTick+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000d74 	.word	0x20000d74

08003610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff ffee 	bl	80035f8 <HAL_GetTick>
 800361c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d005      	beq.n	8003636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_Delay+0x44>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003636:	bf00      	nop
 8003638:	f7ff ffde 	bl	80035f8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	d8f7      	bhi.n	8003638 <HAL_Delay+0x28>
  {
  }
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000014c 	.word	0x2000014c

08003658 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e033      	b.n	80036d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff f9aa 	bl	80029d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800369e:	f023 0302 	bic.w	r3, r3, #2
 80036a2:	f043 0202 	orr.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 faa2 	bl	8003bf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
 80036c6:	e001      	b.n	80036cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_Start+0x1a>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0a5      	b.n	8003846 <HAL_ADC_Start+0x166>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d018      	beq.n	8003742 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003720:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <HAL_ADC_Start+0x174>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a4c      	ldr	r2, [pc, #304]	; (8003858 <HAL_ADC_Start+0x178>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0c9a      	lsrs	r2, r3, #18
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003734:	e002      	b.n	800373c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3b01      	subs	r3, #1
 800373a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f9      	bne.n	8003736 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	d179      	bne.n	8003844 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800377a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	d106      	bne.n	800379e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f023 0206 	bic.w	r2, r3, #6
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	645a      	str	r2, [r3, #68]	; 0x44
 800379c:	e002      	b.n	80037a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_ADC_Start+0x17c>)
 80037ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037b8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d12a      	bne.n	800381c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a25      	ldr	r2, [pc, #148]	; (8003860 <HAL_ADC_Start+0x180>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d015      	beq.n	80037fc <HAL_ADC_Start+0x11c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <HAL_ADC_Start+0x184>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d105      	bne.n	80037e6 <HAL_ADC_Start+0x106>
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_ADC_Start+0x17c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_ADC_Start+0x188>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d129      	bne.n	8003844 <HAL_ADC_Start+0x164>
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_ADC_Start+0x17c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d123      	bne.n	8003844 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11c      	bne.n	8003844 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	e013      	b.n	8003844 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0f      	ldr	r2, [pc, #60]	; (8003860 <HAL_ADC_Start+0x180>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10e      	bne.n	8003844 <HAL_ADC_Start+0x164>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d107      	bne.n	8003844 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003842:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	200000e4 	.word	0x200000e4
 8003858:	431bde83 	.word	0x431bde83
 800385c:	40012300 	.word	0x40012300
 8003860:	40012000 	.word	0x40012000
 8003864:	40012100 	.word	0x40012100
 8003868:	40012200 	.word	0x40012200

0800386c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003888:	d113      	bne.n	80038b2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003898:	d10b      	bne.n	80038b2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f043 0220 	orr.w	r2, r3, #32
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e05c      	b.n	800396c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80038b2:	f7ff fea1 	bl	80035f8 <HAL_GetTick>
 80038b6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038b8:	e01a      	b.n	80038f0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d016      	beq.n	80038f0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_ADC_PollForConversion+0x6c>
 80038c8:	f7ff fe96 	bl	80035f8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d20b      	bcs.n	80038f0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f043 0204 	orr.w	r2, r3, #4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e03d      	b.n	800396c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d1dd      	bne.n	80038ba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0212 	mvn.w	r2, #18
 8003906:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d123      	bne.n	800396a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11f      	bne.n	800396a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003942:	2b00      	cmp	r3, #0
 8003944:	d111      	bne.n	800396a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d105      	bne.n	800396a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x1c>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e113      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x244>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b09      	cmp	r3, #9
 80039ba:	d925      	bls.n	8003a08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68d9      	ldr	r1, [r3, #12]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	3b1e      	subs	r3, #30
 80039d2:	2207      	movs	r2, #7
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43da      	mvns	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	400a      	ands	r2, r1
 80039e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68d9      	ldr	r1, [r3, #12]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4403      	add	r3, r0
 80039fa:	3b1e      	subs	r3, #30
 80039fc:	409a      	lsls	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	e022      	b.n	8003a4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6919      	ldr	r1, [r3, #16]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	2207      	movs	r2, #7
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	400a      	ands	r2, r1
 8003a2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6919      	ldr	r1, [r3, #16]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4403      	add	r3, r0
 8003a44:	409a      	lsls	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d824      	bhi.n	8003aa0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	3b05      	subs	r3, #5
 8003a68:	221f      	movs	r2, #31
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	400a      	ands	r2, r1
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4618      	mov	r0, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	3b05      	subs	r3, #5
 8003a92:	fa00 f203 	lsl.w	r2, r0, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a9e:	e04c      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d824      	bhi.n	8003af2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3b23      	subs	r3, #35	; 0x23
 8003aba:	221f      	movs	r2, #31
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43da      	mvns	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3b23      	subs	r3, #35	; 0x23
 8003ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
 8003af0:	e023      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	3b41      	subs	r3, #65	; 0x41
 8003b04:	221f      	movs	r2, #31
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	400a      	ands	r2, r1
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4618      	mov	r0, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3b41      	subs	r3, #65	; 0x41
 8003b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b3a:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <HAL_ADC_ConfigChannel+0x250>)
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <HAL_ADC_ConfigChannel+0x254>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10f      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1d8>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b12      	cmp	r3, #18
 8003b4e:	d10b      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1d      	ldr	r2, [pc, #116]	; (8003be4 <HAL_ADC_ConfigChannel+0x254>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d12b      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x23a>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1c      	ldr	r2, [pc, #112]	; (8003be8 <HAL_ADC_ConfigChannel+0x258>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <HAL_ADC_ConfigChannel+0x1f4>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b11      	cmp	r3, #17
 8003b82:	d122      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <HAL_ADC_ConfigChannel+0x258>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d111      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_ADC_ConfigChannel+0x25c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a11      	ldr	r2, [pc, #68]	; (8003bf0 <HAL_ADC_ConfigChannel+0x260>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	0c9a      	lsrs	r2, r3, #18
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003bbc:	e002      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f9      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40012300 	.word	0x40012300
 8003be4:	40012000 	.word	0x40012000
 8003be8:	10000012 	.word	0x10000012
 8003bec:	200000e4 	.word	0x200000e4
 8003bf0:	431bde83 	.word	0x431bde83

08003bf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bfc:	4b79      	ldr	r3, [pc, #484]	; (8003de4 <ADC_Init+0x1f0>)
 8003bfe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	021a      	lsls	r2, r3, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6899      	ldr	r1, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <ADC_Init+0x1f4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d022      	beq.n	8003cd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6899      	ldr	r1, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6899      	ldr	r1, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	e00f      	b.n	8003cf2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cf0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0202 	bic.w	r2, r2, #2
 8003d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6899      	ldr	r1, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7e1b      	ldrb	r3, [r3, #24]
 8003d0c:	005a      	lsls	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01b      	beq.n	8003d58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	035a      	lsls	r2, r3, #13
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	e007      	b.n	8003d68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	051a      	lsls	r2, r3, #20
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003daa:	025a      	lsls	r2, r3, #9
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6899      	ldr	r1, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	029a      	lsls	r2, r3, #10
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	609a      	str	r2, [r3, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40012300 	.word	0x40012300
 8003de8:	0f000001 	.word	0x0f000001

08003dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <__NVIC_SetPriorityGrouping+0x44>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1e:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <__NVIC_SetPriorityGrouping+0x44>)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	60d3      	str	r3, [r2, #12]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <__NVIC_GetPriorityGrouping+0x18>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	0a1b      	lsrs	r3, r3, #8
 8003e3e:	f003 0307 	and.w	r3, r3, #7
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	6039      	str	r1, [r7, #0]
 8003e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	db0a      	blt.n	8003e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	490c      	ldr	r1, [pc, #48]	; (8003e9c <__NVIC_SetPriority+0x4c>)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	0112      	lsls	r2, r2, #4
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	440b      	add	r3, r1
 8003e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e78:	e00a      	b.n	8003e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4908      	ldr	r1, [pc, #32]	; (8003ea0 <__NVIC_SetPriority+0x50>)
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	3b04      	subs	r3, #4
 8003e88:	0112      	lsls	r2, r2, #4
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	761a      	strb	r2, [r3, #24]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000e100 	.word	0xe000e100
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b089      	sub	sp, #36	; 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f1c3 0307 	rsb	r3, r3, #7
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	bf28      	it	cs
 8003ec2:	2304      	movcs	r3, #4
 8003ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d902      	bls.n	8003ed4 <NVIC_EncodePriority+0x30>
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3b03      	subs	r3, #3
 8003ed2:	e000      	b.n	8003ed6 <NVIC_EncodePriority+0x32>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eec:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	43d9      	mvns	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	4313      	orrs	r3, r2
         );
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	; 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f1c:	d301      	bcc.n	8003f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00f      	b.n	8003f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f22:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <SysTick_Config+0x40>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2a:	210f      	movs	r1, #15
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	f7ff ff8e 	bl	8003e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <SysTick_Config+0x40>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <SysTick_Config+0x40>)
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	e000e010 	.word	0xe000e010

08003f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff47 	bl	8003dec <__NVIC_SetPriorityGrouping>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f78:	f7ff ff5c 	bl	8003e34 <__NVIC_GetPriorityGrouping>
 8003f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff8e 	bl	8003ea4 <NVIC_EncodePriority>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff5d 	bl	8003e50 <__NVIC_SetPriority>
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ffb0 	bl	8003f0c <SysTick_Config>
 8003fac:	4603      	mov	r3, r0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e014      	b.n	8003ff2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	791b      	ldrb	r3, [r3, #4]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fe fd6f 	bl	8002abc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	2300      	movs	r3, #0
 800400a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	795b      	ldrb	r3, [r3, #5]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_DAC_Start+0x1e>
 8004014:	2302      	movs	r3, #2
 8004016:	e050      	b.n	80040ba <HAL_DAC_Start+0xc0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6819      	ldr	r1, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	409a      	lsls	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11a      	bne.n	8004074 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004054:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d127      	bne.n	80040ac <HAL_DAC_Start+0xb2>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b38      	cmp	r3, #56	; 0x38
 8004060:	d124      	bne.n	80040ac <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	e01b      	b.n	80040ac <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800408a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004092:	d10b      	bne.n	80040ac <HAL_DAC_Start+0xb2>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800409a:	d107      	bne.n	80040ac <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0202 	orr.w	r2, r2, #2
 80040aa:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b087      	sub	sp, #28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	795b      	ldrb	r3, [r3, #5]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_DAC_ConfigChannel+0x20>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e036      	b.n	8004154 <HAL_DAC_ConfigChannel+0x8e>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2202      	movs	r2, #2
 80040f0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80040fa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4013      	ands	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	22c0      	movs	r2, #192	; 0xc0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43da      	mvns	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	400a      	ands	r2, r1
 8004144:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d105      	bne.n	800418a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	3308      	adds	r3, #8
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	e004      	b.n	8004194 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4413      	add	r3, r2
 8004190:	3314      	adds	r3, #20
 8004192:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	461a      	mov	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	; 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	e177      	b.n	80044b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041c8:	2201      	movs	r2, #1
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4013      	ands	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	f040 8166 	bne.w	80044b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d00b      	beq.n	8004206 <HAL_GPIO_Init+0x5a>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d007      	beq.n	8004206 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041fa:	2b11      	cmp	r3, #17
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b12      	cmp	r3, #18
 8004204:	d130      	bne.n	8004268 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	2203      	movs	r2, #3
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800423c:	2201      	movs	r2, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4013      	ands	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 0201 	and.w	r2, r3, #1
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	2203      	movs	r2, #3
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_Init+0xfc>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b12      	cmp	r3, #18
 80042a6:	d123      	bne.n	80042f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	08da      	lsrs	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3208      	adds	r2, #8
 80042b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	220f      	movs	r2, #15
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	08da      	lsrs	r2, r3, #3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3208      	adds	r2, #8
 80042ea:	69b9      	ldr	r1, [r7, #24]
 80042ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	2203      	movs	r2, #3
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0203 	and.w	r2, r3, #3
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80c0 	beq.w	80044b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	4b66      	ldr	r3, [pc, #408]	; (80044d0 <HAL_GPIO_Init+0x324>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	4a65      	ldr	r2, [pc, #404]	; (80044d0 <HAL_GPIO_Init+0x324>)
 800433c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004340:	6453      	str	r3, [r2, #68]	; 0x44
 8004342:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <HAL_GPIO_Init+0x324>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800434e:	4a61      	ldr	r2, [pc, #388]	; (80044d4 <HAL_GPIO_Init+0x328>)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	089b      	lsrs	r3, r3, #2
 8004354:	3302      	adds	r3, #2
 8004356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	220f      	movs	r2, #15
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a58      	ldr	r2, [pc, #352]	; (80044d8 <HAL_GPIO_Init+0x32c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d037      	beq.n	80043ea <HAL_GPIO_Init+0x23e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a57      	ldr	r2, [pc, #348]	; (80044dc <HAL_GPIO_Init+0x330>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d031      	beq.n	80043e6 <HAL_GPIO_Init+0x23a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_GPIO_Init+0x334>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d02b      	beq.n	80043e2 <HAL_GPIO_Init+0x236>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a55      	ldr	r2, [pc, #340]	; (80044e4 <HAL_GPIO_Init+0x338>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d025      	beq.n	80043de <HAL_GPIO_Init+0x232>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a54      	ldr	r2, [pc, #336]	; (80044e8 <HAL_GPIO_Init+0x33c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <HAL_GPIO_Init+0x22e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a53      	ldr	r2, [pc, #332]	; (80044ec <HAL_GPIO_Init+0x340>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d019      	beq.n	80043d6 <HAL_GPIO_Init+0x22a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_GPIO_Init+0x344>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_GPIO_Init+0x226>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a51      	ldr	r2, [pc, #324]	; (80044f4 <HAL_GPIO_Init+0x348>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00d      	beq.n	80043ce <HAL_GPIO_Init+0x222>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a50      	ldr	r2, [pc, #320]	; (80044f8 <HAL_GPIO_Init+0x34c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <HAL_GPIO_Init+0x21e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4f      	ldr	r2, [pc, #316]	; (80044fc <HAL_GPIO_Init+0x350>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d101      	bne.n	80043c6 <HAL_GPIO_Init+0x21a>
 80043c2:	2309      	movs	r3, #9
 80043c4:	e012      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043c6:	230a      	movs	r3, #10
 80043c8:	e010      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043ca:	2308      	movs	r3, #8
 80043cc:	e00e      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e00c      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043d2:	2306      	movs	r3, #6
 80043d4:	e00a      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043d6:	2305      	movs	r3, #5
 80043d8:	e008      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043da:	2304      	movs	r3, #4
 80043dc:	e006      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043de:	2303      	movs	r3, #3
 80043e0:	e004      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043ea:	2300      	movs	r3, #0
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f002 0203 	and.w	r2, r2, #3
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	4093      	lsls	r3, r2
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043fc:	4935      	ldr	r1, [pc, #212]	; (80044d4 <HAL_GPIO_Init+0x328>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	3302      	adds	r3, #2
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_GPIO_Init+0x354>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800442e:	4a34      	ldr	r2, [pc, #208]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004434:	4b32      	ldr	r3, [pc, #200]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <HAL_GPIO_Init+0x354>)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445e:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_GPIO_Init+0x354>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <HAL_GPIO_Init+0x354>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	f67f ae84 	bls.w	80041c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3724      	adds	r7, #36	; 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40020000 	.word	0x40020000
 80044dc:	40020400 	.word	0x40020400
 80044e0:	40020800 	.word	0x40020800
 80044e4:	40020c00 	.word	0x40020c00
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40021400 	.word	0x40021400
 80044f0:	40021800 	.word	0x40021800
 80044f4:	40021c00 	.word	0x40021c00
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40022400 	.word	0x40022400
 8004500:	40013c00 	.word	0x40013c00

08004504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
 8004520:	e001      	b.n	8004526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	807b      	strh	r3, [r7, #2]
 8004540:	4613      	mov	r3, r2
 8004542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004544:	787b      	ldrb	r3, [r7, #1]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800454a:	887a      	ldrh	r2, [r7, #2]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004550:	e003      	b.n	800455a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004552:	887b      	ldrh	r3, [r7, #2]
 8004554:	041a      	lsls	r2, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	619a      	str	r2, [r3, #24]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e12b      	b.n	80047d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fe fad8 	bl	8002b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045cc:	f001 fb22 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 80045d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4a81      	ldr	r2, [pc, #516]	; (80047dc <HAL_I2C_Init+0x274>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d807      	bhi.n	80045ec <HAL_I2C_Init+0x84>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a80      	ldr	r2, [pc, #512]	; (80047e0 <HAL_I2C_Init+0x278>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf94      	ite	ls
 80045e4:	2301      	movls	r3, #1
 80045e6:	2300      	movhi	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e006      	b.n	80045fa <HAL_I2C_Init+0x92>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a7d      	ldr	r2, [pc, #500]	; (80047e4 <HAL_I2C_Init+0x27c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	bf94      	ite	ls
 80045f4:	2301      	movls	r3, #1
 80045f6:	2300      	movhi	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0e7      	b.n	80047d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a78      	ldr	r2, [pc, #480]	; (80047e8 <HAL_I2C_Init+0x280>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0c9b      	lsrs	r3, r3, #18
 800460c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <HAL_I2C_Init+0x274>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d802      	bhi.n	800463c <HAL_I2C_Init+0xd4>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3301      	adds	r3, #1
 800463a:	e009      	b.n	8004650 <HAL_I2C_Init+0xe8>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	4a69      	ldr	r2, [pc, #420]	; (80047ec <HAL_I2C_Init+0x284>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	3301      	adds	r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	430b      	orrs	r3, r1
 8004656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004662:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	495c      	ldr	r1, [pc, #368]	; (80047dc <HAL_I2C_Init+0x274>)
 800466c:	428b      	cmp	r3, r1
 800466e:	d819      	bhi.n	80046a4 <HAL_I2C_Init+0x13c>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1e59      	subs	r1, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fbb1 f3f3 	udiv	r3, r1, r3
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004684:	400b      	ands	r3, r1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_I2C_Init+0x138>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1e59      	subs	r1, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fbb1 f3f3 	udiv	r3, r1, r3
 8004698:	3301      	adds	r3, #1
 800469a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469e:	e051      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046a0:	2304      	movs	r3, #4
 80046a2:	e04f      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d111      	bne.n	80046d0 <HAL_I2C_Init+0x168>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1e58      	subs	r0, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6859      	ldr	r1, [r3, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	440b      	add	r3, r1
 80046ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80046be:	3301      	adds	r3, #1
 80046c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e012      	b.n	80046f6 <HAL_I2C_Init+0x18e>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e58      	subs	r0, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	0099      	lsls	r1, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_Init+0x196>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e022      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10e      	bne.n	8004724 <HAL_I2C_Init+0x1bc>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1e58      	subs	r0, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	440b      	add	r3, r1
 8004714:	fbb0 f3f3 	udiv	r3, r0, r3
 8004718:	3301      	adds	r3, #1
 800471a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004722:	e00f      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1e58      	subs	r0, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	0099      	lsls	r1, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	fbb0 f3f3 	udiv	r3, r0, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	6809      	ldr	r1, [r1, #0]
 8004748:	4313      	orrs	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6911      	ldr	r1, [r2, #16]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	68d2      	ldr	r2, [r2, #12]
 800477e:	4311      	orrs	r1, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	430b      	orrs	r3, r1
 8004786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	000186a0 	.word	0x000186a0
 80047e0:	001e847f 	.word	0x001e847f
 80047e4:	003d08ff 	.word	0x003d08ff
 80047e8:	431bde83 	.word	0x431bde83
 80047ec:	10624dd3 	.word	0x10624dd3

080047f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	461a      	mov	r2, r3
 80047fc:	460b      	mov	r3, r1
 80047fe:	817b      	strh	r3, [r7, #10]
 8004800:	4613      	mov	r3, r2
 8004802:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004804:	f7fe fef8 	bl	80035f8 <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b20      	cmp	r3, #32
 8004814:	f040 80e0 	bne.w	80049d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	2319      	movs	r3, #25
 800481e:	2201      	movs	r2, #1
 8004820:	4970      	ldr	r1, [pc, #448]	; (80049e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fa92 	bl	8004d4c <I2C_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
 8004830:	e0d3      	b.n	80049da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_I2C_Master_Transmit+0x50>
 800483c:	2302      	movs	r3, #2
 800483e:	e0cc      	b.n	80049da <HAL_I2C_Master_Transmit+0x1ea>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d007      	beq.n	8004866 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2221      	movs	r2, #33	; 0x21
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2210      	movs	r2, #16
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	893a      	ldrh	r2, [r7, #8]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a50      	ldr	r2, [pc, #320]	; (80049e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80048a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048a8:	8979      	ldrh	r1, [r7, #10]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f9ca 	bl	8004c48 <I2C_MasterRequestWrite>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e08d      	b.n	80049da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80048d4:	e066      	b.n	80049a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	6a39      	ldr	r1, [r7, #32]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fb0c 	bl	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d107      	bne.n	80048fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e06b      	b.n	80049da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b04      	cmp	r3, #4
 800493e:	d11b      	bne.n	8004978 <HAL_I2C_Master_Transmit+0x188>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d017      	beq.n	8004978 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	6a39      	ldr	r1, [r7, #32]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fafc 	bl	8004f7a <I2C_WaitOnBTFFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	2b04      	cmp	r3, #4
 800498e:	d107      	bne.n	80049a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e01a      	b.n	80049da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d194      	bne.n	80048d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	00100002 	.word	0x00100002
 80049e8:	ffff0000 	.word	0xffff0000

080049ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	; 0x28
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	460b      	mov	r3, r1
 80049fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80049fc:	f7fe fdfc 	bl	80035f8 <HAL_GetTick>
 8004a00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004a02:	2301      	movs	r3, #1
 8004a04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	f040 8111 	bne.w	8004c36 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	2319      	movs	r3, #25
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4988      	ldr	r1, [pc, #544]	; (8004c40 <HAL_I2C_IsDeviceReady+0x254>)
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f994 	bl	8004d4c <I2C_WaitOnFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e104      	b.n	8004c38 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_I2C_IsDeviceReady+0x50>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e0fd      	b.n	8004c38 <HAL_I2C_IsDeviceReady+0x24c>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d007      	beq.n	8004a62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2224      	movs	r2, #36	; 0x24
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a70      	ldr	r2, [pc, #448]	; (8004c44 <HAL_I2C_IsDeviceReady+0x258>)
 8004a84:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f952 	bl	8004d4c <I2C_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00d      	beq.n	8004aca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abc:	d103      	bne.n	8004ac6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0b6      	b.n	8004c38 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aca:	897b      	ldrh	r3, [r7, #10]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ad8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004ada:	f7fe fd8d 	bl	80035f8 <HAL_GetTick>
 8004ade:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b04:	bf0c      	ite	eq
 8004b06:	2301      	moveq	r3, #1
 8004b08:	2300      	movne	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b0e:	e025      	b.n	8004b5c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b10:	f7fe fd72 	bl	80035f8 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d302      	bcc.n	8004b26 <HAL_I2C_IsDeviceReady+0x13a>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	22a0      	movs	r2, #160	; 0xa0
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2ba0      	cmp	r3, #160	; 0xa0
 8004b66:	d005      	beq.n	8004b74 <HAL_I2C_IsDeviceReady+0x188>
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_I2C_IsDeviceReady+0x188>
 8004b6e:	7dbb      	ldrb	r3, [r7, #22]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0cd      	beq.n	8004b10 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d129      	bne.n	8004bde <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b98:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	2319      	movs	r3, #25
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4921      	ldr	r1, [pc, #132]	; (8004c40 <HAL_I2C_IsDeviceReady+0x254>)
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f8c6 	bl	8004d4c <I2C_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e036      	b.n	8004c38 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e02c      	b.n	8004c38 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	2319      	movs	r3, #25
 8004bfe:	2201      	movs	r2, #1
 8004c00:	490f      	ldr	r1, [pc, #60]	; (8004c40 <HAL_I2C_IsDeviceReady+0x254>)
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f8a2 	bl	8004d4c <I2C_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e012      	b.n	8004c38 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3301      	adds	r3, #1
 8004c16:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	f4ff af32 	bcc.w	8004a86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004c36:	2302      	movs	r3, #2
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	00100002 	.word	0x00100002
 8004c44:	ffff0000 	.word	0xffff0000

08004c48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d006      	beq.n	8004c72 <I2C_MasterRequestWrite+0x2a>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d003      	beq.n	8004c72 <I2C_MasterRequestWrite+0x2a>
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c70:	d108      	bne.n	8004c84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e00b      	b.n	8004c9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	2b12      	cmp	r3, #18
 8004c8a:	d107      	bne.n	8004c9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f84f 	bl	8004d4c <I2C_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc2:	d103      	bne.n	8004ccc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e035      	b.n	8004d3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cd8:	d108      	bne.n	8004cec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cda:	897b      	ldrh	r3, [r7, #10]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ce8:	611a      	str	r2, [r3, #16]
 8004cea:	e01b      	b.n	8004d24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cec:	897b      	ldrh	r3, [r7, #10]
 8004cee:	11db      	asrs	r3, r3, #7
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f003 0306 	and.w	r3, r3, #6
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f063 030f 	orn	r3, r3, #15
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	490e      	ldr	r1, [pc, #56]	; (8004d44 <I2C_MasterRequestWrite+0xfc>)
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f875 	bl	8004dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e010      	b.n	8004d3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d1a:	897b      	ldrh	r3, [r7, #10]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4907      	ldr	r1, [pc, #28]	; (8004d48 <I2C_MasterRequestWrite+0x100>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f865 	bl	8004dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	00010008 	.word	0x00010008
 8004d48:	00010002 	.word	0x00010002

08004d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d5c:	e025      	b.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d64:	d021      	beq.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d66:	f7fe fc47 	bl	80035f8 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d302      	bcc.n	8004d7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d116      	bne.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f043 0220 	orr.w	r2, r3, #32
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e023      	b.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d10d      	bne.n	8004dd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf0c      	ite	eq
 8004dc6:	2301      	moveq	r3, #1
 8004dc8:	2300      	movne	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	e00c      	b.n	8004dea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf0c      	ite	eq
 8004de2:	2301      	moveq	r3, #1
 8004de4:	2300      	movne	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d0b6      	beq.n	8004d5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e08:	e051      	b.n	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e18:	d123      	bne.n	8004e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f043 0204 	orr.w	r2, r3, #4
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e046      	b.n	8004ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d021      	beq.n	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fe fbc5 	bl	80035f8 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d116      	bne.n	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f043 0220 	orr.w	r2, r3, #32
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e020      	b.n	8004ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	0c1b      	lsrs	r3, r3, #16
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d10c      	bne.n	8004ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	43da      	mvns	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bf14      	ite	ne
 8004eca:	2301      	movne	r3, #1
 8004ecc:	2300      	moveq	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	e00b      	b.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	43da      	mvns	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4013      	ands	r3, r2
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d18d      	bne.n	8004e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f04:	e02d      	b.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f878 	bl	8004ffc <I2C_IsAcknowledgeFailed>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e02d      	b.n	8004f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d021      	beq.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1e:	f7fe fb6b 	bl	80035f8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d116      	bne.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f043 0220 	orr.w	r2, r3, #32
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e007      	b.n	8004f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d1ca      	bne.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f86:	e02d      	b.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f837 	bl	8004ffc <I2C_IsAcknowledgeFailed>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e02d      	b.n	8004ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d021      	beq.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa0:	f7fe fb2a 	bl	80035f8 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d116      	bne.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f043 0220 	orr.w	r2, r3, #32
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e007      	b.n	8004ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d1ca      	bne.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005012:	d11b      	bne.n	800504c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800501c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f043 0204 	orr.w	r2, r3, #4
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b20      	cmp	r3, #32
 800506e:	d129      	bne.n	80050c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2224      	movs	r2, #36	; 0x24
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0210 	bic.w	r2, r2, #16
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e000      	b.n	80050c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80050c4:	2302      	movs	r3, #2
  }
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d12a      	bne.n	8005142 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2224      	movs	r2, #36	; 0x24
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800510c:	89fb      	ldrh	r3, [r7, #14]
 800510e:	f023 030f 	bic.w	r3, r3, #15
 8005112:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	b29a      	uxth	r2, r3
 8005118:	89fb      	ldrh	r3, [r7, #14]
 800511a:	4313      	orrs	r3, r2
 800511c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	89fa      	ldrh	r2, [r7, #14]
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e000      	b.n	8005144 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005142:	2302      	movs	r3, #2
  }
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005152:	b08f      	sub	sp, #60	; 0x3c
 8005154:	af0a      	add	r7, sp, #40	; 0x28
 8005156:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e10f      	b.n	8005382 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7fd fdc7 	bl	8002d10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2203      	movs	r2, #3
 8005186:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 f9aa 	bl	80064fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	687e      	ldr	r6, [r7, #4]
 80051ae:	466d      	mov	r5, sp
 80051b0:	f106 0410 	add.w	r4, r6, #16
 80051b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80051c4:	1d33      	adds	r3, r6, #4
 80051c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051c8:	6838      	ldr	r0, [r7, #0]
 80051ca:	f001 f935 	bl	8006438 <USB_CoreInit>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0d0      	b.n	8005382 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 f998 	bl	800651c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e04a      	b.n	8005288 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051f2:	7bfa      	ldrb	r2, [r7, #15]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	333d      	adds	r3, #61	; 0x3d
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005206:	7bfa      	ldrb	r2, [r7, #15]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	333c      	adds	r3, #60	; 0x3c
 8005216:	7bfa      	ldrb	r2, [r7, #15]
 8005218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800521a:	7bfa      	ldrb	r2, [r7, #15]
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	b298      	uxth	r0, r3
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	3342      	adds	r3, #66	; 0x42
 800522e:	4602      	mov	r2, r0
 8005230:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005232:	7bfa      	ldrb	r2, [r7, #15]
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	333f      	adds	r3, #63	; 0x3f
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005246:	7bfa      	ldrb	r2, [r7, #15]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	3344      	adds	r3, #68	; 0x44
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800525a:	7bfa      	ldrb	r2, [r7, #15]
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	1a9b      	subs	r3, r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	3348      	adds	r3, #72	; 0x48
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800526e:	7bfa      	ldrb	r2, [r7, #15]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	3350      	adds	r3, #80	; 0x50
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	3301      	adds	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
 8005288:	7bfa      	ldrb	r2, [r7, #15]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	429a      	cmp	r2, r3
 8005290:	d3af      	bcc.n	80051f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
 8005296:	e044      	b.n	8005322 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052ae:	7bfa      	ldrb	r2, [r7, #15]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80052c0:	7bfa      	ldrb	r2, [r7, #15]
 80052c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	1a9b      	subs	r3, r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	3301      	adds	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
 8005322:	7bfa      	ldrb	r2, [r7, #15]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	429a      	cmp	r2, r3
 800532a:	d3b5      	bcc.n	8005298 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	687e      	ldr	r6, [r7, #4]
 8005334:	466d      	mov	r5, sp
 8005336:	f106 0410 	add.w	r4, r6, #16
 800533a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800533c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800533e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005342:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005346:	e885 0003 	stmia.w	r5, {r0, r1}
 800534a:	1d33      	adds	r3, r6, #4
 800534c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800534e:	6838      	ldr	r0, [r7, #0]
 8005350:	f001 f90e 	bl	8006570 <USB_DevInit>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e00d      	b.n	8005382 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fabd 	bl	80068fa <USB_DevDisconnect>

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800538c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e25b      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d075      	beq.n	8005496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053aa:	4ba3      	ldr	r3, [pc, #652]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d00c      	beq.n	80053d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053b6:	4ba0      	ldr	r3, [pc, #640]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d112      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c2:	4b9d      	ldr	r3, [pc, #628]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ce:	d10b      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	4b99      	ldr	r3, [pc, #612]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d05b      	beq.n	8005494 <HAL_RCC_OscConfig+0x108>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d157      	bne.n	8005494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e236      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d106      	bne.n	8005400 <HAL_RCC_OscConfig+0x74>
 80053f2:	4b91      	ldr	r3, [pc, #580]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a90      	ldr	r2, [pc, #576]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e01d      	b.n	800543c <HAL_RCC_OscConfig+0xb0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005408:	d10c      	bne.n	8005424 <HAL_RCC_OscConfig+0x98>
 800540a:	4b8b      	ldr	r3, [pc, #556]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a8a      	ldr	r2, [pc, #552]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4b88      	ldr	r3, [pc, #544]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a87      	ldr	r2, [pc, #540]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e00b      	b.n	800543c <HAL_RCC_OscConfig+0xb0>
 8005424:	4b84      	ldr	r3, [pc, #528]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a83      	ldr	r2, [pc, #524]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800542a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	4b81      	ldr	r3, [pc, #516]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a80      	ldr	r2, [pc, #512]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800543a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d013      	beq.n	800546c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fe f8d8 	bl	80035f8 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800544c:	f7fe f8d4 	bl	80035f8 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	; 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e1fb      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	4b76      	ldr	r3, [pc, #472]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0xc0>
 800546a:	e014      	b.n	8005496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546c:	f7fe f8c4 	bl	80035f8 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005474:	f7fe f8c0 	bl	80035f8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	; 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e1e7      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005486:	4b6c      	ldr	r3, [pc, #432]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0xe8>
 8005492:	e000      	b.n	8005496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d063      	beq.n	800556a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054a2:	4b65      	ldr	r3, [pc, #404]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ae:	4b62      	ldr	r3, [pc, #392]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d11c      	bne.n	80054f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ba:	4b5f      	ldr	r3, [pc, #380]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d116      	bne.n	80054f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c6:	4b5c      	ldr	r3, [pc, #368]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_RCC_OscConfig+0x152>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d001      	beq.n	80054de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e1bb      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054de:	4b56      	ldr	r3, [pc, #344]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4952      	ldr	r1, [pc, #328]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f2:	e03a      	b.n	800556a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d020      	beq.n	800553e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054fc:	4b4f      	ldr	r3, [pc, #316]	; (800563c <HAL_RCC_OscConfig+0x2b0>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fe f879 	bl	80035f8 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550a:	f7fe f875 	bl	80035f8 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e19c      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551c:	4b46      	ldr	r3, [pc, #280]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005528:	4b43      	ldr	r3, [pc, #268]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4940      	ldr	r1, [pc, #256]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]
 800553c:	e015      	b.n	800556a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553e:	4b3f      	ldr	r3, [pc, #252]	; (800563c <HAL_RCC_OscConfig+0x2b0>)
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fe f858 	bl	80035f8 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554c:	f7fe f854 	bl	80035f8 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e17b      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d030      	beq.n	80055d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800557e:	4b30      	ldr	r3, [pc, #192]	; (8005640 <HAL_RCC_OscConfig+0x2b4>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fe f838 	bl	80035f8 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558c:	f7fe f834 	bl	80035f8 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e15b      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559e:	4b26      	ldr	r3, [pc, #152]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x200>
 80055aa:	e015      	b.n	80055d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ac:	4b24      	ldr	r3, [pc, #144]	; (8005640 <HAL_RCC_OscConfig+0x2b4>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b2:	f7fe f821 	bl	80035f8 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ba:	f7fe f81d 	bl	80035f8 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e144      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80a0 	beq.w	8005726 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4b13      	ldr	r3, [pc, #76]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	4a0e      	ldr	r2, [pc, #56]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005604:	6413      	str	r3, [r2, #64]	; 0x40
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_RCC_OscConfig+0x2b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d121      	bne.n	8005666 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <HAL_RCC_OscConfig+0x2b8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a07      	ldr	r2, [pc, #28]	; (8005644 <HAL_RCC_OscConfig+0x2b8>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562e:	f7fd ffe3 	bl	80035f8 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	e011      	b.n	800565a <HAL_RCC_OscConfig+0x2ce>
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800
 800563c:	42470000 	.word	0x42470000
 8005640:	42470e80 	.word	0x42470e80
 8005644:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005648:	f7fd ffd6 	bl	80035f8 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e0fd      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565a:	4b81      	ldr	r3, [pc, #516]	; (8005860 <HAL_RCC_OscConfig+0x4d4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d106      	bne.n	800567c <HAL_RCC_OscConfig+0x2f0>
 800566e:	4b7d      	ldr	r3, [pc, #500]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a7c      	ldr	r2, [pc, #496]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6713      	str	r3, [r2, #112]	; 0x70
 800567a:	e01c      	b.n	80056b6 <HAL_RCC_OscConfig+0x32a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b05      	cmp	r3, #5
 8005682:	d10c      	bne.n	800569e <HAL_RCC_OscConfig+0x312>
 8005684:	4b77      	ldr	r3, [pc, #476]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	4a76      	ldr	r2, [pc, #472]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 800568a:	f043 0304 	orr.w	r3, r3, #4
 800568e:	6713      	str	r3, [r2, #112]	; 0x70
 8005690:	4b74      	ldr	r3, [pc, #464]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	4a73      	ldr	r2, [pc, #460]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6713      	str	r3, [r2, #112]	; 0x70
 800569c:	e00b      	b.n	80056b6 <HAL_RCC_OscConfig+0x32a>
 800569e:	4b71      	ldr	r3, [pc, #452]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	4a70      	ldr	r2, [pc, #448]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	6713      	str	r3, [r2, #112]	; 0x70
 80056aa:	4b6e      	ldr	r3, [pc, #440]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	4a6d      	ldr	r2, [pc, #436]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056b0:	f023 0304 	bic.w	r3, r3, #4
 80056b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d015      	beq.n	80056ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7fd ff9b 	bl	80035f8 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c4:	e00a      	b.n	80056dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fd ff97 	bl	80035f8 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e0bc      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056dc:	4b61      	ldr	r3, [pc, #388]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ee      	beq.n	80056c6 <HAL_RCC_OscConfig+0x33a>
 80056e8:	e014      	b.n	8005714 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ea:	f7fd ff85 	bl	80035f8 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f0:	e00a      	b.n	8005708 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fd ff81 	bl	80035f8 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0a6      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005708:	4b56      	ldr	r3, [pc, #344]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1ee      	bne.n	80056f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d105      	bne.n	8005726 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571a:	4b52      	ldr	r3, [pc, #328]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	4a51      	ldr	r2, [pc, #324]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005724:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8092 	beq.w	8005854 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005730:	4b4c      	ldr	r3, [pc, #304]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b08      	cmp	r3, #8
 800573a:	d05c      	beq.n	80057f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d141      	bne.n	80057c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005744:	4b48      	ldr	r3, [pc, #288]	; (8005868 <HAL_RCC_OscConfig+0x4dc>)
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7fd ff55 	bl	80035f8 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005752:	f7fd ff51 	bl	80035f8 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e078      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005764:	4b3f      	ldr	r3, [pc, #252]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f0      	bne.n	8005752 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	019b      	lsls	r3, r3, #6
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	3b01      	subs	r3, #1
 800578a:	041b      	lsls	r3, r3, #16
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	061b      	lsls	r3, r3, #24
 8005794:	4933      	ldr	r1, [pc, #204]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005796:	4313      	orrs	r3, r2
 8005798:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579a:	4b33      	ldr	r3, [pc, #204]	; (8005868 <HAL_RCC_OscConfig+0x4dc>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fd ff2a 	bl	80035f8 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a8:	f7fd ff26 	bl	80035f8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e04d      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ba:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x41c>
 80057c6:	e045      	b.n	8005854 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c8:	4b27      	ldr	r3, [pc, #156]	; (8005868 <HAL_RCC_OscConfig+0x4dc>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fd ff13 	bl	80035f8 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d6:	f7fd ff0f 	bl	80035f8 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e036      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e8:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <HAL_RCC_OscConfig+0x44a>
 80057f4:	e02e      	b.n	8005854 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e029      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005802:	4b18      	ldr	r3, [pc, #96]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	429a      	cmp	r2, r3
 8005814:	d11c      	bne.n	8005850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d115      	bne.n	8005850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005830:	4293      	cmp	r3, r2
 8005832:	d10d      	bne.n	8005850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d106      	bne.n	8005850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40007000 	.word	0x40007000
 8005864:	40023800 	.word	0x40023800
 8005868:	42470060 	.word	0x42470060

0800586c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0cc      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005880:	4b68      	ldr	r3, [pc, #416]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d90c      	bls.n	80058a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b65      	ldr	r3, [pc, #404]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b63      	ldr	r3, [pc, #396]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0b8      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d020      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c0:	4b59      	ldr	r3, [pc, #356]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4a58      	ldr	r2, [pc, #352]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d8:	4b53      	ldr	r3, [pc, #332]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a52      	ldr	r2, [pc, #328]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e4:	4b50      	ldr	r3, [pc, #320]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	494d      	ldr	r1, [pc, #308]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d044      	beq.n	800598c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d107      	bne.n	800591a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	4b47      	ldr	r3, [pc, #284]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d119      	bne.n	800594a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e07f      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d003      	beq.n	800592a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005926:	2b03      	cmp	r3, #3
 8005928:	d107      	bne.n	800593a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592a:	4b3f      	ldr	r3, [pc, #252]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e06f      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593a:	4b3b      	ldr	r3, [pc, #236]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e067      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800594a:	4b37      	ldr	r3, [pc, #220]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f023 0203 	bic.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4934      	ldr	r1, [pc, #208]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800595c:	f7fd fe4c 	bl	80035f8 <HAL_GetTick>
 8005960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005962:	e00a      	b.n	800597a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005964:	f7fd fe48 	bl	80035f8 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e04f      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597a:	4b2b      	ldr	r3, [pc, #172]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 020c 	and.w	r2, r3, #12
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	429a      	cmp	r2, r3
 800598a:	d1eb      	bne.n	8005964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800598c:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d20c      	bcs.n	80059b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599a:	4b22      	ldr	r3, [pc, #136]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e032      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c0:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4916      	ldr	r1, [pc, #88]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	490e      	ldr	r1, [pc, #56]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059f2:	f000 f821 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80059f6:	4602      	mov	r2, r0
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	490a      	ldr	r1, [pc, #40]	; (8005a2c <HAL_RCC_ClockConfig+0x1c0>)
 8005a04:	5ccb      	ldrb	r3, [r1, r3]
 8005a06:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a0e:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <HAL_RCC_ClockConfig+0x1c8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd fdac 	bl	8003570 <HAL_InitTick>

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40023c00 	.word	0x40023c00
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	0800de08 	.word	0x0800de08
 8005a30:	200000e4 	.word	0x200000e4
 8005a34:	20000148 	.word	0x20000148

08005a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a50:	4b67      	ldr	r3, [pc, #412]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 030c 	and.w	r3, r3, #12
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d00d      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x40>
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	f200 80bd 	bhi.w	8005bdc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x34>
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d003      	beq.n	8005a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a6a:	e0b7      	b.n	8005bdc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a6c:	4b61      	ldr	r3, [pc, #388]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a6e:	60bb      	str	r3, [r7, #8]
       break;
 8005a70:	e0b7      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a72:	4b61      	ldr	r3, [pc, #388]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a74:	60bb      	str	r3, [r7, #8]
      break;
 8005a76:	e0b4      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a78:	4b5d      	ldr	r3, [pc, #372]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a82:	4b5b      	ldr	r3, [pc, #364]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d04d      	beq.n	8005b2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a8e:	4b58      	ldr	r3, [pc, #352]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	099b      	lsrs	r3, r3, #6
 8005a94:	461a      	mov	r2, r3
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a9e:	f04f 0100 	mov.w	r1, #0
 8005aa2:	ea02 0800 	and.w	r8, r2, r0
 8005aa6:	ea03 0901 	and.w	r9, r3, r1
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	014b      	lsls	r3, r1, #5
 8005ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005abc:	0142      	lsls	r2, r0, #5
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	ebb0 0008 	subs.w	r0, r0, r8
 8005ac6:	eb61 0109 	sbc.w	r1, r1, r9
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	018b      	lsls	r3, r1, #6
 8005ad4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ad8:	0182      	lsls	r2, r0, #6
 8005ada:	1a12      	subs	r2, r2, r0
 8005adc:	eb63 0301 	sbc.w	r3, r3, r1
 8005ae0:	f04f 0000 	mov.w	r0, #0
 8005ae4:	f04f 0100 	mov.w	r1, #0
 8005ae8:	00d9      	lsls	r1, r3, #3
 8005aea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aee:	00d0      	lsls	r0, r2, #3
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	eb12 0208 	adds.w	r2, r2, r8
 8005af8:	eb43 0309 	adc.w	r3, r3, r9
 8005afc:	f04f 0000 	mov.w	r0, #0
 8005b00:	f04f 0100 	mov.w	r1, #0
 8005b04:	0259      	lsls	r1, r3, #9
 8005b06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b0a:	0250      	lsls	r0, r2, #9
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4610      	mov	r0, r2
 8005b12:	4619      	mov	r1, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	f7fb f8c4 	bl	8000ca8 <__aeabi_uldivmod>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4613      	mov	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e04a      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b2a:	4b31      	ldr	r3, [pc, #196]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	099b      	lsrs	r3, r3, #6
 8005b30:	461a      	mov	r2, r3
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	ea02 0400 	and.w	r4, r2, r0
 8005b42:	ea03 0501 	and.w	r5, r3, r1
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	014b      	lsls	r3, r1, #5
 8005b54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b58:	0142      	lsls	r2, r0, #5
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	1b00      	subs	r0, r0, r4
 8005b60:	eb61 0105 	sbc.w	r1, r1, r5
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	018b      	lsls	r3, r1, #6
 8005b6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b72:	0182      	lsls	r2, r0, #6
 8005b74:	1a12      	subs	r2, r2, r0
 8005b76:	eb63 0301 	sbc.w	r3, r3, r1
 8005b7a:	f04f 0000 	mov.w	r0, #0
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	00d9      	lsls	r1, r3, #3
 8005b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b88:	00d0      	lsls	r0, r2, #3
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	1912      	adds	r2, r2, r4
 8005b90:	eb45 0303 	adc.w	r3, r5, r3
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	0299      	lsls	r1, r3, #10
 8005b9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ba2:	0290      	lsls	r0, r2, #10
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4619      	mov	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	f7fb f878 	bl	8000ca8 <__aeabi_uldivmod>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	3301      	adds	r3, #1
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	60bb      	str	r3, [r7, #8]
      break;
 8005bda:	e002      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bde:	60bb      	str	r3, [r7, #8]
      break;
 8005be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be2:	68bb      	ldr	r3, [r7, #8]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	00f42400 	.word	0x00f42400
 8005bf8:	007a1200 	.word	0x007a1200

08005bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c02:	681b      	ldr	r3, [r3, #0]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	200000e4 	.word	0x200000e4

08005c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c18:	f7ff fff0 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	0a9b      	lsrs	r3, r3, #10
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	4903      	ldr	r1, [pc, #12]	; (8005c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2a:	5ccb      	ldrb	r3, [r1, r3]
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40023800 	.word	0x40023800
 8005c38:	0800de18 	.word	0x0800de18

08005c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c40:	f7ff ffdc 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	0b5b      	lsrs	r3, r3, #13
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	4903      	ldr	r1, [pc, #12]	; (8005c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c52:	5ccb      	ldrb	r3, [r1, r3]
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	0800de18 	.word	0x0800de18

08005c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e03f      	b.n	8005cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fc ffa2 	bl	8002bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2224      	movs	r2, #36	; 0x24
 8005c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f829 	bl	8005d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	b0bd      	sub	sp, #244	; 0xf4
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1c:	68d9      	ldr	r1, [r3, #12]
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	ea40 0301 	orr.w	r3, r0, r1
 8005d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d58:	f021 010c 	bic.w	r1, r1, #12
 8005d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d66:	430b      	orrs	r3, r1
 8005d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	6999      	ldr	r1, [r3, #24]
 8005d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	ea40 0301 	orr.w	r3, r0, r1
 8005d86:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d92:	f040 81a5 	bne.w	80060e0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	4bcd      	ldr	r3, [pc, #820]	; (80060d4 <UART_SetConfig+0x3d4>)
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d006      	beq.n	8005db0 <UART_SetConfig+0xb0>
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4bcb      	ldr	r3, [pc, #812]	; (80060d8 <UART_SetConfig+0x3d8>)
 8005daa:	429a      	cmp	r2, r3
 8005dac:	f040 80cb 	bne.w	8005f46 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db0:	f7ff ff44 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 8005db4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005db8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dbc:	461c      	mov	r4, r3
 8005dbe:	f04f 0500 	mov.w	r5, #0
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	462b      	mov	r3, r5
 8005dc6:	1891      	adds	r1, r2, r2
 8005dc8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005dcc:	415b      	adcs	r3, r3
 8005dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005dd2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005dd6:	1912      	adds	r2, r2, r4
 8005dd8:	eb45 0303 	adc.w	r3, r5, r3
 8005ddc:	f04f 0000 	mov.w	r0, #0
 8005de0:	f04f 0100 	mov.w	r1, #0
 8005de4:	00d9      	lsls	r1, r3, #3
 8005de6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dea:	00d0      	lsls	r0, r2, #3
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	1911      	adds	r1, r2, r4
 8005df2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005df6:	416b      	adcs	r3, r5
 8005df8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e14:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005e18:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005e1c:	f7fa ff44 	bl	8000ca8 <__aeabi_uldivmod>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4bad      	ldr	r3, [pc, #692]	; (80060dc <UART_SetConfig+0x3dc>)
 8005e26:	fba3 2302 	umull	r2, r3, r3, r2
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	011e      	lsls	r6, r3, #4
 8005e2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e32:	461c      	mov	r4, r3
 8005e34:	f04f 0500 	mov.w	r5, #0
 8005e38:	4622      	mov	r2, r4
 8005e3a:	462b      	mov	r3, r5
 8005e3c:	1891      	adds	r1, r2, r2
 8005e3e:	67b9      	str	r1, [r7, #120]	; 0x78
 8005e40:	415b      	adcs	r3, r3
 8005e42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e44:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005e48:	1912      	adds	r2, r2, r4
 8005e4a:	eb45 0303 	adc.w	r3, r5, r3
 8005e4e:	f04f 0000 	mov.w	r0, #0
 8005e52:	f04f 0100 	mov.w	r1, #0
 8005e56:	00d9      	lsls	r1, r3, #3
 8005e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e5c:	00d0      	lsls	r0, r2, #3
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	1911      	adds	r1, r2, r4
 8005e64:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005e68:	416b      	adcs	r3, r5
 8005e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	461a      	mov	r2, r3
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	1891      	adds	r1, r2, r2
 8005e7c:	6739      	str	r1, [r7, #112]	; 0x70
 8005e7e:	415b      	adcs	r3, r3
 8005e80:	677b      	str	r3, [r7, #116]	; 0x74
 8005e82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005e86:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005e8a:	f7fa ff0d 	bl	8000ca8 <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4b92      	ldr	r3, [pc, #584]	; (80060dc <UART_SetConfig+0x3dc>)
 8005e94:	fba3 1302 	umull	r1, r3, r3, r2
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	2164      	movs	r1, #100	; 0x64
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	3332      	adds	r3, #50	; 0x32
 8005ea6:	4a8d      	ldr	r2, [pc, #564]	; (80060dc <UART_SetConfig+0x3dc>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eb4:	441e      	add	r6, r3
 8005eb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	1894      	adds	r4, r2, r2
 8005ec6:	66bc      	str	r4, [r7, #104]	; 0x68
 8005ec8:	415b      	adcs	r3, r3
 8005eca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ecc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005ed0:	1812      	adds	r2, r2, r0
 8005ed2:	eb41 0303 	adc.w	r3, r1, r3
 8005ed6:	f04f 0400 	mov.w	r4, #0
 8005eda:	f04f 0500 	mov.w	r5, #0
 8005ede:	00dd      	lsls	r5, r3, #3
 8005ee0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ee4:	00d4      	lsls	r4, r2, #3
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	462b      	mov	r3, r5
 8005eea:	1814      	adds	r4, r2, r0
 8005eec:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005ef0:	414b      	adcs	r3, r1
 8005ef2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	1891      	adds	r1, r2, r2
 8005f04:	6639      	str	r1, [r7, #96]	; 0x60
 8005f06:	415b      	adcs	r3, r3
 8005f08:	667b      	str	r3, [r7, #100]	; 0x64
 8005f0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f12:	f7fa fec9 	bl	8000ca8 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4b70      	ldr	r3, [pc, #448]	; (80060dc <UART_SetConfig+0x3dc>)
 8005f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	2164      	movs	r1, #100	; 0x64
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	3332      	adds	r3, #50	; 0x32
 8005f2e:	4a6b      	ldr	r2, [pc, #428]	; (80060dc <UART_SetConfig+0x3dc>)
 8005f30:	fba2 2303 	umull	r2, r3, r2, r3
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	f003 0207 	and.w	r2, r3, #7
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4432      	add	r2, r6
 8005f42:	609a      	str	r2, [r3, #8]
 8005f44:	e26d      	b.n	8006422 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f46:	f7ff fe65 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8005f4a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f52:	461c      	mov	r4, r3
 8005f54:	f04f 0500 	mov.w	r5, #0
 8005f58:	4622      	mov	r2, r4
 8005f5a:	462b      	mov	r3, r5
 8005f5c:	1891      	adds	r1, r2, r2
 8005f5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f60:	415b      	adcs	r3, r3
 8005f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f68:	1912      	adds	r2, r2, r4
 8005f6a:	eb45 0303 	adc.w	r3, r5, r3
 8005f6e:	f04f 0000 	mov.w	r0, #0
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	00d9      	lsls	r1, r3, #3
 8005f78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f7c:	00d0      	lsls	r0, r2, #3
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	1911      	adds	r1, r2, r4
 8005f84:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005f88:	416b      	adcs	r3, r5
 8005f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	461a      	mov	r2, r3
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	1891      	adds	r1, r2, r2
 8005f9c:	6539      	str	r1, [r7, #80]	; 0x50
 8005f9e:	415b      	adcs	r3, r3
 8005fa0:	657b      	str	r3, [r7, #84]	; 0x54
 8005fa2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fa6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005faa:	f7fa fe7d 	bl	8000ca8 <__aeabi_uldivmod>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <UART_SetConfig+0x3dc>)
 8005fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	011e      	lsls	r6, r3, #4
 8005fbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fc0:	461c      	mov	r4, r3
 8005fc2:	f04f 0500 	mov.w	r5, #0
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	462b      	mov	r3, r5
 8005fca:	1891      	adds	r1, r2, r2
 8005fcc:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fce:	415b      	adcs	r3, r3
 8005fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fd6:	1912      	adds	r2, r2, r4
 8005fd8:	eb45 0303 	adc.w	r3, r5, r3
 8005fdc:	f04f 0000 	mov.w	r0, #0
 8005fe0:	f04f 0100 	mov.w	r1, #0
 8005fe4:	00d9      	lsls	r1, r3, #3
 8005fe6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fea:	00d0      	lsls	r0, r2, #3
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	1911      	adds	r1, r2, r4
 8005ff2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005ff6:	416b      	adcs	r3, r5
 8005ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	461a      	mov	r2, r3
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	1891      	adds	r1, r2, r2
 800600a:	6439      	str	r1, [r7, #64]	; 0x40
 800600c:	415b      	adcs	r3, r3
 800600e:	647b      	str	r3, [r7, #68]	; 0x44
 8006010:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006014:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006018:	f7fa fe46 	bl	8000ca8 <__aeabi_uldivmod>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <UART_SetConfig+0x3dc>)
 8006022:	fba3 1302 	umull	r1, r3, r3, r2
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	2164      	movs	r1, #100	; 0x64
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	3332      	adds	r3, #50	; 0x32
 8006034:	4a29      	ldr	r2, [pc, #164]	; (80060dc <UART_SetConfig+0x3dc>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006042:	441e      	add	r6, r3
 8006044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006048:	4618      	mov	r0, r3
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	1894      	adds	r4, r2, r2
 8006054:	63bc      	str	r4, [r7, #56]	; 0x38
 8006056:	415b      	adcs	r3, r3
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800605e:	1812      	adds	r2, r2, r0
 8006060:	eb41 0303 	adc.w	r3, r1, r3
 8006064:	f04f 0400 	mov.w	r4, #0
 8006068:	f04f 0500 	mov.w	r5, #0
 800606c:	00dd      	lsls	r5, r3, #3
 800606e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006072:	00d4      	lsls	r4, r2, #3
 8006074:	4622      	mov	r2, r4
 8006076:	462b      	mov	r3, r5
 8006078:	1814      	adds	r4, r2, r0
 800607a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800607e:	414b      	adcs	r3, r1
 8006080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	461a      	mov	r2, r3
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	1891      	adds	r1, r2, r2
 8006092:	6339      	str	r1, [r7, #48]	; 0x30
 8006094:	415b      	adcs	r3, r3
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
 8006098:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800609c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060a0:	f7fa fe02 	bl	8000ca8 <__aeabi_uldivmod>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <UART_SetConfig+0x3dc>)
 80060aa:	fba3 1302 	umull	r1, r3, r3, r2
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	2164      	movs	r1, #100	; 0x64
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	3332      	adds	r3, #50	; 0x32
 80060bc:	4a07      	ldr	r2, [pc, #28]	; (80060dc <UART_SetConfig+0x3dc>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	f003 0207 	and.w	r2, r3, #7
 80060c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4432      	add	r2, r6
 80060d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80060d2:	e1a6      	b.n	8006422 <UART_SetConfig+0x722>
 80060d4:	40011000 	.word	0x40011000
 80060d8:	40011400 	.word	0x40011400
 80060dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4bd1      	ldr	r3, [pc, #836]	; (800642c <UART_SetConfig+0x72c>)
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d006      	beq.n	80060fa <UART_SetConfig+0x3fa>
 80060ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4bcf      	ldr	r3, [pc, #828]	; (8006430 <UART_SetConfig+0x730>)
 80060f4:	429a      	cmp	r2, r3
 80060f6:	f040 80ca 	bne.w	800628e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060fa:	f7ff fd9f 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 80060fe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006102:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006106:	461c      	mov	r4, r3
 8006108:	f04f 0500 	mov.w	r5, #0
 800610c:	4622      	mov	r2, r4
 800610e:	462b      	mov	r3, r5
 8006110:	1891      	adds	r1, r2, r2
 8006112:	62b9      	str	r1, [r7, #40]	; 0x28
 8006114:	415b      	adcs	r3, r3
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800611c:	1912      	adds	r2, r2, r4
 800611e:	eb45 0303 	adc.w	r3, r5, r3
 8006122:	f04f 0000 	mov.w	r0, #0
 8006126:	f04f 0100 	mov.w	r1, #0
 800612a:	00d9      	lsls	r1, r3, #3
 800612c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006130:	00d0      	lsls	r0, r2, #3
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	eb12 0a04 	adds.w	sl, r2, r4
 800613a:	eb43 0b05 	adc.w	fp, r3, r5
 800613e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4618      	mov	r0, r3
 8006146:	f04f 0100 	mov.w	r1, #0
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	008b      	lsls	r3, r1, #2
 8006154:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006158:	0082      	lsls	r2, r0, #2
 800615a:	4650      	mov	r0, sl
 800615c:	4659      	mov	r1, fp
 800615e:	f7fa fda3 	bl	8000ca8 <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4bb3      	ldr	r3, [pc, #716]	; (8006434 <UART_SetConfig+0x734>)
 8006168:	fba3 2302 	umull	r2, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	011e      	lsls	r6, r3, #4
 8006170:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006174:	4618      	mov	r0, r3
 8006176:	f04f 0100 	mov.w	r1, #0
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	1894      	adds	r4, r2, r2
 8006180:	623c      	str	r4, [r7, #32]
 8006182:	415b      	adcs	r3, r3
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
 8006186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800618a:	1812      	adds	r2, r2, r0
 800618c:	eb41 0303 	adc.w	r3, r1, r3
 8006190:	f04f 0400 	mov.w	r4, #0
 8006194:	f04f 0500 	mov.w	r5, #0
 8006198:	00dd      	lsls	r5, r3, #3
 800619a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800619e:	00d4      	lsls	r4, r2, #3
 80061a0:	4622      	mov	r2, r4
 80061a2:	462b      	mov	r3, r5
 80061a4:	1814      	adds	r4, r2, r0
 80061a6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80061aa:	414b      	adcs	r3, r1
 80061ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	008b      	lsls	r3, r1, #2
 80061c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061ca:	0082      	lsls	r2, r0, #2
 80061cc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80061d0:	f7fa fd6a 	bl	8000ca8 <__aeabi_uldivmod>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4b96      	ldr	r3, [pc, #600]	; (8006434 <UART_SetConfig+0x734>)
 80061da:	fba3 1302 	umull	r1, r3, r3, r2
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	2164      	movs	r1, #100	; 0x64
 80061e2:	fb01 f303 	mul.w	r3, r1, r3
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	3332      	adds	r3, #50	; 0x32
 80061ec:	4a91      	ldr	r2, [pc, #580]	; (8006434 <UART_SetConfig+0x734>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f8:	441e      	add	r6, r3
 80061fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061fe:	4618      	mov	r0, r3
 8006200:	f04f 0100 	mov.w	r1, #0
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	1894      	adds	r4, r2, r2
 800620a:	61bc      	str	r4, [r7, #24]
 800620c:	415b      	adcs	r3, r3
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006214:	1812      	adds	r2, r2, r0
 8006216:	eb41 0303 	adc.w	r3, r1, r3
 800621a:	f04f 0400 	mov.w	r4, #0
 800621e:	f04f 0500 	mov.w	r5, #0
 8006222:	00dd      	lsls	r5, r3, #3
 8006224:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006228:	00d4      	lsls	r4, r2, #3
 800622a:	4622      	mov	r2, r4
 800622c:	462b      	mov	r3, r5
 800622e:	1814      	adds	r4, r2, r0
 8006230:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006234:	414b      	adcs	r3, r1
 8006236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4618      	mov	r0, r3
 8006242:	f04f 0100 	mov.w	r1, #0
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	008b      	lsls	r3, r1, #2
 8006250:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006254:	0082      	lsls	r2, r0, #2
 8006256:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800625a:	f7fa fd25 	bl	8000ca8 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4b74      	ldr	r3, [pc, #464]	; (8006434 <UART_SetConfig+0x734>)
 8006264:	fba3 1302 	umull	r1, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	2164      	movs	r1, #100	; 0x64
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	3332      	adds	r3, #50	; 0x32
 8006276:	4a6f      	ldr	r2, [pc, #444]	; (8006434 <UART_SetConfig+0x734>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	f003 020f 	and.w	r2, r3, #15
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4432      	add	r2, r6
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	e0c9      	b.n	8006422 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800628e:	f7ff fcc1 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8006292:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006296:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800629a:	461c      	mov	r4, r3
 800629c:	f04f 0500 	mov.w	r5, #0
 80062a0:	4622      	mov	r2, r4
 80062a2:	462b      	mov	r3, r5
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	6139      	str	r1, [r7, #16]
 80062a8:	415b      	adcs	r3, r3
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80062b0:	1912      	adds	r2, r2, r4
 80062b2:	eb45 0303 	adc.w	r3, r5, r3
 80062b6:	f04f 0000 	mov.w	r0, #0
 80062ba:	f04f 0100 	mov.w	r1, #0
 80062be:	00d9      	lsls	r1, r3, #3
 80062c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062c4:	00d0      	lsls	r0, r2, #3
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	eb12 0804 	adds.w	r8, r2, r4
 80062ce:	eb43 0905 	adc.w	r9, r3, r5
 80062d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4618      	mov	r0, r3
 80062da:	f04f 0100 	mov.w	r1, #0
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	008b      	lsls	r3, r1, #2
 80062e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062ec:	0082      	lsls	r2, r0, #2
 80062ee:	4640      	mov	r0, r8
 80062f0:	4649      	mov	r1, r9
 80062f2:	f7fa fcd9 	bl	8000ca8 <__aeabi_uldivmod>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4b4e      	ldr	r3, [pc, #312]	; (8006434 <UART_SetConfig+0x734>)
 80062fc:	fba3 2302 	umull	r2, r3, r3, r2
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	011e      	lsls	r6, r3, #4
 8006304:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006308:	4618      	mov	r0, r3
 800630a:	f04f 0100 	mov.w	r1, #0
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	1894      	adds	r4, r2, r2
 8006314:	60bc      	str	r4, [r7, #8]
 8006316:	415b      	adcs	r3, r3
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800631e:	1812      	adds	r2, r2, r0
 8006320:	eb41 0303 	adc.w	r3, r1, r3
 8006324:	f04f 0400 	mov.w	r4, #0
 8006328:	f04f 0500 	mov.w	r5, #0
 800632c:	00dd      	lsls	r5, r3, #3
 800632e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006332:	00d4      	lsls	r4, r2, #3
 8006334:	4622      	mov	r2, r4
 8006336:	462b      	mov	r3, r5
 8006338:	1814      	adds	r4, r2, r0
 800633a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800633e:	414b      	adcs	r3, r1
 8006340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	f04f 0100 	mov.w	r1, #0
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	008b      	lsls	r3, r1, #2
 800635a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800635e:	0082      	lsls	r2, r0, #2
 8006360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006364:	f7fa fca0 	bl	8000ca8 <__aeabi_uldivmod>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4b31      	ldr	r3, [pc, #196]	; (8006434 <UART_SetConfig+0x734>)
 800636e:	fba3 1302 	umull	r1, r3, r3, r2
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	2164      	movs	r1, #100	; 0x64
 8006376:	fb01 f303 	mul.w	r3, r1, r3
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	3332      	adds	r3, #50	; 0x32
 8006380:	4a2c      	ldr	r2, [pc, #176]	; (8006434 <UART_SetConfig+0x734>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800638c:	441e      	add	r6, r3
 800638e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006392:	4618      	mov	r0, r3
 8006394:	f04f 0100 	mov.w	r1, #0
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	1894      	adds	r4, r2, r2
 800639e:	603c      	str	r4, [r7, #0]
 80063a0:	415b      	adcs	r3, r3
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a8:	1812      	adds	r2, r2, r0
 80063aa:	eb41 0303 	adc.w	r3, r1, r3
 80063ae:	f04f 0400 	mov.w	r4, #0
 80063b2:	f04f 0500 	mov.w	r5, #0
 80063b6:	00dd      	lsls	r5, r3, #3
 80063b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063bc:	00d4      	lsls	r4, r2, #3
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	1814      	adds	r4, r2, r0
 80063c4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80063c8:	414b      	adcs	r3, r1
 80063ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f04f 0100 	mov.w	r1, #0
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	008b      	lsls	r3, r1, #2
 80063e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063e8:	0082      	lsls	r2, r0, #2
 80063ea:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80063ee:	f7fa fc5b 	bl	8000ca8 <__aeabi_uldivmod>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <UART_SetConfig+0x734>)
 80063f8:	fba3 1302 	umull	r1, r3, r3, r2
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	2164      	movs	r1, #100	; 0x64
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	3332      	adds	r3, #50	; 0x32
 800640a:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <UART_SetConfig+0x734>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	f003 020f 	and.w	r2, r3, #15
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4432      	add	r2, r6
 800641e:	609a      	str	r2, [r3, #8]
}
 8006420:	e7ff      	b.n	8006422 <UART_SetConfig+0x722>
 8006422:	bf00      	nop
 8006424:	37f4      	adds	r7, #244	; 0xf4
 8006426:	46bd      	mov	sp, r7
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	40011000 	.word	0x40011000
 8006430:	40011400 	.word	0x40011400
 8006434:	51eb851f 	.word	0x51eb851f

08006438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006438:	b084      	sub	sp, #16
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	f107 001c 	add.w	r0, r7, #28
 8006446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2b01      	cmp	r3, #1
 800644e:	d122      	bne.n	8006496 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647a:	2b01      	cmp	r3, #1
 800647c:	d105      	bne.n	800648a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa56 	bl	800693c <USB_CoreReset>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
 8006494:	e01a      	b.n	80064cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa4a 	bl	800693c <USB_CoreReset>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
 80064be:	e005      	b.n	80064cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10b      	bne.n	80064ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f043 0206 	orr.w	r2, r3, #6
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f6:	b004      	add	sp, #16
 80064f8:	4770      	bx	lr

080064fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d106      	bne.n	8006548 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	e00b      	b.n	8006560 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60da      	str	r2, [r3, #12]
 800655a:	e001      	b.n	8006560 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e003      	b.n	8006568 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006560:	2032      	movs	r0, #50	; 0x32
 8006562:	f7fd f855 	bl	8003610 <HAL_Delay>

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006570:	b084      	sub	sp, #16
 8006572:	b580      	push	{r7, lr}
 8006574:	b086      	sub	sp, #24
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800657e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800658a:	2300      	movs	r3, #0
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	e009      	b.n	80065a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	3340      	adds	r3, #64	; 0x40
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	2200      	movs	r2, #0
 800659c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	3301      	adds	r3, #1
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	2b0e      	cmp	r3, #14
 80065a8:	d9f2      	bls.n	8006590 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d11c      	bne.n	80065ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065be:	f043 0302 	orr.w	r3, r3, #2
 80065c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
 80065e8:	e00b      	b.n	8006602 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006608:	461a      	mov	r2, r3
 800660a:	2300      	movs	r3, #0
 800660c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006614:	4619      	mov	r1, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	461a      	mov	r2, r3
 800661e:	680b      	ldr	r3, [r1, #0]
 8006620:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	2b01      	cmp	r3, #1
 8006626:	d10c      	bne.n	8006642 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800662e:	2100      	movs	r1, #0
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f949 	bl	80068c8 <USB_SetDevSpeed>
 8006636:	e008      	b.n	800664a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006638:	2101      	movs	r1, #1
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f944 	bl	80068c8 <USB_SetDevSpeed>
 8006640:	e003      	b.n	800664a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006642:	2103      	movs	r1, #3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f93f 	bl	80068c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800664a:	2110      	movs	r1, #16
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f8f3 	bl	8006838 <USB_FlushTxFifo>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f911 	bl	8006884 <USB_FlushRxFifo>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006672:	461a      	mov	r2, r3
 8006674:	2300      	movs	r3, #0
 8006676:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667e:	461a      	mov	r2, r3
 8006680:	2300      	movs	r3, #0
 8006682:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668a:	461a      	mov	r2, r3
 800668c:	2300      	movs	r3, #0
 800668e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006690:	2300      	movs	r3, #0
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	e043      	b.n	800671e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ac:	d118      	bne.n	80066e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	461a      	mov	r2, r3
 80066c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	e013      	b.n	80066f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d6:	461a      	mov	r2, r3
 80066d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e008      	b.n	80066f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	461a      	mov	r2, r3
 80066ee:	2300      	movs	r3, #0
 80066f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fe:	461a      	mov	r2, r3
 8006700:	2300      	movs	r3, #0
 8006702:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	461a      	mov	r2, r3
 8006712:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006716:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	3301      	adds	r3, #1
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	429a      	cmp	r2, r3
 8006724:	d3b7      	bcc.n	8006696 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006726:	2300      	movs	r3, #0
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	e043      	b.n	80067b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800673e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006742:	d118      	bne.n	8006776 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	461a      	mov	r2, r3
 8006758:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e013      	b.n	8006788 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	461a      	mov	r2, r3
 800676e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	e008      	b.n	8006788 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006782:	461a      	mov	r2, r3
 8006784:	2300      	movs	r3, #0
 8006786:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	461a      	mov	r2, r3
 8006796:	2300      	movs	r3, #0
 8006798:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	461a      	mov	r2, r3
 80067a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	3301      	adds	r3, #1
 80067b2:	613b      	str	r3, [r7, #16]
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d3b7      	bcc.n	800672c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d105      	bne.n	80067f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f043 0210 	orr.w	r2, r3, #16
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <USB_DevInit+0x2c4>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f043 0208 	orr.w	r2, r3, #8
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800680e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d107      	bne.n	8006824 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800681c:	f043 0304 	orr.w	r3, r3, #4
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006830:	b004      	add	sp, #16
 8006832:	4770      	bx	lr
 8006834:	803c3800 	.word	0x803c3800

08006838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	019b      	lsls	r3, r3, #6
 800684a:	f043 0220 	orr.w	r2, r3, #32
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4a09      	ldr	r2, [pc, #36]	; (8006880 <USB_FlushTxFifo+0x48>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d901      	bls.n	8006864 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e006      	b.n	8006872 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b20      	cmp	r3, #32
 800686e:	d0f0      	beq.n	8006852 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	00030d40 	.word	0x00030d40

08006884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2210      	movs	r2, #16
 8006894:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <USB_FlushRxFifo+0x40>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e006      	b.n	80068b6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0310 	and.w	r3, r3, #16
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d0f0      	beq.n	8006896 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	00030d40 	.word	0x00030d40

080068c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e8:	4313      	orrs	r3, r2
 80068ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006914:	f023 0303 	bic.w	r3, r3, #3
 8006918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006928:	f043 0302 	orr.w	r3, r3, #2
 800692c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <USB_CoreReset+0x64>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d901      	bls.n	800695a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e01b      	b.n	8006992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	daf2      	bge.n	8006948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f043 0201 	orr.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3301      	adds	r3, #1
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <USB_CoreReset+0x64>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d901      	bls.n	8006984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e006      	b.n	8006992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	d0f0      	beq.n	8006972 <USB_CoreReset+0x36>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	00030d40 	.word	0x00030d40

080069a4 <__errno>:
 80069a4:	4b01      	ldr	r3, [pc, #4]	; (80069ac <__errno+0x8>)
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000150 	.word	0x20000150

080069b0 <__libc_init_array>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4d0d      	ldr	r5, [pc, #52]	; (80069e8 <__libc_init_array+0x38>)
 80069b4:	4c0d      	ldr	r4, [pc, #52]	; (80069ec <__libc_init_array+0x3c>)
 80069b6:	1b64      	subs	r4, r4, r5
 80069b8:	10a4      	asrs	r4, r4, #2
 80069ba:	2600      	movs	r6, #0
 80069bc:	42a6      	cmp	r6, r4
 80069be:	d109      	bne.n	80069d4 <__libc_init_array+0x24>
 80069c0:	4d0b      	ldr	r5, [pc, #44]	; (80069f0 <__libc_init_array+0x40>)
 80069c2:	4c0c      	ldr	r4, [pc, #48]	; (80069f4 <__libc_init_array+0x44>)
 80069c4:	f004 fd2c 	bl	800b420 <_init>
 80069c8:	1b64      	subs	r4, r4, r5
 80069ca:	10a4      	asrs	r4, r4, #2
 80069cc:	2600      	movs	r6, #0
 80069ce:	42a6      	cmp	r6, r4
 80069d0:	d105      	bne.n	80069de <__libc_init_array+0x2e>
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d8:	4798      	blx	r3
 80069da:	3601      	adds	r6, #1
 80069dc:	e7ee      	b.n	80069bc <__libc_init_array+0xc>
 80069de:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e2:	4798      	blx	r3
 80069e4:	3601      	adds	r6, #1
 80069e6:	e7f2      	b.n	80069ce <__libc_init_array+0x1e>
 80069e8:	0800e2dc 	.word	0x0800e2dc
 80069ec:	0800e2dc 	.word	0x0800e2dc
 80069f0:	0800e2dc 	.word	0x0800e2dc
 80069f4:	0800e2e0 	.word	0x0800e2e0

080069f8 <memset>:
 80069f8:	4402      	add	r2, r0
 80069fa:	4603      	mov	r3, r0
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d100      	bne.n	8006a02 <memset+0xa>
 8006a00:	4770      	bx	lr
 8006a02:	f803 1b01 	strb.w	r1, [r3], #1
 8006a06:	e7f9      	b.n	80069fc <memset+0x4>

08006a08 <__cvt>:
 8006a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0c:	ec55 4b10 	vmov	r4, r5, d0
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	460e      	mov	r6, r1
 8006a14:	4619      	mov	r1, r3
 8006a16:	462b      	mov	r3, r5
 8006a18:	bfbb      	ittet	lt
 8006a1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a1e:	461d      	movlt	r5, r3
 8006a20:	2300      	movge	r3, #0
 8006a22:	232d      	movlt	r3, #45	; 0x2d
 8006a24:	700b      	strb	r3, [r1, #0]
 8006a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a2c:	4691      	mov	r9, r2
 8006a2e:	f023 0820 	bic.w	r8, r3, #32
 8006a32:	bfbc      	itt	lt
 8006a34:	4622      	movlt	r2, r4
 8006a36:	4614      	movlt	r4, r2
 8006a38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a3c:	d005      	beq.n	8006a4a <__cvt+0x42>
 8006a3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a42:	d100      	bne.n	8006a46 <__cvt+0x3e>
 8006a44:	3601      	adds	r6, #1
 8006a46:	2102      	movs	r1, #2
 8006a48:	e000      	b.n	8006a4c <__cvt+0x44>
 8006a4a:	2103      	movs	r1, #3
 8006a4c:	ab03      	add	r3, sp, #12
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	ab02      	add	r3, sp, #8
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	ec45 4b10 	vmov	d0, r4, r5
 8006a58:	4653      	mov	r3, sl
 8006a5a:	4632      	mov	r2, r6
 8006a5c:	f001 fdb4 	bl	80085c8 <_dtoa_r>
 8006a60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a64:	4607      	mov	r7, r0
 8006a66:	d102      	bne.n	8006a6e <__cvt+0x66>
 8006a68:	f019 0f01 	tst.w	r9, #1
 8006a6c:	d022      	beq.n	8006ab4 <__cvt+0xac>
 8006a6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a72:	eb07 0906 	add.w	r9, r7, r6
 8006a76:	d110      	bne.n	8006a9a <__cvt+0x92>
 8006a78:	783b      	ldrb	r3, [r7, #0]
 8006a7a:	2b30      	cmp	r3, #48	; 0x30
 8006a7c:	d10a      	bne.n	8006a94 <__cvt+0x8c>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2300      	movs	r3, #0
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7fa f82f 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a8a:	b918      	cbnz	r0, 8006a94 <__cvt+0x8c>
 8006a8c:	f1c6 0601 	rsb	r6, r6, #1
 8006a90:	f8ca 6000 	str.w	r6, [sl]
 8006a94:	f8da 3000 	ldr.w	r3, [sl]
 8006a98:	4499      	add	r9, r3
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7fa f821 	bl	8000ae8 <__aeabi_dcmpeq>
 8006aa6:	b108      	cbz	r0, 8006aac <__cvt+0xa4>
 8006aa8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006aac:	2230      	movs	r2, #48	; 0x30
 8006aae:	9b03      	ldr	r3, [sp, #12]
 8006ab0:	454b      	cmp	r3, r9
 8006ab2:	d307      	bcc.n	8006ac4 <__cvt+0xbc>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ab8:	1bdb      	subs	r3, r3, r7
 8006aba:	4638      	mov	r0, r7
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	b004      	add	sp, #16
 8006ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac4:	1c59      	adds	r1, r3, #1
 8006ac6:	9103      	str	r1, [sp, #12]
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	e7f0      	b.n	8006aae <__cvt+0xa6>

08006acc <__exponent>:
 8006acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	bfb8      	it	lt
 8006ad4:	4249      	neglt	r1, r1
 8006ad6:	f803 2b02 	strb.w	r2, [r3], #2
 8006ada:	bfb4      	ite	lt
 8006adc:	222d      	movlt	r2, #45	; 0x2d
 8006ade:	222b      	movge	r2, #43	; 0x2b
 8006ae0:	2909      	cmp	r1, #9
 8006ae2:	7042      	strb	r2, [r0, #1]
 8006ae4:	dd2a      	ble.n	8006b3c <__exponent+0x70>
 8006ae6:	f10d 0407 	add.w	r4, sp, #7
 8006aea:	46a4      	mov	ip, r4
 8006aec:	270a      	movs	r7, #10
 8006aee:	46a6      	mov	lr, r4
 8006af0:	460a      	mov	r2, r1
 8006af2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006af6:	fb07 1516 	mls	r5, r7, r6, r1
 8006afa:	3530      	adds	r5, #48	; 0x30
 8006afc:	2a63      	cmp	r2, #99	; 0x63
 8006afe:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b06:	4631      	mov	r1, r6
 8006b08:	dcf1      	bgt.n	8006aee <__exponent+0x22>
 8006b0a:	3130      	adds	r1, #48	; 0x30
 8006b0c:	f1ae 0502 	sub.w	r5, lr, #2
 8006b10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b14:	1c44      	adds	r4, r0, #1
 8006b16:	4629      	mov	r1, r5
 8006b18:	4561      	cmp	r1, ip
 8006b1a:	d30a      	bcc.n	8006b32 <__exponent+0x66>
 8006b1c:	f10d 0209 	add.w	r2, sp, #9
 8006b20:	eba2 020e 	sub.w	r2, r2, lr
 8006b24:	4565      	cmp	r5, ip
 8006b26:	bf88      	it	hi
 8006b28:	2200      	movhi	r2, #0
 8006b2a:	4413      	add	r3, r2
 8006b2c:	1a18      	subs	r0, r3, r0
 8006b2e:	b003      	add	sp, #12
 8006b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b3a:	e7ed      	b.n	8006b18 <__exponent+0x4c>
 8006b3c:	2330      	movs	r3, #48	; 0x30
 8006b3e:	3130      	adds	r1, #48	; 0x30
 8006b40:	7083      	strb	r3, [r0, #2]
 8006b42:	70c1      	strb	r1, [r0, #3]
 8006b44:	1d03      	adds	r3, r0, #4
 8006b46:	e7f1      	b.n	8006b2c <__exponent+0x60>

08006b48 <_printf_float>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	ed2d 8b02 	vpush	{d8}
 8006b50:	b08d      	sub	sp, #52	; 0x34
 8006b52:	460c      	mov	r4, r1
 8006b54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b58:	4616      	mov	r6, r2
 8006b5a:	461f      	mov	r7, r3
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	f002 fe8f 	bl	8009880 <_localeconv_r>
 8006b62:	f8d0 a000 	ldr.w	sl, [r0]
 8006b66:	4650      	mov	r0, sl
 8006b68:	f7f9 fb42 	bl	80001f0 <strlen>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	9305      	str	r3, [sp, #20]
 8006b74:	f8d8 3000 	ldr.w	r3, [r8]
 8006b78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b7c:	3307      	adds	r3, #7
 8006b7e:	f023 0307 	bic.w	r3, r3, #7
 8006b82:	f103 0208 	add.w	r2, r3, #8
 8006b86:	f8c8 2000 	str.w	r2, [r8]
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b9a:	9307      	str	r3, [sp, #28]
 8006b9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ba0:	ee08 0a10 	vmov	s16, r0
 8006ba4:	4b9f      	ldr	r3, [pc, #636]	; (8006e24 <_printf_float+0x2dc>)
 8006ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006baa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bae:	f7f9 ffcd 	bl	8000b4c <__aeabi_dcmpun>
 8006bb2:	bb88      	cbnz	r0, 8006c18 <_printf_float+0xd0>
 8006bb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb8:	4b9a      	ldr	r3, [pc, #616]	; (8006e24 <_printf_float+0x2dc>)
 8006bba:	f04f 32ff 	mov.w	r2, #4294967295
 8006bbe:	f7f9 ffa7 	bl	8000b10 <__aeabi_dcmple>
 8006bc2:	bb48      	cbnz	r0, 8006c18 <_printf_float+0xd0>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4640      	mov	r0, r8
 8006bca:	4649      	mov	r1, r9
 8006bcc:	f7f9 ff96 	bl	8000afc <__aeabi_dcmplt>
 8006bd0:	b110      	cbz	r0, 8006bd8 <_printf_float+0x90>
 8006bd2:	232d      	movs	r3, #45	; 0x2d
 8006bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd8:	4b93      	ldr	r3, [pc, #588]	; (8006e28 <_printf_float+0x2e0>)
 8006bda:	4894      	ldr	r0, [pc, #592]	; (8006e2c <_printf_float+0x2e4>)
 8006bdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006be0:	bf94      	ite	ls
 8006be2:	4698      	movls	r8, r3
 8006be4:	4680      	movhi	r8, r0
 8006be6:	2303      	movs	r3, #3
 8006be8:	6123      	str	r3, [r4, #16]
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	f023 0204 	bic.w	r2, r3, #4
 8006bf0:	6022      	str	r2, [r4, #0]
 8006bf2:	f04f 0900 	mov.w	r9, #0
 8006bf6:	9700      	str	r7, [sp, #0]
 8006bf8:	4633      	mov	r3, r6
 8006bfa:	aa0b      	add	r2, sp, #44	; 0x2c
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 f9d8 	bl	8006fb4 <_printf_common>
 8006c04:	3001      	adds	r0, #1
 8006c06:	f040 8090 	bne.w	8006d2a <_printf_float+0x1e2>
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0e:	b00d      	add	sp, #52	; 0x34
 8006c10:	ecbd 8b02 	vpop	{d8}
 8006c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c18:	4642      	mov	r2, r8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	4649      	mov	r1, r9
 8006c20:	f7f9 ff94 	bl	8000b4c <__aeabi_dcmpun>
 8006c24:	b140      	cbz	r0, 8006c38 <_printf_float+0xf0>
 8006c26:	464b      	mov	r3, r9
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bfbc      	itt	lt
 8006c2c:	232d      	movlt	r3, #45	; 0x2d
 8006c2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c32:	487f      	ldr	r0, [pc, #508]	; (8006e30 <_printf_float+0x2e8>)
 8006c34:	4b7f      	ldr	r3, [pc, #508]	; (8006e34 <_printf_float+0x2ec>)
 8006c36:	e7d1      	b.n	8006bdc <_printf_float+0x94>
 8006c38:	6863      	ldr	r3, [r4, #4]
 8006c3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c3e:	9206      	str	r2, [sp, #24]
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	d13f      	bne.n	8006cc4 <_printf_float+0x17c>
 8006c44:	2306      	movs	r3, #6
 8006c46:	6063      	str	r3, [r4, #4]
 8006c48:	9b05      	ldr	r3, [sp, #20]
 8006c4a:	6861      	ldr	r1, [r4, #4]
 8006c4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c50:	2300      	movs	r3, #0
 8006c52:	9303      	str	r3, [sp, #12]
 8006c54:	ab0a      	add	r3, sp, #40	; 0x28
 8006c56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c5a:	ab09      	add	r3, sp, #36	; 0x24
 8006c5c:	ec49 8b10 	vmov	d0, r8, r9
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	6022      	str	r2, [r4, #0]
 8006c64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c68:	4628      	mov	r0, r5
 8006c6a:	f7ff fecd 	bl	8006a08 <__cvt>
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c72:	2b47      	cmp	r3, #71	; 0x47
 8006c74:	4680      	mov	r8, r0
 8006c76:	d108      	bne.n	8006c8a <_printf_float+0x142>
 8006c78:	1cc8      	adds	r0, r1, #3
 8006c7a:	db02      	blt.n	8006c82 <_printf_float+0x13a>
 8006c7c:	6863      	ldr	r3, [r4, #4]
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	dd41      	ble.n	8006d06 <_printf_float+0x1be>
 8006c82:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c86:	fa5f fb8b 	uxtb.w	fp, fp
 8006c8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c8e:	d820      	bhi.n	8006cd2 <_printf_float+0x18a>
 8006c90:	3901      	subs	r1, #1
 8006c92:	465a      	mov	r2, fp
 8006c94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c98:	9109      	str	r1, [sp, #36]	; 0x24
 8006c9a:	f7ff ff17 	bl	8006acc <__exponent>
 8006c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ca0:	1813      	adds	r3, r2, r0
 8006ca2:	2a01      	cmp	r2, #1
 8006ca4:	4681      	mov	r9, r0
 8006ca6:	6123      	str	r3, [r4, #16]
 8006ca8:	dc02      	bgt.n	8006cb0 <_printf_float+0x168>
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	07d2      	lsls	r2, r2, #31
 8006cae:	d501      	bpl.n	8006cb4 <_printf_float+0x16c>
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	6123      	str	r3, [r4, #16]
 8006cb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d09c      	beq.n	8006bf6 <_printf_float+0xae>
 8006cbc:	232d      	movs	r3, #45	; 0x2d
 8006cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc2:	e798      	b.n	8006bf6 <_printf_float+0xae>
 8006cc4:	9a06      	ldr	r2, [sp, #24]
 8006cc6:	2a47      	cmp	r2, #71	; 0x47
 8006cc8:	d1be      	bne.n	8006c48 <_printf_float+0x100>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1bc      	bne.n	8006c48 <_printf_float+0x100>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e7b9      	b.n	8006c46 <_printf_float+0xfe>
 8006cd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cd6:	d118      	bne.n	8006d0a <_printf_float+0x1c2>
 8006cd8:	2900      	cmp	r1, #0
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	dd0b      	ble.n	8006cf6 <_printf_float+0x1ae>
 8006cde:	6121      	str	r1, [r4, #16]
 8006ce0:	b913      	cbnz	r3, 8006ce8 <_printf_float+0x1a0>
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	07d0      	lsls	r0, r2, #31
 8006ce6:	d502      	bpl.n	8006cee <_printf_float+0x1a6>
 8006ce8:	3301      	adds	r3, #1
 8006cea:	440b      	add	r3, r1
 8006cec:	6123      	str	r3, [r4, #16]
 8006cee:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cf0:	f04f 0900 	mov.w	r9, #0
 8006cf4:	e7de      	b.n	8006cb4 <_printf_float+0x16c>
 8006cf6:	b913      	cbnz	r3, 8006cfe <_printf_float+0x1b6>
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	07d2      	lsls	r2, r2, #31
 8006cfc:	d501      	bpl.n	8006d02 <_printf_float+0x1ba>
 8006cfe:	3302      	adds	r3, #2
 8006d00:	e7f4      	b.n	8006cec <_printf_float+0x1a4>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e7f2      	b.n	8006cec <_printf_float+0x1a4>
 8006d06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d0c:	4299      	cmp	r1, r3
 8006d0e:	db05      	blt.n	8006d1c <_printf_float+0x1d4>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	6121      	str	r1, [r4, #16]
 8006d14:	07d8      	lsls	r0, r3, #31
 8006d16:	d5ea      	bpl.n	8006cee <_printf_float+0x1a6>
 8006d18:	1c4b      	adds	r3, r1, #1
 8006d1a:	e7e7      	b.n	8006cec <_printf_float+0x1a4>
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	bfd4      	ite	le
 8006d20:	f1c1 0202 	rsble	r2, r1, #2
 8006d24:	2201      	movgt	r2, #1
 8006d26:	4413      	add	r3, r2
 8006d28:	e7e0      	b.n	8006cec <_printf_float+0x1a4>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	055a      	lsls	r2, r3, #21
 8006d2e:	d407      	bmi.n	8006d40 <_printf_float+0x1f8>
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	4642      	mov	r2, r8
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d12c      	bne.n	8006d98 <_printf_float+0x250>
 8006d3e:	e764      	b.n	8006c0a <_printf_float+0xc2>
 8006d40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d44:	f240 80e0 	bls.w	8006f08 <_printf_float+0x3c0>
 8006d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f7f9 feca 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d034      	beq.n	8006dc2 <_printf_float+0x27a>
 8006d58:	4a37      	ldr	r2, [pc, #220]	; (8006e38 <_printf_float+0x2f0>)
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	f43f af51 	beq.w	8006c0a <_printf_float+0xc2>
 8006d68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	db02      	blt.n	8006d76 <_printf_float+0x22e>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	07d8      	lsls	r0, r3, #31
 8006d74:	d510      	bpl.n	8006d98 <_printf_float+0x250>
 8006d76:	ee18 3a10 	vmov	r3, s16
 8006d7a:	4652      	mov	r2, sl
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	47b8      	blx	r7
 8006d82:	3001      	adds	r0, #1
 8006d84:	f43f af41 	beq.w	8006c0a <_printf_float+0xc2>
 8006d88:	f04f 0800 	mov.w	r8, #0
 8006d8c:	f104 091a 	add.w	r9, r4, #26
 8006d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d92:	3b01      	subs	r3, #1
 8006d94:	4543      	cmp	r3, r8
 8006d96:	dc09      	bgt.n	8006dac <_printf_float+0x264>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	079b      	lsls	r3, r3, #30
 8006d9c:	f100 8105 	bmi.w	8006faa <_printf_float+0x462>
 8006da0:	68e0      	ldr	r0, [r4, #12]
 8006da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da4:	4298      	cmp	r0, r3
 8006da6:	bfb8      	it	lt
 8006da8:	4618      	movlt	r0, r3
 8006daa:	e730      	b.n	8006c0e <_printf_float+0xc6>
 8006dac:	2301      	movs	r3, #1
 8006dae:	464a      	mov	r2, r9
 8006db0:	4631      	mov	r1, r6
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b8      	blx	r7
 8006db6:	3001      	adds	r0, #1
 8006db8:	f43f af27 	beq.w	8006c0a <_printf_float+0xc2>
 8006dbc:	f108 0801 	add.w	r8, r8, #1
 8006dc0:	e7e6      	b.n	8006d90 <_printf_float+0x248>
 8006dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dc39      	bgt.n	8006e3c <_printf_float+0x2f4>
 8006dc8:	4a1b      	ldr	r2, [pc, #108]	; (8006e38 <_printf_float+0x2f0>)
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4628      	mov	r0, r5
 8006dd0:	47b8      	blx	r7
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	f43f af19 	beq.w	8006c0a <_printf_float+0xc2>
 8006dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	d102      	bne.n	8006de6 <_printf_float+0x29e>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	07d9      	lsls	r1, r3, #31
 8006de4:	d5d8      	bpl.n	8006d98 <_printf_float+0x250>
 8006de6:	ee18 3a10 	vmov	r3, s16
 8006dea:	4652      	mov	r2, sl
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	f43f af09 	beq.w	8006c0a <_printf_float+0xc2>
 8006df8:	f04f 0900 	mov.w	r9, #0
 8006dfc:	f104 0a1a 	add.w	sl, r4, #26
 8006e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e02:	425b      	negs	r3, r3
 8006e04:	454b      	cmp	r3, r9
 8006e06:	dc01      	bgt.n	8006e0c <_printf_float+0x2c4>
 8006e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0a:	e792      	b.n	8006d32 <_printf_float+0x1ea>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	4652      	mov	r2, sl
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	f43f aef7 	beq.w	8006c0a <_printf_float+0xc2>
 8006e1c:	f109 0901 	add.w	r9, r9, #1
 8006e20:	e7ee      	b.n	8006e00 <_printf_float+0x2b8>
 8006e22:	bf00      	nop
 8006e24:	7fefffff 	.word	0x7fefffff
 8006e28:	0800de24 	.word	0x0800de24
 8006e2c:	0800de28 	.word	0x0800de28
 8006e30:	0800de30 	.word	0x0800de30
 8006e34:	0800de2c 	.word	0x0800de2c
 8006e38:	0800de34 	.word	0x0800de34
 8006e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e40:	429a      	cmp	r2, r3
 8006e42:	bfa8      	it	ge
 8006e44:	461a      	movge	r2, r3
 8006e46:	2a00      	cmp	r2, #0
 8006e48:	4691      	mov	r9, r2
 8006e4a:	dc37      	bgt.n	8006ebc <_printf_float+0x374>
 8006e4c:	f04f 0b00 	mov.w	fp, #0
 8006e50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e54:	f104 021a 	add.w	r2, r4, #26
 8006e58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e5a:	9305      	str	r3, [sp, #20]
 8006e5c:	eba3 0309 	sub.w	r3, r3, r9
 8006e60:	455b      	cmp	r3, fp
 8006e62:	dc33      	bgt.n	8006ecc <_printf_float+0x384>
 8006e64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	db3b      	blt.n	8006ee4 <_printf_float+0x39c>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	07da      	lsls	r2, r3, #31
 8006e70:	d438      	bmi.n	8006ee4 <_printf_float+0x39c>
 8006e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e74:	9b05      	ldr	r3, [sp, #20]
 8006e76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	eba2 0901 	sub.w	r9, r2, r1
 8006e7e:	4599      	cmp	r9, r3
 8006e80:	bfa8      	it	ge
 8006e82:	4699      	movge	r9, r3
 8006e84:	f1b9 0f00 	cmp.w	r9, #0
 8006e88:	dc35      	bgt.n	8006ef6 <_printf_float+0x3ae>
 8006e8a:	f04f 0800 	mov.w	r8, #0
 8006e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e92:	f104 0a1a 	add.w	sl, r4, #26
 8006e96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e9a:	1a9b      	subs	r3, r3, r2
 8006e9c:	eba3 0309 	sub.w	r3, r3, r9
 8006ea0:	4543      	cmp	r3, r8
 8006ea2:	f77f af79 	ble.w	8006d98 <_printf_float+0x250>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4652      	mov	r2, sl
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f aeaa 	beq.w	8006c0a <_printf_float+0xc2>
 8006eb6:	f108 0801 	add.w	r8, r8, #1
 8006eba:	e7ec      	b.n	8006e96 <_printf_float+0x34e>
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	47b8      	blx	r7
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d1c0      	bne.n	8006e4c <_printf_float+0x304>
 8006eca:	e69e      	b.n	8006c0a <_printf_float+0xc2>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	9205      	str	r2, [sp, #20]
 8006ed4:	47b8      	blx	r7
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f43f ae97 	beq.w	8006c0a <_printf_float+0xc2>
 8006edc:	9a05      	ldr	r2, [sp, #20]
 8006ede:	f10b 0b01 	add.w	fp, fp, #1
 8006ee2:	e7b9      	b.n	8006e58 <_printf_float+0x310>
 8006ee4:	ee18 3a10 	vmov	r3, s16
 8006ee8:	4652      	mov	r2, sl
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d1be      	bne.n	8006e72 <_printf_float+0x32a>
 8006ef4:	e689      	b.n	8006c0a <_printf_float+0xc2>
 8006ef6:	9a05      	ldr	r2, [sp, #20]
 8006ef8:	464b      	mov	r3, r9
 8006efa:	4442      	add	r2, r8
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	d1c1      	bne.n	8006e8a <_printf_float+0x342>
 8006f06:	e680      	b.n	8006c0a <_printf_float+0xc2>
 8006f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f0a:	2a01      	cmp	r2, #1
 8006f0c:	dc01      	bgt.n	8006f12 <_printf_float+0x3ca>
 8006f0e:	07db      	lsls	r3, r3, #31
 8006f10:	d538      	bpl.n	8006f84 <_printf_float+0x43c>
 8006f12:	2301      	movs	r3, #1
 8006f14:	4642      	mov	r2, r8
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f43f ae74 	beq.w	8006c0a <_printf_float+0xc2>
 8006f22:	ee18 3a10 	vmov	r3, s16
 8006f26:	4652      	mov	r2, sl
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f ae6b 	beq.w	8006c0a <_printf_float+0xc2>
 8006f34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f7f9 fdd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f40:	b9d8      	cbnz	r0, 8006f7a <_printf_float+0x432>
 8006f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f44:	f108 0201 	add.w	r2, r8, #1
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b8      	blx	r7
 8006f50:	3001      	adds	r0, #1
 8006f52:	d10e      	bne.n	8006f72 <_printf_float+0x42a>
 8006f54:	e659      	b.n	8006c0a <_printf_float+0xc2>
 8006f56:	2301      	movs	r3, #1
 8006f58:	4652      	mov	r2, sl
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	f43f ae52 	beq.w	8006c0a <_printf_float+0xc2>
 8006f66:	f108 0801 	add.w	r8, r8, #1
 8006f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	4543      	cmp	r3, r8
 8006f70:	dcf1      	bgt.n	8006f56 <_printf_float+0x40e>
 8006f72:	464b      	mov	r3, r9
 8006f74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f78:	e6dc      	b.n	8006d34 <_printf_float+0x1ec>
 8006f7a:	f04f 0800 	mov.w	r8, #0
 8006f7e:	f104 0a1a 	add.w	sl, r4, #26
 8006f82:	e7f2      	b.n	8006f6a <_printf_float+0x422>
 8006f84:	2301      	movs	r3, #1
 8006f86:	4642      	mov	r2, r8
 8006f88:	e7df      	b.n	8006f4a <_printf_float+0x402>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	464a      	mov	r2, r9
 8006f8e:	4631      	mov	r1, r6
 8006f90:	4628      	mov	r0, r5
 8006f92:	47b8      	blx	r7
 8006f94:	3001      	adds	r0, #1
 8006f96:	f43f ae38 	beq.w	8006c0a <_printf_float+0xc2>
 8006f9a:	f108 0801 	add.w	r8, r8, #1
 8006f9e:	68e3      	ldr	r3, [r4, #12]
 8006fa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fa2:	1a5b      	subs	r3, r3, r1
 8006fa4:	4543      	cmp	r3, r8
 8006fa6:	dcf0      	bgt.n	8006f8a <_printf_float+0x442>
 8006fa8:	e6fa      	b.n	8006da0 <_printf_float+0x258>
 8006faa:	f04f 0800 	mov.w	r8, #0
 8006fae:	f104 0919 	add.w	r9, r4, #25
 8006fb2:	e7f4      	b.n	8006f9e <_printf_float+0x456>

08006fb4 <_printf_common>:
 8006fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	4616      	mov	r6, r2
 8006fba:	4699      	mov	r9, r3
 8006fbc:	688a      	ldr	r2, [r1, #8]
 8006fbe:	690b      	ldr	r3, [r1, #16]
 8006fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	bfb8      	it	lt
 8006fc8:	4613      	movlt	r3, r2
 8006fca:	6033      	str	r3, [r6, #0]
 8006fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	b10a      	cbz	r2, 8006fda <_printf_common+0x26>
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	6033      	str	r3, [r6, #0]
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	0699      	lsls	r1, r3, #26
 8006fde:	bf42      	ittt	mi
 8006fe0:	6833      	ldrmi	r3, [r6, #0]
 8006fe2:	3302      	addmi	r3, #2
 8006fe4:	6033      	strmi	r3, [r6, #0]
 8006fe6:	6825      	ldr	r5, [r4, #0]
 8006fe8:	f015 0506 	ands.w	r5, r5, #6
 8006fec:	d106      	bne.n	8006ffc <_printf_common+0x48>
 8006fee:	f104 0a19 	add.w	sl, r4, #25
 8006ff2:	68e3      	ldr	r3, [r4, #12]
 8006ff4:	6832      	ldr	r2, [r6, #0]
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	42ab      	cmp	r3, r5
 8006ffa:	dc26      	bgt.n	800704a <_printf_common+0x96>
 8006ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007000:	1e13      	subs	r3, r2, #0
 8007002:	6822      	ldr	r2, [r4, #0]
 8007004:	bf18      	it	ne
 8007006:	2301      	movne	r3, #1
 8007008:	0692      	lsls	r2, r2, #26
 800700a:	d42b      	bmi.n	8007064 <_printf_common+0xb0>
 800700c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007010:	4649      	mov	r1, r9
 8007012:	4638      	mov	r0, r7
 8007014:	47c0      	blx	r8
 8007016:	3001      	adds	r0, #1
 8007018:	d01e      	beq.n	8007058 <_printf_common+0xa4>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	68e5      	ldr	r5, [r4, #12]
 800701e:	6832      	ldr	r2, [r6, #0]
 8007020:	f003 0306 	and.w	r3, r3, #6
 8007024:	2b04      	cmp	r3, #4
 8007026:	bf08      	it	eq
 8007028:	1aad      	subeq	r5, r5, r2
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	6922      	ldr	r2, [r4, #16]
 800702e:	bf0c      	ite	eq
 8007030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007034:	2500      	movne	r5, #0
 8007036:	4293      	cmp	r3, r2
 8007038:	bfc4      	itt	gt
 800703a:	1a9b      	subgt	r3, r3, r2
 800703c:	18ed      	addgt	r5, r5, r3
 800703e:	2600      	movs	r6, #0
 8007040:	341a      	adds	r4, #26
 8007042:	42b5      	cmp	r5, r6
 8007044:	d11a      	bne.n	800707c <_printf_common+0xc8>
 8007046:	2000      	movs	r0, #0
 8007048:	e008      	b.n	800705c <_printf_common+0xa8>
 800704a:	2301      	movs	r3, #1
 800704c:	4652      	mov	r2, sl
 800704e:	4649      	mov	r1, r9
 8007050:	4638      	mov	r0, r7
 8007052:	47c0      	blx	r8
 8007054:	3001      	adds	r0, #1
 8007056:	d103      	bne.n	8007060 <_printf_common+0xac>
 8007058:	f04f 30ff 	mov.w	r0, #4294967295
 800705c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007060:	3501      	adds	r5, #1
 8007062:	e7c6      	b.n	8006ff2 <_printf_common+0x3e>
 8007064:	18e1      	adds	r1, r4, r3
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	2030      	movs	r0, #48	; 0x30
 800706a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800706e:	4422      	add	r2, r4
 8007070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007078:	3302      	adds	r3, #2
 800707a:	e7c7      	b.n	800700c <_printf_common+0x58>
 800707c:	2301      	movs	r3, #1
 800707e:	4622      	mov	r2, r4
 8007080:	4649      	mov	r1, r9
 8007082:	4638      	mov	r0, r7
 8007084:	47c0      	blx	r8
 8007086:	3001      	adds	r0, #1
 8007088:	d0e6      	beq.n	8007058 <_printf_common+0xa4>
 800708a:	3601      	adds	r6, #1
 800708c:	e7d9      	b.n	8007042 <_printf_common+0x8e>
	...

08007090 <_printf_i>:
 8007090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007094:	460c      	mov	r4, r1
 8007096:	4691      	mov	r9, r2
 8007098:	7e27      	ldrb	r7, [r4, #24]
 800709a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800709c:	2f78      	cmp	r7, #120	; 0x78
 800709e:	4680      	mov	r8, r0
 80070a0:	469a      	mov	sl, r3
 80070a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070a6:	d807      	bhi.n	80070b8 <_printf_i+0x28>
 80070a8:	2f62      	cmp	r7, #98	; 0x62
 80070aa:	d80a      	bhi.n	80070c2 <_printf_i+0x32>
 80070ac:	2f00      	cmp	r7, #0
 80070ae:	f000 80d8 	beq.w	8007262 <_printf_i+0x1d2>
 80070b2:	2f58      	cmp	r7, #88	; 0x58
 80070b4:	f000 80a3 	beq.w	80071fe <_printf_i+0x16e>
 80070b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070c0:	e03a      	b.n	8007138 <_printf_i+0xa8>
 80070c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070c6:	2b15      	cmp	r3, #21
 80070c8:	d8f6      	bhi.n	80070b8 <_printf_i+0x28>
 80070ca:	a001      	add	r0, pc, #4	; (adr r0, 80070d0 <_printf_i+0x40>)
 80070cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070d0:	08007129 	.word	0x08007129
 80070d4:	0800713d 	.word	0x0800713d
 80070d8:	080070b9 	.word	0x080070b9
 80070dc:	080070b9 	.word	0x080070b9
 80070e0:	080070b9 	.word	0x080070b9
 80070e4:	080070b9 	.word	0x080070b9
 80070e8:	0800713d 	.word	0x0800713d
 80070ec:	080070b9 	.word	0x080070b9
 80070f0:	080070b9 	.word	0x080070b9
 80070f4:	080070b9 	.word	0x080070b9
 80070f8:	080070b9 	.word	0x080070b9
 80070fc:	08007249 	.word	0x08007249
 8007100:	0800716d 	.word	0x0800716d
 8007104:	0800722b 	.word	0x0800722b
 8007108:	080070b9 	.word	0x080070b9
 800710c:	080070b9 	.word	0x080070b9
 8007110:	0800726b 	.word	0x0800726b
 8007114:	080070b9 	.word	0x080070b9
 8007118:	0800716d 	.word	0x0800716d
 800711c:	080070b9 	.word	0x080070b9
 8007120:	080070b9 	.word	0x080070b9
 8007124:	08007233 	.word	0x08007233
 8007128:	680b      	ldr	r3, [r1, #0]
 800712a:	1d1a      	adds	r2, r3, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	600a      	str	r2, [r1, #0]
 8007130:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007138:	2301      	movs	r3, #1
 800713a:	e0a3      	b.n	8007284 <_printf_i+0x1f4>
 800713c:	6825      	ldr	r5, [r4, #0]
 800713e:	6808      	ldr	r0, [r1, #0]
 8007140:	062e      	lsls	r6, r5, #24
 8007142:	f100 0304 	add.w	r3, r0, #4
 8007146:	d50a      	bpl.n	800715e <_printf_i+0xce>
 8007148:	6805      	ldr	r5, [r0, #0]
 800714a:	600b      	str	r3, [r1, #0]
 800714c:	2d00      	cmp	r5, #0
 800714e:	da03      	bge.n	8007158 <_printf_i+0xc8>
 8007150:	232d      	movs	r3, #45	; 0x2d
 8007152:	426d      	negs	r5, r5
 8007154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007158:	485e      	ldr	r0, [pc, #376]	; (80072d4 <_printf_i+0x244>)
 800715a:	230a      	movs	r3, #10
 800715c:	e019      	b.n	8007192 <_printf_i+0x102>
 800715e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007162:	6805      	ldr	r5, [r0, #0]
 8007164:	600b      	str	r3, [r1, #0]
 8007166:	bf18      	it	ne
 8007168:	b22d      	sxthne	r5, r5
 800716a:	e7ef      	b.n	800714c <_printf_i+0xbc>
 800716c:	680b      	ldr	r3, [r1, #0]
 800716e:	6825      	ldr	r5, [r4, #0]
 8007170:	1d18      	adds	r0, r3, #4
 8007172:	6008      	str	r0, [r1, #0]
 8007174:	0628      	lsls	r0, r5, #24
 8007176:	d501      	bpl.n	800717c <_printf_i+0xec>
 8007178:	681d      	ldr	r5, [r3, #0]
 800717a:	e002      	b.n	8007182 <_printf_i+0xf2>
 800717c:	0669      	lsls	r1, r5, #25
 800717e:	d5fb      	bpl.n	8007178 <_printf_i+0xe8>
 8007180:	881d      	ldrh	r5, [r3, #0]
 8007182:	4854      	ldr	r0, [pc, #336]	; (80072d4 <_printf_i+0x244>)
 8007184:	2f6f      	cmp	r7, #111	; 0x6f
 8007186:	bf0c      	ite	eq
 8007188:	2308      	moveq	r3, #8
 800718a:	230a      	movne	r3, #10
 800718c:	2100      	movs	r1, #0
 800718e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007192:	6866      	ldr	r6, [r4, #4]
 8007194:	60a6      	str	r6, [r4, #8]
 8007196:	2e00      	cmp	r6, #0
 8007198:	bfa2      	ittt	ge
 800719a:	6821      	ldrge	r1, [r4, #0]
 800719c:	f021 0104 	bicge.w	r1, r1, #4
 80071a0:	6021      	strge	r1, [r4, #0]
 80071a2:	b90d      	cbnz	r5, 80071a8 <_printf_i+0x118>
 80071a4:	2e00      	cmp	r6, #0
 80071a6:	d04d      	beq.n	8007244 <_printf_i+0x1b4>
 80071a8:	4616      	mov	r6, r2
 80071aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80071ae:	fb03 5711 	mls	r7, r3, r1, r5
 80071b2:	5dc7      	ldrb	r7, [r0, r7]
 80071b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071b8:	462f      	mov	r7, r5
 80071ba:	42bb      	cmp	r3, r7
 80071bc:	460d      	mov	r5, r1
 80071be:	d9f4      	bls.n	80071aa <_printf_i+0x11a>
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d10b      	bne.n	80071dc <_printf_i+0x14c>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	07df      	lsls	r7, r3, #31
 80071c8:	d508      	bpl.n	80071dc <_printf_i+0x14c>
 80071ca:	6923      	ldr	r3, [r4, #16]
 80071cc:	6861      	ldr	r1, [r4, #4]
 80071ce:	4299      	cmp	r1, r3
 80071d0:	bfde      	ittt	le
 80071d2:	2330      	movle	r3, #48	; 0x30
 80071d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071dc:	1b92      	subs	r2, r2, r6
 80071de:	6122      	str	r2, [r4, #16]
 80071e0:	f8cd a000 	str.w	sl, [sp]
 80071e4:	464b      	mov	r3, r9
 80071e6:	aa03      	add	r2, sp, #12
 80071e8:	4621      	mov	r1, r4
 80071ea:	4640      	mov	r0, r8
 80071ec:	f7ff fee2 	bl	8006fb4 <_printf_common>
 80071f0:	3001      	adds	r0, #1
 80071f2:	d14c      	bne.n	800728e <_printf_i+0x1fe>
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
 80071f8:	b004      	add	sp, #16
 80071fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fe:	4835      	ldr	r0, [pc, #212]	; (80072d4 <_printf_i+0x244>)
 8007200:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	680e      	ldr	r6, [r1, #0]
 8007208:	061f      	lsls	r7, r3, #24
 800720a:	f856 5b04 	ldr.w	r5, [r6], #4
 800720e:	600e      	str	r6, [r1, #0]
 8007210:	d514      	bpl.n	800723c <_printf_i+0x1ac>
 8007212:	07d9      	lsls	r1, r3, #31
 8007214:	bf44      	itt	mi
 8007216:	f043 0320 	orrmi.w	r3, r3, #32
 800721a:	6023      	strmi	r3, [r4, #0]
 800721c:	b91d      	cbnz	r5, 8007226 <_printf_i+0x196>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	f023 0320 	bic.w	r3, r3, #32
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	2310      	movs	r3, #16
 8007228:	e7b0      	b.n	800718c <_printf_i+0xfc>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	f043 0320 	orr.w	r3, r3, #32
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	2378      	movs	r3, #120	; 0x78
 8007234:	4828      	ldr	r0, [pc, #160]	; (80072d8 <_printf_i+0x248>)
 8007236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800723a:	e7e3      	b.n	8007204 <_printf_i+0x174>
 800723c:	065e      	lsls	r6, r3, #25
 800723e:	bf48      	it	mi
 8007240:	b2ad      	uxthmi	r5, r5
 8007242:	e7e6      	b.n	8007212 <_printf_i+0x182>
 8007244:	4616      	mov	r6, r2
 8007246:	e7bb      	b.n	80071c0 <_printf_i+0x130>
 8007248:	680b      	ldr	r3, [r1, #0]
 800724a:	6826      	ldr	r6, [r4, #0]
 800724c:	6960      	ldr	r0, [r4, #20]
 800724e:	1d1d      	adds	r5, r3, #4
 8007250:	600d      	str	r5, [r1, #0]
 8007252:	0635      	lsls	r5, r6, #24
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	d501      	bpl.n	800725c <_printf_i+0x1cc>
 8007258:	6018      	str	r0, [r3, #0]
 800725a:	e002      	b.n	8007262 <_printf_i+0x1d2>
 800725c:	0671      	lsls	r1, r6, #25
 800725e:	d5fb      	bpl.n	8007258 <_printf_i+0x1c8>
 8007260:	8018      	strh	r0, [r3, #0]
 8007262:	2300      	movs	r3, #0
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	4616      	mov	r6, r2
 8007268:	e7ba      	b.n	80071e0 <_printf_i+0x150>
 800726a:	680b      	ldr	r3, [r1, #0]
 800726c:	1d1a      	adds	r2, r3, #4
 800726e:	600a      	str	r2, [r1, #0]
 8007270:	681e      	ldr	r6, [r3, #0]
 8007272:	6862      	ldr	r2, [r4, #4]
 8007274:	2100      	movs	r1, #0
 8007276:	4630      	mov	r0, r6
 8007278:	f7f8 ffc2 	bl	8000200 <memchr>
 800727c:	b108      	cbz	r0, 8007282 <_printf_i+0x1f2>
 800727e:	1b80      	subs	r0, r0, r6
 8007280:	6060      	str	r0, [r4, #4]
 8007282:	6863      	ldr	r3, [r4, #4]
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	2300      	movs	r3, #0
 8007288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800728c:	e7a8      	b.n	80071e0 <_printf_i+0x150>
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	4632      	mov	r2, r6
 8007292:	4649      	mov	r1, r9
 8007294:	4640      	mov	r0, r8
 8007296:	47d0      	blx	sl
 8007298:	3001      	adds	r0, #1
 800729a:	d0ab      	beq.n	80071f4 <_printf_i+0x164>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	079b      	lsls	r3, r3, #30
 80072a0:	d413      	bmi.n	80072ca <_printf_i+0x23a>
 80072a2:	68e0      	ldr	r0, [r4, #12]
 80072a4:	9b03      	ldr	r3, [sp, #12]
 80072a6:	4298      	cmp	r0, r3
 80072a8:	bfb8      	it	lt
 80072aa:	4618      	movlt	r0, r3
 80072ac:	e7a4      	b.n	80071f8 <_printf_i+0x168>
 80072ae:	2301      	movs	r3, #1
 80072b0:	4632      	mov	r2, r6
 80072b2:	4649      	mov	r1, r9
 80072b4:	4640      	mov	r0, r8
 80072b6:	47d0      	blx	sl
 80072b8:	3001      	adds	r0, #1
 80072ba:	d09b      	beq.n	80071f4 <_printf_i+0x164>
 80072bc:	3501      	adds	r5, #1
 80072be:	68e3      	ldr	r3, [r4, #12]
 80072c0:	9903      	ldr	r1, [sp, #12]
 80072c2:	1a5b      	subs	r3, r3, r1
 80072c4:	42ab      	cmp	r3, r5
 80072c6:	dcf2      	bgt.n	80072ae <_printf_i+0x21e>
 80072c8:	e7eb      	b.n	80072a2 <_printf_i+0x212>
 80072ca:	2500      	movs	r5, #0
 80072cc:	f104 0619 	add.w	r6, r4, #25
 80072d0:	e7f5      	b.n	80072be <_printf_i+0x22e>
 80072d2:	bf00      	nop
 80072d4:	0800de36 	.word	0x0800de36
 80072d8:	0800de47 	.word	0x0800de47

080072dc <_scanf_float>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	b087      	sub	sp, #28
 80072e2:	4617      	mov	r7, r2
 80072e4:	9303      	str	r3, [sp, #12]
 80072e6:	688b      	ldr	r3, [r1, #8]
 80072e8:	1e5a      	subs	r2, r3, #1
 80072ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80072ee:	bf83      	ittte	hi
 80072f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80072f4:	195b      	addhi	r3, r3, r5
 80072f6:	9302      	strhi	r3, [sp, #8]
 80072f8:	2300      	movls	r3, #0
 80072fa:	bf86      	itte	hi
 80072fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007300:	608b      	strhi	r3, [r1, #8]
 8007302:	9302      	strls	r3, [sp, #8]
 8007304:	680b      	ldr	r3, [r1, #0]
 8007306:	468b      	mov	fp, r1
 8007308:	2500      	movs	r5, #0
 800730a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800730e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007312:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007316:	4680      	mov	r8, r0
 8007318:	460c      	mov	r4, r1
 800731a:	465e      	mov	r6, fp
 800731c:	46aa      	mov	sl, r5
 800731e:	46a9      	mov	r9, r5
 8007320:	9501      	str	r5, [sp, #4]
 8007322:	68a2      	ldr	r2, [r4, #8]
 8007324:	b152      	cbz	r2, 800733c <_scanf_float+0x60>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	2b4e      	cmp	r3, #78	; 0x4e
 800732c:	d864      	bhi.n	80073f8 <_scanf_float+0x11c>
 800732e:	2b40      	cmp	r3, #64	; 0x40
 8007330:	d83c      	bhi.n	80073ac <_scanf_float+0xd0>
 8007332:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007336:	b2c8      	uxtb	r0, r1
 8007338:	280e      	cmp	r0, #14
 800733a:	d93a      	bls.n	80073b2 <_scanf_float+0xd6>
 800733c:	f1b9 0f00 	cmp.w	r9, #0
 8007340:	d003      	beq.n	800734a <_scanf_float+0x6e>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800734e:	f1ba 0f01 	cmp.w	sl, #1
 8007352:	f200 8113 	bhi.w	800757c <_scanf_float+0x2a0>
 8007356:	455e      	cmp	r6, fp
 8007358:	f200 8105 	bhi.w	8007566 <_scanf_float+0x28a>
 800735c:	2501      	movs	r5, #1
 800735e:	4628      	mov	r0, r5
 8007360:	b007      	add	sp, #28
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800736a:	2a0d      	cmp	r2, #13
 800736c:	d8e6      	bhi.n	800733c <_scanf_float+0x60>
 800736e:	a101      	add	r1, pc, #4	; (adr r1, 8007374 <_scanf_float+0x98>)
 8007370:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007374:	080074b3 	.word	0x080074b3
 8007378:	0800733d 	.word	0x0800733d
 800737c:	0800733d 	.word	0x0800733d
 8007380:	0800733d 	.word	0x0800733d
 8007384:	08007513 	.word	0x08007513
 8007388:	080074eb 	.word	0x080074eb
 800738c:	0800733d 	.word	0x0800733d
 8007390:	0800733d 	.word	0x0800733d
 8007394:	080074c1 	.word	0x080074c1
 8007398:	0800733d 	.word	0x0800733d
 800739c:	0800733d 	.word	0x0800733d
 80073a0:	0800733d 	.word	0x0800733d
 80073a4:	0800733d 	.word	0x0800733d
 80073a8:	08007479 	.word	0x08007479
 80073ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80073b0:	e7db      	b.n	800736a <_scanf_float+0x8e>
 80073b2:	290e      	cmp	r1, #14
 80073b4:	d8c2      	bhi.n	800733c <_scanf_float+0x60>
 80073b6:	a001      	add	r0, pc, #4	; (adr r0, 80073bc <_scanf_float+0xe0>)
 80073b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073bc:	0800746b 	.word	0x0800746b
 80073c0:	0800733d 	.word	0x0800733d
 80073c4:	0800746b 	.word	0x0800746b
 80073c8:	080074ff 	.word	0x080074ff
 80073cc:	0800733d 	.word	0x0800733d
 80073d0:	08007419 	.word	0x08007419
 80073d4:	08007455 	.word	0x08007455
 80073d8:	08007455 	.word	0x08007455
 80073dc:	08007455 	.word	0x08007455
 80073e0:	08007455 	.word	0x08007455
 80073e4:	08007455 	.word	0x08007455
 80073e8:	08007455 	.word	0x08007455
 80073ec:	08007455 	.word	0x08007455
 80073f0:	08007455 	.word	0x08007455
 80073f4:	08007455 	.word	0x08007455
 80073f8:	2b6e      	cmp	r3, #110	; 0x6e
 80073fa:	d809      	bhi.n	8007410 <_scanf_float+0x134>
 80073fc:	2b60      	cmp	r3, #96	; 0x60
 80073fe:	d8b2      	bhi.n	8007366 <_scanf_float+0x8a>
 8007400:	2b54      	cmp	r3, #84	; 0x54
 8007402:	d077      	beq.n	80074f4 <_scanf_float+0x218>
 8007404:	2b59      	cmp	r3, #89	; 0x59
 8007406:	d199      	bne.n	800733c <_scanf_float+0x60>
 8007408:	2d07      	cmp	r5, #7
 800740a:	d197      	bne.n	800733c <_scanf_float+0x60>
 800740c:	2508      	movs	r5, #8
 800740e:	e029      	b.n	8007464 <_scanf_float+0x188>
 8007410:	2b74      	cmp	r3, #116	; 0x74
 8007412:	d06f      	beq.n	80074f4 <_scanf_float+0x218>
 8007414:	2b79      	cmp	r3, #121	; 0x79
 8007416:	e7f6      	b.n	8007406 <_scanf_float+0x12a>
 8007418:	6821      	ldr	r1, [r4, #0]
 800741a:	05c8      	lsls	r0, r1, #23
 800741c:	d51a      	bpl.n	8007454 <_scanf_float+0x178>
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007424:	6021      	str	r1, [r4, #0]
 8007426:	f109 0901 	add.w	r9, r9, #1
 800742a:	b11b      	cbz	r3, 8007434 <_scanf_float+0x158>
 800742c:	3b01      	subs	r3, #1
 800742e:	3201      	adds	r2, #1
 8007430:	9302      	str	r3, [sp, #8]
 8007432:	60a2      	str	r2, [r4, #8]
 8007434:	68a3      	ldr	r3, [r4, #8]
 8007436:	3b01      	subs	r3, #1
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	3301      	adds	r3, #1
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3b01      	subs	r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	607b      	str	r3, [r7, #4]
 8007448:	f340 8084 	ble.w	8007554 <_scanf_float+0x278>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	3301      	adds	r3, #1
 8007450:	603b      	str	r3, [r7, #0]
 8007452:	e766      	b.n	8007322 <_scanf_float+0x46>
 8007454:	eb1a 0f05 	cmn.w	sl, r5
 8007458:	f47f af70 	bne.w	800733c <_scanf_float+0x60>
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007462:	6022      	str	r2, [r4, #0]
 8007464:	f806 3b01 	strb.w	r3, [r6], #1
 8007468:	e7e4      	b.n	8007434 <_scanf_float+0x158>
 800746a:	6822      	ldr	r2, [r4, #0]
 800746c:	0610      	lsls	r0, r2, #24
 800746e:	f57f af65 	bpl.w	800733c <_scanf_float+0x60>
 8007472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007476:	e7f4      	b.n	8007462 <_scanf_float+0x186>
 8007478:	f1ba 0f00 	cmp.w	sl, #0
 800747c:	d10e      	bne.n	800749c <_scanf_float+0x1c0>
 800747e:	f1b9 0f00 	cmp.w	r9, #0
 8007482:	d10e      	bne.n	80074a2 <_scanf_float+0x1c6>
 8007484:	6822      	ldr	r2, [r4, #0]
 8007486:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800748a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800748e:	d108      	bne.n	80074a2 <_scanf_float+0x1c6>
 8007490:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007494:	6022      	str	r2, [r4, #0]
 8007496:	f04f 0a01 	mov.w	sl, #1
 800749a:	e7e3      	b.n	8007464 <_scanf_float+0x188>
 800749c:	f1ba 0f02 	cmp.w	sl, #2
 80074a0:	d055      	beq.n	800754e <_scanf_float+0x272>
 80074a2:	2d01      	cmp	r5, #1
 80074a4:	d002      	beq.n	80074ac <_scanf_float+0x1d0>
 80074a6:	2d04      	cmp	r5, #4
 80074a8:	f47f af48 	bne.w	800733c <_scanf_float+0x60>
 80074ac:	3501      	adds	r5, #1
 80074ae:	b2ed      	uxtb	r5, r5
 80074b0:	e7d8      	b.n	8007464 <_scanf_float+0x188>
 80074b2:	f1ba 0f01 	cmp.w	sl, #1
 80074b6:	f47f af41 	bne.w	800733c <_scanf_float+0x60>
 80074ba:	f04f 0a02 	mov.w	sl, #2
 80074be:	e7d1      	b.n	8007464 <_scanf_float+0x188>
 80074c0:	b97d      	cbnz	r5, 80074e2 <_scanf_float+0x206>
 80074c2:	f1b9 0f00 	cmp.w	r9, #0
 80074c6:	f47f af3c 	bne.w	8007342 <_scanf_float+0x66>
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074d4:	f47f af39 	bne.w	800734a <_scanf_float+0x6e>
 80074d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074dc:	6022      	str	r2, [r4, #0]
 80074de:	2501      	movs	r5, #1
 80074e0:	e7c0      	b.n	8007464 <_scanf_float+0x188>
 80074e2:	2d03      	cmp	r5, #3
 80074e4:	d0e2      	beq.n	80074ac <_scanf_float+0x1d0>
 80074e6:	2d05      	cmp	r5, #5
 80074e8:	e7de      	b.n	80074a8 <_scanf_float+0x1cc>
 80074ea:	2d02      	cmp	r5, #2
 80074ec:	f47f af26 	bne.w	800733c <_scanf_float+0x60>
 80074f0:	2503      	movs	r5, #3
 80074f2:	e7b7      	b.n	8007464 <_scanf_float+0x188>
 80074f4:	2d06      	cmp	r5, #6
 80074f6:	f47f af21 	bne.w	800733c <_scanf_float+0x60>
 80074fa:	2507      	movs	r5, #7
 80074fc:	e7b2      	b.n	8007464 <_scanf_float+0x188>
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	0591      	lsls	r1, r2, #22
 8007502:	f57f af1b 	bpl.w	800733c <_scanf_float+0x60>
 8007506:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800750a:	6022      	str	r2, [r4, #0]
 800750c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007510:	e7a8      	b.n	8007464 <_scanf_float+0x188>
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007518:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800751c:	d006      	beq.n	800752c <_scanf_float+0x250>
 800751e:	0550      	lsls	r0, r2, #21
 8007520:	f57f af0c 	bpl.w	800733c <_scanf_float+0x60>
 8007524:	f1b9 0f00 	cmp.w	r9, #0
 8007528:	f43f af0f 	beq.w	800734a <_scanf_float+0x6e>
 800752c:	0591      	lsls	r1, r2, #22
 800752e:	bf58      	it	pl
 8007530:	9901      	ldrpl	r1, [sp, #4]
 8007532:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007536:	bf58      	it	pl
 8007538:	eba9 0101 	subpl.w	r1, r9, r1
 800753c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007540:	bf58      	it	pl
 8007542:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007546:	6022      	str	r2, [r4, #0]
 8007548:	f04f 0900 	mov.w	r9, #0
 800754c:	e78a      	b.n	8007464 <_scanf_float+0x188>
 800754e:	f04f 0a03 	mov.w	sl, #3
 8007552:	e787      	b.n	8007464 <_scanf_float+0x188>
 8007554:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007558:	4639      	mov	r1, r7
 800755a:	4640      	mov	r0, r8
 800755c:	4798      	blx	r3
 800755e:	2800      	cmp	r0, #0
 8007560:	f43f aedf 	beq.w	8007322 <_scanf_float+0x46>
 8007564:	e6ea      	b.n	800733c <_scanf_float+0x60>
 8007566:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800756a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800756e:	463a      	mov	r2, r7
 8007570:	4640      	mov	r0, r8
 8007572:	4798      	blx	r3
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	3b01      	subs	r3, #1
 8007578:	6123      	str	r3, [r4, #16]
 800757a:	e6ec      	b.n	8007356 <_scanf_float+0x7a>
 800757c:	1e6b      	subs	r3, r5, #1
 800757e:	2b06      	cmp	r3, #6
 8007580:	d825      	bhi.n	80075ce <_scanf_float+0x2f2>
 8007582:	2d02      	cmp	r5, #2
 8007584:	d836      	bhi.n	80075f4 <_scanf_float+0x318>
 8007586:	455e      	cmp	r6, fp
 8007588:	f67f aee8 	bls.w	800735c <_scanf_float+0x80>
 800758c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007590:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007594:	463a      	mov	r2, r7
 8007596:	4640      	mov	r0, r8
 8007598:	4798      	blx	r3
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	3b01      	subs	r3, #1
 800759e:	6123      	str	r3, [r4, #16]
 80075a0:	e7f1      	b.n	8007586 <_scanf_float+0x2aa>
 80075a2:	9802      	ldr	r0, [sp, #8]
 80075a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80075ac:	9002      	str	r0, [sp, #8]
 80075ae:	463a      	mov	r2, r7
 80075b0:	4640      	mov	r0, r8
 80075b2:	4798      	blx	r3
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075be:	fa5f fa8a 	uxtb.w	sl, sl
 80075c2:	f1ba 0f02 	cmp.w	sl, #2
 80075c6:	d1ec      	bne.n	80075a2 <_scanf_float+0x2c6>
 80075c8:	3d03      	subs	r5, #3
 80075ca:	b2ed      	uxtb	r5, r5
 80075cc:	1b76      	subs	r6, r6, r5
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	05da      	lsls	r2, r3, #23
 80075d2:	d52f      	bpl.n	8007634 <_scanf_float+0x358>
 80075d4:	055b      	lsls	r3, r3, #21
 80075d6:	d510      	bpl.n	80075fa <_scanf_float+0x31e>
 80075d8:	455e      	cmp	r6, fp
 80075da:	f67f aebf 	bls.w	800735c <_scanf_float+0x80>
 80075de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075e6:	463a      	mov	r2, r7
 80075e8:	4640      	mov	r0, r8
 80075ea:	4798      	blx	r3
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	6123      	str	r3, [r4, #16]
 80075f2:	e7f1      	b.n	80075d8 <_scanf_float+0x2fc>
 80075f4:	46aa      	mov	sl, r5
 80075f6:	9602      	str	r6, [sp, #8]
 80075f8:	e7df      	b.n	80075ba <_scanf_float+0x2de>
 80075fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	2965      	cmp	r1, #101	; 0x65
 8007602:	f103 33ff 	add.w	r3, r3, #4294967295
 8007606:	f106 35ff 	add.w	r5, r6, #4294967295
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	d00c      	beq.n	8007628 <_scanf_float+0x34c>
 800760e:	2945      	cmp	r1, #69	; 0x45
 8007610:	d00a      	beq.n	8007628 <_scanf_float+0x34c>
 8007612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007616:	463a      	mov	r2, r7
 8007618:	4640      	mov	r0, r8
 800761a:	4798      	blx	r3
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007622:	3b01      	subs	r3, #1
 8007624:	1eb5      	subs	r5, r6, #2
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800762c:	463a      	mov	r2, r7
 800762e:	4640      	mov	r0, r8
 8007630:	4798      	blx	r3
 8007632:	462e      	mov	r6, r5
 8007634:	6825      	ldr	r5, [r4, #0]
 8007636:	f015 0510 	ands.w	r5, r5, #16
 800763a:	d158      	bne.n	80076ee <_scanf_float+0x412>
 800763c:	7035      	strb	r5, [r6, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007648:	d11c      	bne.n	8007684 <_scanf_float+0x3a8>
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	454b      	cmp	r3, r9
 800764e:	eba3 0209 	sub.w	r2, r3, r9
 8007652:	d124      	bne.n	800769e <_scanf_float+0x3c2>
 8007654:	2200      	movs	r2, #0
 8007656:	4659      	mov	r1, fp
 8007658:	4640      	mov	r0, r8
 800765a:	f000 fe9b 	bl	8008394 <_strtod_r>
 800765e:	9b03      	ldr	r3, [sp, #12]
 8007660:	6821      	ldr	r1, [r4, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f011 0f02 	tst.w	r1, #2
 8007668:	ec57 6b10 	vmov	r6, r7, d0
 800766c:	f103 0204 	add.w	r2, r3, #4
 8007670:	d020      	beq.n	80076b4 <_scanf_float+0x3d8>
 8007672:	9903      	ldr	r1, [sp, #12]
 8007674:	600a      	str	r2, [r1, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	e9c3 6700 	strd	r6, r7, [r3]
 800767c:	68e3      	ldr	r3, [r4, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	60e3      	str	r3, [r4, #12]
 8007682:	e66c      	b.n	800735e <_scanf_float+0x82>
 8007684:	9b04      	ldr	r3, [sp, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0e4      	beq.n	8007654 <_scanf_float+0x378>
 800768a:	9905      	ldr	r1, [sp, #20]
 800768c:	230a      	movs	r3, #10
 800768e:	462a      	mov	r2, r5
 8007690:	3101      	adds	r1, #1
 8007692:	4640      	mov	r0, r8
 8007694:	f000 ff08 	bl	80084a8 <_strtol_r>
 8007698:	9b04      	ldr	r3, [sp, #16]
 800769a:	9e05      	ldr	r6, [sp, #20]
 800769c:	1ac2      	subs	r2, r0, r3
 800769e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80076a2:	429e      	cmp	r6, r3
 80076a4:	bf28      	it	cs
 80076a6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80076aa:	4912      	ldr	r1, [pc, #72]	; (80076f4 <_scanf_float+0x418>)
 80076ac:	4630      	mov	r0, r6
 80076ae:	f000 f82b 	bl	8007708 <siprintf>
 80076b2:	e7cf      	b.n	8007654 <_scanf_float+0x378>
 80076b4:	f011 0f04 	tst.w	r1, #4
 80076b8:	9903      	ldr	r1, [sp, #12]
 80076ba:	600a      	str	r2, [r1, #0]
 80076bc:	d1db      	bne.n	8007676 <_scanf_float+0x39a>
 80076be:	f8d3 8000 	ldr.w	r8, [r3]
 80076c2:	ee10 2a10 	vmov	r2, s0
 80076c6:	ee10 0a10 	vmov	r0, s0
 80076ca:	463b      	mov	r3, r7
 80076cc:	4639      	mov	r1, r7
 80076ce:	f7f9 fa3d 	bl	8000b4c <__aeabi_dcmpun>
 80076d2:	b128      	cbz	r0, 80076e0 <_scanf_float+0x404>
 80076d4:	4808      	ldr	r0, [pc, #32]	; (80076f8 <_scanf_float+0x41c>)
 80076d6:	f000 f811 	bl	80076fc <nanf>
 80076da:	ed88 0a00 	vstr	s0, [r8]
 80076de:	e7cd      	b.n	800767c <_scanf_float+0x3a0>
 80076e0:	4630      	mov	r0, r6
 80076e2:	4639      	mov	r1, r7
 80076e4:	f7f9 fa90 	bl	8000c08 <__aeabi_d2f>
 80076e8:	f8c8 0000 	str.w	r0, [r8]
 80076ec:	e7c6      	b.n	800767c <_scanf_float+0x3a0>
 80076ee:	2500      	movs	r5, #0
 80076f0:	e635      	b.n	800735e <_scanf_float+0x82>
 80076f2:	bf00      	nop
 80076f4:	0800de58 	.word	0x0800de58
 80076f8:	0800e270 	.word	0x0800e270

080076fc <nanf>:
 80076fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007704 <nanf+0x8>
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	7fc00000 	.word	0x7fc00000

08007708 <siprintf>:
 8007708:	b40e      	push	{r1, r2, r3}
 800770a:	b500      	push	{lr}
 800770c:	b09c      	sub	sp, #112	; 0x70
 800770e:	ab1d      	add	r3, sp, #116	; 0x74
 8007710:	9002      	str	r0, [sp, #8]
 8007712:	9006      	str	r0, [sp, #24]
 8007714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007718:	4809      	ldr	r0, [pc, #36]	; (8007740 <siprintf+0x38>)
 800771a:	9107      	str	r1, [sp, #28]
 800771c:	9104      	str	r1, [sp, #16]
 800771e:	4909      	ldr	r1, [pc, #36]	; (8007744 <siprintf+0x3c>)
 8007720:	f853 2b04 	ldr.w	r2, [r3], #4
 8007724:	9105      	str	r1, [sp, #20]
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	a902      	add	r1, sp, #8
 800772c:	f002 fea4 	bl	800a478 <_svfiprintf_r>
 8007730:	9b02      	ldr	r3, [sp, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	b01c      	add	sp, #112	; 0x70
 8007738:	f85d eb04 	ldr.w	lr, [sp], #4
 800773c:	b003      	add	sp, #12
 800773e:	4770      	bx	lr
 8007740:	20000150 	.word	0x20000150
 8007744:	ffff0208 	.word	0xffff0208

08007748 <sulp>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	4604      	mov	r4, r0
 800774c:	460d      	mov	r5, r1
 800774e:	ec45 4b10 	vmov	d0, r4, r5
 8007752:	4616      	mov	r6, r2
 8007754:	f002 fc2c 	bl	8009fb0 <__ulp>
 8007758:	ec51 0b10 	vmov	r0, r1, d0
 800775c:	b17e      	cbz	r6, 800777e <sulp+0x36>
 800775e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007766:	2b00      	cmp	r3, #0
 8007768:	dd09      	ble.n	800777e <sulp+0x36>
 800776a:	051b      	lsls	r3, r3, #20
 800776c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007770:	2400      	movs	r4, #0
 8007772:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007776:	4622      	mov	r2, r4
 8007778:	462b      	mov	r3, r5
 800777a:	f7f8 ff4d 	bl	8000618 <__aeabi_dmul>
 800777e:	bd70      	pop	{r4, r5, r6, pc}

08007780 <_strtod_l>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	b0a3      	sub	sp, #140	; 0x8c
 8007786:	461f      	mov	r7, r3
 8007788:	2300      	movs	r3, #0
 800778a:	931e      	str	r3, [sp, #120]	; 0x78
 800778c:	4ba4      	ldr	r3, [pc, #656]	; (8007a20 <_strtod_l+0x2a0>)
 800778e:	9219      	str	r2, [sp, #100]	; 0x64
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	9307      	str	r3, [sp, #28]
 8007794:	4604      	mov	r4, r0
 8007796:	4618      	mov	r0, r3
 8007798:	4688      	mov	r8, r1
 800779a:	f7f8 fd29 	bl	80001f0 <strlen>
 800779e:	f04f 0a00 	mov.w	sl, #0
 80077a2:	4605      	mov	r5, r0
 80077a4:	f04f 0b00 	mov.w	fp, #0
 80077a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80077ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077ae:	781a      	ldrb	r2, [r3, #0]
 80077b0:	2a2b      	cmp	r2, #43	; 0x2b
 80077b2:	d04c      	beq.n	800784e <_strtod_l+0xce>
 80077b4:	d839      	bhi.n	800782a <_strtod_l+0xaa>
 80077b6:	2a0d      	cmp	r2, #13
 80077b8:	d832      	bhi.n	8007820 <_strtod_l+0xa0>
 80077ba:	2a08      	cmp	r2, #8
 80077bc:	d832      	bhi.n	8007824 <_strtod_l+0xa4>
 80077be:	2a00      	cmp	r2, #0
 80077c0:	d03c      	beq.n	800783c <_strtod_l+0xbc>
 80077c2:	2300      	movs	r3, #0
 80077c4:	930e      	str	r3, [sp, #56]	; 0x38
 80077c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80077c8:	7833      	ldrb	r3, [r6, #0]
 80077ca:	2b30      	cmp	r3, #48	; 0x30
 80077cc:	f040 80b4 	bne.w	8007938 <_strtod_l+0x1b8>
 80077d0:	7873      	ldrb	r3, [r6, #1]
 80077d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80077d6:	2b58      	cmp	r3, #88	; 0x58
 80077d8:	d16c      	bne.n	80078b4 <_strtod_l+0x134>
 80077da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	ab1e      	add	r3, sp, #120	; 0x78
 80077e0:	9702      	str	r7, [sp, #8]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	4a8f      	ldr	r2, [pc, #572]	; (8007a24 <_strtod_l+0x2a4>)
 80077e6:	ab1f      	add	r3, sp, #124	; 0x7c
 80077e8:	a91d      	add	r1, sp, #116	; 0x74
 80077ea:	4620      	mov	r0, r4
 80077ec:	f001 fd40 	bl	8009270 <__gethex>
 80077f0:	f010 0707 	ands.w	r7, r0, #7
 80077f4:	4605      	mov	r5, r0
 80077f6:	d005      	beq.n	8007804 <_strtod_l+0x84>
 80077f8:	2f06      	cmp	r7, #6
 80077fa:	d12a      	bne.n	8007852 <_strtod_l+0xd2>
 80077fc:	3601      	adds	r6, #1
 80077fe:	2300      	movs	r3, #0
 8007800:	961d      	str	r6, [sp, #116]	; 0x74
 8007802:	930e      	str	r3, [sp, #56]	; 0x38
 8007804:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007806:	2b00      	cmp	r3, #0
 8007808:	f040 8596 	bne.w	8008338 <_strtod_l+0xbb8>
 800780c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800780e:	b1db      	cbz	r3, 8007848 <_strtod_l+0xc8>
 8007810:	4652      	mov	r2, sl
 8007812:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007816:	ec43 2b10 	vmov	d0, r2, r3
 800781a:	b023      	add	sp, #140	; 0x8c
 800781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007820:	2a20      	cmp	r2, #32
 8007822:	d1ce      	bne.n	80077c2 <_strtod_l+0x42>
 8007824:	3301      	adds	r3, #1
 8007826:	931d      	str	r3, [sp, #116]	; 0x74
 8007828:	e7c0      	b.n	80077ac <_strtod_l+0x2c>
 800782a:	2a2d      	cmp	r2, #45	; 0x2d
 800782c:	d1c9      	bne.n	80077c2 <_strtod_l+0x42>
 800782e:	2201      	movs	r2, #1
 8007830:	920e      	str	r2, [sp, #56]	; 0x38
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	921d      	str	r2, [sp, #116]	; 0x74
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1c4      	bne.n	80077c6 <_strtod_l+0x46>
 800783c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800783e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007842:	2b00      	cmp	r3, #0
 8007844:	f040 8576 	bne.w	8008334 <_strtod_l+0xbb4>
 8007848:	4652      	mov	r2, sl
 800784a:	465b      	mov	r3, fp
 800784c:	e7e3      	b.n	8007816 <_strtod_l+0x96>
 800784e:	2200      	movs	r2, #0
 8007850:	e7ee      	b.n	8007830 <_strtod_l+0xb0>
 8007852:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007854:	b13a      	cbz	r2, 8007866 <_strtod_l+0xe6>
 8007856:	2135      	movs	r1, #53	; 0x35
 8007858:	a820      	add	r0, sp, #128	; 0x80
 800785a:	f002 fcb4 	bl	800a1c6 <__copybits>
 800785e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007860:	4620      	mov	r0, r4
 8007862:	f002 f879 	bl	8009958 <_Bfree>
 8007866:	3f01      	subs	r7, #1
 8007868:	2f05      	cmp	r7, #5
 800786a:	d807      	bhi.n	800787c <_strtod_l+0xfc>
 800786c:	e8df f007 	tbb	[pc, r7]
 8007870:	1d180b0e 	.word	0x1d180b0e
 8007874:	030e      	.short	0x030e
 8007876:	f04f 0b00 	mov.w	fp, #0
 800787a:	46da      	mov	sl, fp
 800787c:	0728      	lsls	r0, r5, #28
 800787e:	d5c1      	bpl.n	8007804 <_strtod_l+0x84>
 8007880:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007884:	e7be      	b.n	8007804 <_strtod_l+0x84>
 8007886:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800788a:	e7f7      	b.n	800787c <_strtod_l+0xfc>
 800788c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007890:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007892:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007896:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800789a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800789e:	e7ed      	b.n	800787c <_strtod_l+0xfc>
 80078a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007a28 <_strtod_l+0x2a8>
 80078a4:	f04f 0a00 	mov.w	sl, #0
 80078a8:	e7e8      	b.n	800787c <_strtod_l+0xfc>
 80078aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80078ae:	f04f 3aff 	mov.w	sl, #4294967295
 80078b2:	e7e3      	b.n	800787c <_strtod_l+0xfc>
 80078b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	921d      	str	r2, [sp, #116]	; 0x74
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b30      	cmp	r3, #48	; 0x30
 80078be:	d0f9      	beq.n	80078b4 <_strtod_l+0x134>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d09f      	beq.n	8007804 <_strtod_l+0x84>
 80078c4:	2301      	movs	r3, #1
 80078c6:	f04f 0900 	mov.w	r9, #0
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078ce:	930a      	str	r3, [sp, #40]	; 0x28
 80078d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80078d4:	464f      	mov	r7, r9
 80078d6:	220a      	movs	r2, #10
 80078d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80078da:	7806      	ldrb	r6, [r0, #0]
 80078dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80078e0:	b2d9      	uxtb	r1, r3
 80078e2:	2909      	cmp	r1, #9
 80078e4:	d92a      	bls.n	800793c <_strtod_l+0x1bc>
 80078e6:	9907      	ldr	r1, [sp, #28]
 80078e8:	462a      	mov	r2, r5
 80078ea:	f002 fedd 	bl	800a6a8 <strncmp>
 80078ee:	b398      	cbz	r0, 8007958 <_strtod_l+0x1d8>
 80078f0:	2000      	movs	r0, #0
 80078f2:	4633      	mov	r3, r6
 80078f4:	463d      	mov	r5, r7
 80078f6:	9007      	str	r0, [sp, #28]
 80078f8:	4602      	mov	r2, r0
 80078fa:	2b65      	cmp	r3, #101	; 0x65
 80078fc:	d001      	beq.n	8007902 <_strtod_l+0x182>
 80078fe:	2b45      	cmp	r3, #69	; 0x45
 8007900:	d118      	bne.n	8007934 <_strtod_l+0x1b4>
 8007902:	b91d      	cbnz	r5, 800790c <_strtod_l+0x18c>
 8007904:	9b04      	ldr	r3, [sp, #16]
 8007906:	4303      	orrs	r3, r0
 8007908:	d098      	beq.n	800783c <_strtod_l+0xbc>
 800790a:	2500      	movs	r5, #0
 800790c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007910:	f108 0301 	add.w	r3, r8, #1
 8007914:	931d      	str	r3, [sp, #116]	; 0x74
 8007916:	f898 3001 	ldrb.w	r3, [r8, #1]
 800791a:	2b2b      	cmp	r3, #43	; 0x2b
 800791c:	d075      	beq.n	8007a0a <_strtod_l+0x28a>
 800791e:	2b2d      	cmp	r3, #45	; 0x2d
 8007920:	d07b      	beq.n	8007a1a <_strtod_l+0x29a>
 8007922:	f04f 0c00 	mov.w	ip, #0
 8007926:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800792a:	2909      	cmp	r1, #9
 800792c:	f240 8082 	bls.w	8007a34 <_strtod_l+0x2b4>
 8007930:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007934:	2600      	movs	r6, #0
 8007936:	e09d      	b.n	8007a74 <_strtod_l+0x2f4>
 8007938:	2300      	movs	r3, #0
 800793a:	e7c4      	b.n	80078c6 <_strtod_l+0x146>
 800793c:	2f08      	cmp	r7, #8
 800793e:	bfd8      	it	le
 8007940:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007942:	f100 0001 	add.w	r0, r0, #1
 8007946:	bfda      	itte	le
 8007948:	fb02 3301 	mlale	r3, r2, r1, r3
 800794c:	9309      	strle	r3, [sp, #36]	; 0x24
 800794e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007952:	3701      	adds	r7, #1
 8007954:	901d      	str	r0, [sp, #116]	; 0x74
 8007956:	e7bf      	b.n	80078d8 <_strtod_l+0x158>
 8007958:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800795a:	195a      	adds	r2, r3, r5
 800795c:	921d      	str	r2, [sp, #116]	; 0x74
 800795e:	5d5b      	ldrb	r3, [r3, r5]
 8007960:	2f00      	cmp	r7, #0
 8007962:	d037      	beq.n	80079d4 <_strtod_l+0x254>
 8007964:	9007      	str	r0, [sp, #28]
 8007966:	463d      	mov	r5, r7
 8007968:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800796c:	2a09      	cmp	r2, #9
 800796e:	d912      	bls.n	8007996 <_strtod_l+0x216>
 8007970:	2201      	movs	r2, #1
 8007972:	e7c2      	b.n	80078fa <_strtod_l+0x17a>
 8007974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	921d      	str	r2, [sp, #116]	; 0x74
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	3001      	adds	r0, #1
 800797e:	2b30      	cmp	r3, #48	; 0x30
 8007980:	d0f8      	beq.n	8007974 <_strtod_l+0x1f4>
 8007982:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007986:	2a08      	cmp	r2, #8
 8007988:	f200 84db 	bhi.w	8008342 <_strtod_l+0xbc2>
 800798c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800798e:	9007      	str	r0, [sp, #28]
 8007990:	2000      	movs	r0, #0
 8007992:	920a      	str	r2, [sp, #40]	; 0x28
 8007994:	4605      	mov	r5, r0
 8007996:	3b30      	subs	r3, #48	; 0x30
 8007998:	f100 0201 	add.w	r2, r0, #1
 800799c:	d014      	beq.n	80079c8 <_strtod_l+0x248>
 800799e:	9907      	ldr	r1, [sp, #28]
 80079a0:	4411      	add	r1, r2
 80079a2:	9107      	str	r1, [sp, #28]
 80079a4:	462a      	mov	r2, r5
 80079a6:	eb00 0e05 	add.w	lr, r0, r5
 80079aa:	210a      	movs	r1, #10
 80079ac:	4572      	cmp	r2, lr
 80079ae:	d113      	bne.n	80079d8 <_strtod_l+0x258>
 80079b0:	182a      	adds	r2, r5, r0
 80079b2:	2a08      	cmp	r2, #8
 80079b4:	f105 0501 	add.w	r5, r5, #1
 80079b8:	4405      	add	r5, r0
 80079ba:	dc1c      	bgt.n	80079f6 <_strtod_l+0x276>
 80079bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079be:	220a      	movs	r2, #10
 80079c0:	fb02 3301 	mla	r3, r2, r1, r3
 80079c4:	9309      	str	r3, [sp, #36]	; 0x24
 80079c6:	2200      	movs	r2, #0
 80079c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80079ca:	1c59      	adds	r1, r3, #1
 80079cc:	911d      	str	r1, [sp, #116]	; 0x74
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	4610      	mov	r0, r2
 80079d2:	e7c9      	b.n	8007968 <_strtod_l+0x1e8>
 80079d4:	4638      	mov	r0, r7
 80079d6:	e7d2      	b.n	800797e <_strtod_l+0x1fe>
 80079d8:	2a08      	cmp	r2, #8
 80079da:	dc04      	bgt.n	80079e6 <_strtod_l+0x266>
 80079dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80079de:	434e      	muls	r6, r1
 80079e0:	9609      	str	r6, [sp, #36]	; 0x24
 80079e2:	3201      	adds	r2, #1
 80079e4:	e7e2      	b.n	80079ac <_strtod_l+0x22c>
 80079e6:	f102 0c01 	add.w	ip, r2, #1
 80079ea:	f1bc 0f10 	cmp.w	ip, #16
 80079ee:	bfd8      	it	le
 80079f0:	fb01 f909 	mulle.w	r9, r1, r9
 80079f4:	e7f5      	b.n	80079e2 <_strtod_l+0x262>
 80079f6:	2d10      	cmp	r5, #16
 80079f8:	bfdc      	itt	le
 80079fa:	220a      	movle	r2, #10
 80079fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8007a00:	e7e1      	b.n	80079c6 <_strtod_l+0x246>
 8007a02:	2300      	movs	r3, #0
 8007a04:	9307      	str	r3, [sp, #28]
 8007a06:	2201      	movs	r2, #1
 8007a08:	e77c      	b.n	8007904 <_strtod_l+0x184>
 8007a0a:	f04f 0c00 	mov.w	ip, #0
 8007a0e:	f108 0302 	add.w	r3, r8, #2
 8007a12:	931d      	str	r3, [sp, #116]	; 0x74
 8007a14:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007a18:	e785      	b.n	8007926 <_strtod_l+0x1a6>
 8007a1a:	f04f 0c01 	mov.w	ip, #1
 8007a1e:	e7f6      	b.n	8007a0e <_strtod_l+0x28e>
 8007a20:	0800e0b0 	.word	0x0800e0b0
 8007a24:	0800de60 	.word	0x0800de60
 8007a28:	7ff00000 	.word	0x7ff00000
 8007a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a2e:	1c59      	adds	r1, r3, #1
 8007a30:	911d      	str	r1, [sp, #116]	; 0x74
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	2b30      	cmp	r3, #48	; 0x30
 8007a36:	d0f9      	beq.n	8007a2c <_strtod_l+0x2ac>
 8007a38:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007a3c:	2908      	cmp	r1, #8
 8007a3e:	f63f af79 	bhi.w	8007934 <_strtod_l+0x1b4>
 8007a42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007a46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a48:	9308      	str	r3, [sp, #32]
 8007a4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a4c:	1c59      	adds	r1, r3, #1
 8007a4e:	911d      	str	r1, [sp, #116]	; 0x74
 8007a50:	785b      	ldrb	r3, [r3, #1]
 8007a52:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007a56:	2e09      	cmp	r6, #9
 8007a58:	d937      	bls.n	8007aca <_strtod_l+0x34a>
 8007a5a:	9e08      	ldr	r6, [sp, #32]
 8007a5c:	1b89      	subs	r1, r1, r6
 8007a5e:	2908      	cmp	r1, #8
 8007a60:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007a64:	dc02      	bgt.n	8007a6c <_strtod_l+0x2ec>
 8007a66:	4576      	cmp	r6, lr
 8007a68:	bfa8      	it	ge
 8007a6a:	4676      	movge	r6, lr
 8007a6c:	f1bc 0f00 	cmp.w	ip, #0
 8007a70:	d000      	beq.n	8007a74 <_strtod_l+0x2f4>
 8007a72:	4276      	negs	r6, r6
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	d14f      	bne.n	8007b18 <_strtod_l+0x398>
 8007a78:	9904      	ldr	r1, [sp, #16]
 8007a7a:	4301      	orrs	r1, r0
 8007a7c:	f47f aec2 	bne.w	8007804 <_strtod_l+0x84>
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	f47f aedb 	bne.w	800783c <_strtod_l+0xbc>
 8007a86:	2b69      	cmp	r3, #105	; 0x69
 8007a88:	d027      	beq.n	8007ada <_strtod_l+0x35a>
 8007a8a:	dc24      	bgt.n	8007ad6 <_strtod_l+0x356>
 8007a8c:	2b49      	cmp	r3, #73	; 0x49
 8007a8e:	d024      	beq.n	8007ada <_strtod_l+0x35a>
 8007a90:	2b4e      	cmp	r3, #78	; 0x4e
 8007a92:	f47f aed3 	bne.w	800783c <_strtod_l+0xbc>
 8007a96:	499e      	ldr	r1, [pc, #632]	; (8007d10 <_strtod_l+0x590>)
 8007a98:	a81d      	add	r0, sp, #116	; 0x74
 8007a9a:	f001 fe41 	bl	8009720 <__match>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f aecc 	beq.w	800783c <_strtod_l+0xbc>
 8007aa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b28      	cmp	r3, #40	; 0x28
 8007aaa:	d12d      	bne.n	8007b08 <_strtod_l+0x388>
 8007aac:	4999      	ldr	r1, [pc, #612]	; (8007d14 <_strtod_l+0x594>)
 8007aae:	aa20      	add	r2, sp, #128	; 0x80
 8007ab0:	a81d      	add	r0, sp, #116	; 0x74
 8007ab2:	f001 fe49 	bl	8009748 <__hexnan>
 8007ab6:	2805      	cmp	r0, #5
 8007ab8:	d126      	bne.n	8007b08 <_strtod_l+0x388>
 8007aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007abc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007ac0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007ac4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ac8:	e69c      	b.n	8007804 <_strtod_l+0x84>
 8007aca:	210a      	movs	r1, #10
 8007acc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007ad0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ad4:	e7b9      	b.n	8007a4a <_strtod_l+0x2ca>
 8007ad6:	2b6e      	cmp	r3, #110	; 0x6e
 8007ad8:	e7db      	b.n	8007a92 <_strtod_l+0x312>
 8007ada:	498f      	ldr	r1, [pc, #572]	; (8007d18 <_strtod_l+0x598>)
 8007adc:	a81d      	add	r0, sp, #116	; 0x74
 8007ade:	f001 fe1f 	bl	8009720 <__match>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	f43f aeaa 	beq.w	800783c <_strtod_l+0xbc>
 8007ae8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007aea:	498c      	ldr	r1, [pc, #560]	; (8007d1c <_strtod_l+0x59c>)
 8007aec:	3b01      	subs	r3, #1
 8007aee:	a81d      	add	r0, sp, #116	; 0x74
 8007af0:	931d      	str	r3, [sp, #116]	; 0x74
 8007af2:	f001 fe15 	bl	8009720 <__match>
 8007af6:	b910      	cbnz	r0, 8007afe <_strtod_l+0x37e>
 8007af8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007afa:	3301      	adds	r3, #1
 8007afc:	931d      	str	r3, [sp, #116]	; 0x74
 8007afe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007d2c <_strtod_l+0x5ac>
 8007b02:	f04f 0a00 	mov.w	sl, #0
 8007b06:	e67d      	b.n	8007804 <_strtod_l+0x84>
 8007b08:	4885      	ldr	r0, [pc, #532]	; (8007d20 <_strtod_l+0x5a0>)
 8007b0a:	f002 fdb5 	bl	800a678 <nan>
 8007b0e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007b12:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007b16:	e675      	b.n	8007804 <_strtod_l+0x84>
 8007b18:	9b07      	ldr	r3, [sp, #28]
 8007b1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b1c:	1af3      	subs	r3, r6, r3
 8007b1e:	2f00      	cmp	r7, #0
 8007b20:	bf08      	it	eq
 8007b22:	462f      	moveq	r7, r5
 8007b24:	2d10      	cmp	r5, #16
 8007b26:	9308      	str	r3, [sp, #32]
 8007b28:	46a8      	mov	r8, r5
 8007b2a:	bfa8      	it	ge
 8007b2c:	f04f 0810 	movge.w	r8, #16
 8007b30:	f7f8 fcf8 	bl	8000524 <__aeabi_ui2d>
 8007b34:	2d09      	cmp	r5, #9
 8007b36:	4682      	mov	sl, r0
 8007b38:	468b      	mov	fp, r1
 8007b3a:	dd13      	ble.n	8007b64 <_strtod_l+0x3e4>
 8007b3c:	4b79      	ldr	r3, [pc, #484]	; (8007d24 <_strtod_l+0x5a4>)
 8007b3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b46:	f7f8 fd67 	bl	8000618 <__aeabi_dmul>
 8007b4a:	4682      	mov	sl, r0
 8007b4c:	4648      	mov	r0, r9
 8007b4e:	468b      	mov	fp, r1
 8007b50:	f7f8 fce8 	bl	8000524 <__aeabi_ui2d>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4650      	mov	r0, sl
 8007b5a:	4659      	mov	r1, fp
 8007b5c:	f7f8 fba6 	bl	80002ac <__adddf3>
 8007b60:	4682      	mov	sl, r0
 8007b62:	468b      	mov	fp, r1
 8007b64:	2d0f      	cmp	r5, #15
 8007b66:	dc38      	bgt.n	8007bda <_strtod_l+0x45a>
 8007b68:	9b08      	ldr	r3, [sp, #32]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f43f ae4a 	beq.w	8007804 <_strtod_l+0x84>
 8007b70:	dd24      	ble.n	8007bbc <_strtod_l+0x43c>
 8007b72:	2b16      	cmp	r3, #22
 8007b74:	dc0b      	bgt.n	8007b8e <_strtod_l+0x40e>
 8007b76:	4d6b      	ldr	r5, [pc, #428]	; (8007d24 <_strtod_l+0x5a4>)
 8007b78:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007b7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007b80:	4652      	mov	r2, sl
 8007b82:	465b      	mov	r3, fp
 8007b84:	f7f8 fd48 	bl	8000618 <__aeabi_dmul>
 8007b88:	4682      	mov	sl, r0
 8007b8a:	468b      	mov	fp, r1
 8007b8c:	e63a      	b.n	8007804 <_strtod_l+0x84>
 8007b8e:	9a08      	ldr	r2, [sp, #32]
 8007b90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007b94:	4293      	cmp	r3, r2
 8007b96:	db20      	blt.n	8007bda <_strtod_l+0x45a>
 8007b98:	4c62      	ldr	r4, [pc, #392]	; (8007d24 <_strtod_l+0x5a4>)
 8007b9a:	f1c5 050f 	rsb	r5, r5, #15
 8007b9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007ba2:	4652      	mov	r2, sl
 8007ba4:	465b      	mov	r3, fp
 8007ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007baa:	f7f8 fd35 	bl	8000618 <__aeabi_dmul>
 8007bae:	9b08      	ldr	r3, [sp, #32]
 8007bb0:	1b5d      	subs	r5, r3, r5
 8007bb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007bb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007bba:	e7e3      	b.n	8007b84 <_strtod_l+0x404>
 8007bbc:	9b08      	ldr	r3, [sp, #32]
 8007bbe:	3316      	adds	r3, #22
 8007bc0:	db0b      	blt.n	8007bda <_strtod_l+0x45a>
 8007bc2:	9b07      	ldr	r3, [sp, #28]
 8007bc4:	4a57      	ldr	r2, [pc, #348]	; (8007d24 <_strtod_l+0x5a4>)
 8007bc6:	1b9e      	subs	r6, r3, r6
 8007bc8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007bcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bd0:	4650      	mov	r0, sl
 8007bd2:	4659      	mov	r1, fp
 8007bd4:	f7f8 fe4a 	bl	800086c <__aeabi_ddiv>
 8007bd8:	e7d6      	b.n	8007b88 <_strtod_l+0x408>
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	eba5 0808 	sub.w	r8, r5, r8
 8007be0:	4498      	add	r8, r3
 8007be2:	f1b8 0f00 	cmp.w	r8, #0
 8007be6:	dd71      	ble.n	8007ccc <_strtod_l+0x54c>
 8007be8:	f018 030f 	ands.w	r3, r8, #15
 8007bec:	d00a      	beq.n	8007c04 <_strtod_l+0x484>
 8007bee:	494d      	ldr	r1, [pc, #308]	; (8007d24 <_strtod_l+0x5a4>)
 8007bf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	465b      	mov	r3, fp
 8007bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bfc:	f7f8 fd0c 	bl	8000618 <__aeabi_dmul>
 8007c00:	4682      	mov	sl, r0
 8007c02:	468b      	mov	fp, r1
 8007c04:	f038 080f 	bics.w	r8, r8, #15
 8007c08:	d04d      	beq.n	8007ca6 <_strtod_l+0x526>
 8007c0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007c0e:	dd22      	ble.n	8007c56 <_strtod_l+0x4d6>
 8007c10:	2500      	movs	r5, #0
 8007c12:	462e      	mov	r6, r5
 8007c14:	9509      	str	r5, [sp, #36]	; 0x24
 8007c16:	9507      	str	r5, [sp, #28]
 8007c18:	2322      	movs	r3, #34	; 0x22
 8007c1a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007d2c <_strtod_l+0x5ac>
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	f04f 0a00 	mov.w	sl, #0
 8007c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f43f adec 	beq.w	8007804 <_strtod_l+0x84>
 8007c2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f001 fe92 	bl	8009958 <_Bfree>
 8007c34:	9907      	ldr	r1, [sp, #28]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f001 fe8e 	bl	8009958 <_Bfree>
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f001 fe8a 	bl	8009958 <_Bfree>
 8007c44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c46:	4620      	mov	r0, r4
 8007c48:	f001 fe86 	bl	8009958 <_Bfree>
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f001 fe82 	bl	8009958 <_Bfree>
 8007c54:	e5d6      	b.n	8007804 <_strtod_l+0x84>
 8007c56:	2300      	movs	r3, #0
 8007c58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	4659      	mov	r1, fp
 8007c60:	4699      	mov	r9, r3
 8007c62:	f1b8 0f01 	cmp.w	r8, #1
 8007c66:	dc21      	bgt.n	8007cac <_strtod_l+0x52c>
 8007c68:	b10b      	cbz	r3, 8007c6e <_strtod_l+0x4ee>
 8007c6a:	4682      	mov	sl, r0
 8007c6c:	468b      	mov	fp, r1
 8007c6e:	4b2e      	ldr	r3, [pc, #184]	; (8007d28 <_strtod_l+0x5a8>)
 8007c70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007c74:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007c78:	4652      	mov	r2, sl
 8007c7a:	465b      	mov	r3, fp
 8007c7c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007c80:	f7f8 fcca 	bl	8000618 <__aeabi_dmul>
 8007c84:	4b29      	ldr	r3, [pc, #164]	; (8007d2c <_strtod_l+0x5ac>)
 8007c86:	460a      	mov	r2, r1
 8007c88:	400b      	ands	r3, r1
 8007c8a:	4929      	ldr	r1, [pc, #164]	; (8007d30 <_strtod_l+0x5b0>)
 8007c8c:	428b      	cmp	r3, r1
 8007c8e:	4682      	mov	sl, r0
 8007c90:	d8be      	bhi.n	8007c10 <_strtod_l+0x490>
 8007c92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c96:	428b      	cmp	r3, r1
 8007c98:	bf86      	itte	hi
 8007c9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007d34 <_strtod_l+0x5b4>
 8007c9e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007ca2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9304      	str	r3, [sp, #16]
 8007caa:	e081      	b.n	8007db0 <_strtod_l+0x630>
 8007cac:	f018 0f01 	tst.w	r8, #1
 8007cb0:	d007      	beq.n	8007cc2 <_strtod_l+0x542>
 8007cb2:	4b1d      	ldr	r3, [pc, #116]	; (8007d28 <_strtod_l+0x5a8>)
 8007cb4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f7f8 fcac 	bl	8000618 <__aeabi_dmul>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f109 0901 	add.w	r9, r9, #1
 8007cc6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007cca:	e7ca      	b.n	8007c62 <_strtod_l+0x4e2>
 8007ccc:	d0eb      	beq.n	8007ca6 <_strtod_l+0x526>
 8007cce:	f1c8 0800 	rsb	r8, r8, #0
 8007cd2:	f018 020f 	ands.w	r2, r8, #15
 8007cd6:	d00a      	beq.n	8007cee <_strtod_l+0x56e>
 8007cd8:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <_strtod_l+0x5a4>)
 8007cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cde:	4650      	mov	r0, sl
 8007ce0:	4659      	mov	r1, fp
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 fdc1 	bl	800086c <__aeabi_ddiv>
 8007cea:	4682      	mov	sl, r0
 8007cec:	468b      	mov	fp, r1
 8007cee:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007cf2:	d0d8      	beq.n	8007ca6 <_strtod_l+0x526>
 8007cf4:	f1b8 0f1f 	cmp.w	r8, #31
 8007cf8:	dd1e      	ble.n	8007d38 <_strtod_l+0x5b8>
 8007cfa:	2500      	movs	r5, #0
 8007cfc:	462e      	mov	r6, r5
 8007cfe:	9509      	str	r5, [sp, #36]	; 0x24
 8007d00:	9507      	str	r5, [sp, #28]
 8007d02:	2322      	movs	r3, #34	; 0x22
 8007d04:	f04f 0a00 	mov.w	sl, #0
 8007d08:	f04f 0b00 	mov.w	fp, #0
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	e789      	b.n	8007c24 <_strtod_l+0x4a4>
 8007d10:	0800de31 	.word	0x0800de31
 8007d14:	0800de74 	.word	0x0800de74
 8007d18:	0800de29 	.word	0x0800de29
 8007d1c:	0800dfb4 	.word	0x0800dfb4
 8007d20:	0800e270 	.word	0x0800e270
 8007d24:	0800e150 	.word	0x0800e150
 8007d28:	0800e128 	.word	0x0800e128
 8007d2c:	7ff00000 	.word	0x7ff00000
 8007d30:	7ca00000 	.word	0x7ca00000
 8007d34:	7fefffff 	.word	0x7fefffff
 8007d38:	f018 0310 	ands.w	r3, r8, #16
 8007d3c:	bf18      	it	ne
 8007d3e:	236a      	movne	r3, #106	; 0x6a
 8007d40:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80080f8 <_strtod_l+0x978>
 8007d44:	9304      	str	r3, [sp, #16]
 8007d46:	4650      	mov	r0, sl
 8007d48:	4659      	mov	r1, fp
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f018 0f01 	tst.w	r8, #1
 8007d50:	d004      	beq.n	8007d5c <_strtod_l+0x5dc>
 8007d52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d56:	f7f8 fc5f 	bl	8000618 <__aeabi_dmul>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007d60:	f109 0908 	add.w	r9, r9, #8
 8007d64:	d1f2      	bne.n	8007d4c <_strtod_l+0x5cc>
 8007d66:	b10b      	cbz	r3, 8007d6c <_strtod_l+0x5ec>
 8007d68:	4682      	mov	sl, r0
 8007d6a:	468b      	mov	fp, r1
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	b1bb      	cbz	r3, 8007da0 <_strtod_l+0x620>
 8007d70:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007d74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	4659      	mov	r1, fp
 8007d7c:	dd10      	ble.n	8007da0 <_strtod_l+0x620>
 8007d7e:	2b1f      	cmp	r3, #31
 8007d80:	f340 8128 	ble.w	8007fd4 <_strtod_l+0x854>
 8007d84:	2b34      	cmp	r3, #52	; 0x34
 8007d86:	bfde      	ittt	le
 8007d88:	3b20      	suble	r3, #32
 8007d8a:	f04f 32ff 	movle.w	r2, #4294967295
 8007d8e:	fa02 f303 	lslle.w	r3, r2, r3
 8007d92:	f04f 0a00 	mov.w	sl, #0
 8007d96:	bfcc      	ite	gt
 8007d98:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007d9c:	ea03 0b01 	andle.w	fp, r3, r1
 8007da0:	2200      	movs	r2, #0
 8007da2:	2300      	movs	r3, #0
 8007da4:	4650      	mov	r0, sl
 8007da6:	4659      	mov	r1, fp
 8007da8:	f7f8 fe9e 	bl	8000ae8 <__aeabi_dcmpeq>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d1a4      	bne.n	8007cfa <_strtod_l+0x57a>
 8007db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007db6:	462b      	mov	r3, r5
 8007db8:	463a      	mov	r2, r7
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f001 fe38 	bl	8009a30 <__s2b>
 8007dc0:	9009      	str	r0, [sp, #36]	; 0x24
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f43f af24 	beq.w	8007c10 <_strtod_l+0x490>
 8007dc8:	9b07      	ldr	r3, [sp, #28]
 8007dca:	1b9e      	subs	r6, r3, r6
 8007dcc:	9b08      	ldr	r3, [sp, #32]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bfb4      	ite	lt
 8007dd2:	4633      	movlt	r3, r6
 8007dd4:	2300      	movge	r3, #0
 8007dd6:	9310      	str	r3, [sp, #64]	; 0x40
 8007dd8:	9b08      	ldr	r3, [sp, #32]
 8007dda:	2500      	movs	r5, #0
 8007ddc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007de0:	9318      	str	r3, [sp, #96]	; 0x60
 8007de2:	462e      	mov	r6, r5
 8007de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de6:	4620      	mov	r0, r4
 8007de8:	6859      	ldr	r1, [r3, #4]
 8007dea:	f001 fd75 	bl	80098d8 <_Balloc>
 8007dee:	9007      	str	r0, [sp, #28]
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f43f af11 	beq.w	8007c18 <_strtod_l+0x498>
 8007df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	3202      	adds	r2, #2
 8007dfc:	f103 010c 	add.w	r1, r3, #12
 8007e00:	0092      	lsls	r2, r2, #2
 8007e02:	300c      	adds	r0, #12
 8007e04:	f001 fd5a 	bl	80098bc <memcpy>
 8007e08:	ec4b ab10 	vmov	d0, sl, fp
 8007e0c:	aa20      	add	r2, sp, #128	; 0x80
 8007e0e:	a91f      	add	r1, sp, #124	; 0x7c
 8007e10:	4620      	mov	r0, r4
 8007e12:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007e16:	f002 f947 	bl	800a0a8 <__d2b>
 8007e1a:	901e      	str	r0, [sp, #120]	; 0x78
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f43f aefb 	beq.w	8007c18 <_strtod_l+0x498>
 8007e22:	2101      	movs	r1, #1
 8007e24:	4620      	mov	r0, r4
 8007e26:	f001 fe9d 	bl	8009b64 <__i2b>
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f43f aef3 	beq.w	8007c18 <_strtod_l+0x498>
 8007e32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e34:	9904      	ldr	r1, [sp, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfab      	itete	ge
 8007e3a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007e3c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007e3e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007e40:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007e44:	bfac      	ite	ge
 8007e46:	eb03 0902 	addge.w	r9, r3, r2
 8007e4a:	1ad7      	sublt	r7, r2, r3
 8007e4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e4e:	eba3 0801 	sub.w	r8, r3, r1
 8007e52:	4490      	add	r8, r2
 8007e54:	4ba3      	ldr	r3, [pc, #652]	; (80080e4 <_strtod_l+0x964>)
 8007e56:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e5a:	4598      	cmp	r8, r3
 8007e5c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e60:	f280 80cc 	bge.w	8007ffc <_strtod_l+0x87c>
 8007e64:	eba3 0308 	sub.w	r3, r3, r8
 8007e68:	2b1f      	cmp	r3, #31
 8007e6a:	eba2 0203 	sub.w	r2, r2, r3
 8007e6e:	f04f 0101 	mov.w	r1, #1
 8007e72:	f300 80b6 	bgt.w	8007fe2 <_strtod_l+0x862>
 8007e76:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7a:	9311      	str	r3, [sp, #68]	; 0x44
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e80:	eb09 0802 	add.w	r8, r9, r2
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	45c1      	cmp	r9, r8
 8007e88:	4417      	add	r7, r2
 8007e8a:	441f      	add	r7, r3
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	bfa8      	it	ge
 8007e90:	4643      	movge	r3, r8
 8007e92:	42bb      	cmp	r3, r7
 8007e94:	bfa8      	it	ge
 8007e96:	463b      	movge	r3, r7
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	bfc2      	ittt	gt
 8007e9c:	eba8 0803 	subgt.w	r8, r8, r3
 8007ea0:	1aff      	subgt	r7, r7, r3
 8007ea2:	eba9 0903 	subgt.w	r9, r9, r3
 8007ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dd17      	ble.n	8007edc <_strtod_l+0x75c>
 8007eac:	4631      	mov	r1, r6
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f001 ff13 	bl	8009cdc <__pow5mult>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	f43f aead 	beq.w	8007c18 <_strtod_l+0x498>
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f001 fe64 	bl	8009b90 <__multiply>
 8007ec8:	900f      	str	r0, [sp, #60]	; 0x3c
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	f43f aea4 	beq.w	8007c18 <_strtod_l+0x498>
 8007ed0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f001 fd40 	bl	8009958 <_Bfree>
 8007ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eda:	931e      	str	r3, [sp, #120]	; 0x78
 8007edc:	f1b8 0f00 	cmp.w	r8, #0
 8007ee0:	f300 8091 	bgt.w	8008006 <_strtod_l+0x886>
 8007ee4:	9b08      	ldr	r3, [sp, #32]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dd08      	ble.n	8007efc <_strtod_l+0x77c>
 8007eea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007eec:	9907      	ldr	r1, [sp, #28]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f001 fef4 	bl	8009cdc <__pow5mult>
 8007ef4:	9007      	str	r0, [sp, #28]
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f43f ae8e 	beq.w	8007c18 <_strtod_l+0x498>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	dd08      	ble.n	8007f12 <_strtod_l+0x792>
 8007f00:	9907      	ldr	r1, [sp, #28]
 8007f02:	463a      	mov	r2, r7
 8007f04:	4620      	mov	r0, r4
 8007f06:	f001 ff43 	bl	8009d90 <__lshift>
 8007f0a:	9007      	str	r0, [sp, #28]
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f43f ae83 	beq.w	8007c18 <_strtod_l+0x498>
 8007f12:	f1b9 0f00 	cmp.w	r9, #0
 8007f16:	dd08      	ble.n	8007f2a <_strtod_l+0x7aa>
 8007f18:	4631      	mov	r1, r6
 8007f1a:	464a      	mov	r2, r9
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f001 ff37 	bl	8009d90 <__lshift>
 8007f22:	4606      	mov	r6, r0
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f43f ae77 	beq.w	8007c18 <_strtod_l+0x498>
 8007f2a:	9a07      	ldr	r2, [sp, #28]
 8007f2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f001 ffb6 	bl	8009ea0 <__mdiff>
 8007f34:	4605      	mov	r5, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f43f ae6e 	beq.w	8007c18 <_strtod_l+0x498>
 8007f3c:	68c3      	ldr	r3, [r0, #12]
 8007f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f40:	2300      	movs	r3, #0
 8007f42:	60c3      	str	r3, [r0, #12]
 8007f44:	4631      	mov	r1, r6
 8007f46:	f001 ff8f 	bl	8009e68 <__mcmp>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	da65      	bge.n	800801a <_strtod_l+0x89a>
 8007f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f50:	ea53 030a 	orrs.w	r3, r3, sl
 8007f54:	f040 8087 	bne.w	8008066 <_strtod_l+0x8e6>
 8007f58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f040 8082 	bne.w	8008066 <_strtod_l+0x8e6>
 8007f62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f66:	0d1b      	lsrs	r3, r3, #20
 8007f68:	051b      	lsls	r3, r3, #20
 8007f6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f6e:	d97a      	bls.n	8008066 <_strtod_l+0x8e6>
 8007f70:	696b      	ldr	r3, [r5, #20]
 8007f72:	b913      	cbnz	r3, 8007f7a <_strtod_l+0x7fa>
 8007f74:	692b      	ldr	r3, [r5, #16]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	dd75      	ble.n	8008066 <_strtod_l+0x8e6>
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f001 ff06 	bl	8009d90 <__lshift>
 8007f84:	4631      	mov	r1, r6
 8007f86:	4605      	mov	r5, r0
 8007f88:	f001 ff6e 	bl	8009e68 <__mcmp>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	dd6a      	ble.n	8008066 <_strtod_l+0x8e6>
 8007f90:	9904      	ldr	r1, [sp, #16]
 8007f92:	4a55      	ldr	r2, [pc, #340]	; (80080e8 <_strtod_l+0x968>)
 8007f94:	465b      	mov	r3, fp
 8007f96:	2900      	cmp	r1, #0
 8007f98:	f000 8085 	beq.w	80080a6 <_strtod_l+0x926>
 8007f9c:	ea02 010b 	and.w	r1, r2, fp
 8007fa0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007fa4:	dc7f      	bgt.n	80080a6 <_strtod_l+0x926>
 8007fa6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007faa:	f77f aeaa 	ble.w	8007d02 <_strtod_l+0x582>
 8007fae:	4a4f      	ldr	r2, [pc, #316]	; (80080ec <_strtod_l+0x96c>)
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	f7f8 fb2b 	bl	8000618 <__aeabi_dmul>
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4303      	orrs	r3, r0
 8007fc6:	bf08      	it	eq
 8007fc8:	2322      	moveq	r3, #34	; 0x22
 8007fca:	4682      	mov	sl, r0
 8007fcc:	468b      	mov	fp, r1
 8007fce:	bf08      	it	eq
 8007fd0:	6023      	streq	r3, [r4, #0]
 8007fd2:	e62b      	b.n	8007c2c <_strtod_l+0x4ac>
 8007fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	ea03 0a0a 	and.w	sl, r3, sl
 8007fe0:	e6de      	b.n	8007da0 <_strtod_l+0x620>
 8007fe2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007fe6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007fea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007fee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007ff2:	fa01 f308 	lsl.w	r3, r1, r8
 8007ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ff8:	9111      	str	r1, [sp, #68]	; 0x44
 8007ffa:	e741      	b.n	8007e80 <_strtod_l+0x700>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8008000:	2301      	movs	r3, #1
 8008002:	9311      	str	r3, [sp, #68]	; 0x44
 8008004:	e73c      	b.n	8007e80 <_strtod_l+0x700>
 8008006:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008008:	4642      	mov	r2, r8
 800800a:	4620      	mov	r0, r4
 800800c:	f001 fec0 	bl	8009d90 <__lshift>
 8008010:	901e      	str	r0, [sp, #120]	; 0x78
 8008012:	2800      	cmp	r0, #0
 8008014:	f47f af66 	bne.w	8007ee4 <_strtod_l+0x764>
 8008018:	e5fe      	b.n	8007c18 <_strtod_l+0x498>
 800801a:	465f      	mov	r7, fp
 800801c:	d16e      	bne.n	80080fc <_strtod_l+0x97c>
 800801e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008020:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008024:	b342      	cbz	r2, 8008078 <_strtod_l+0x8f8>
 8008026:	4a32      	ldr	r2, [pc, #200]	; (80080f0 <_strtod_l+0x970>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d128      	bne.n	800807e <_strtod_l+0x8fe>
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	4650      	mov	r0, sl
 8008030:	b1eb      	cbz	r3, 800806e <_strtod_l+0x8ee>
 8008032:	4a2d      	ldr	r2, [pc, #180]	; (80080e8 <_strtod_l+0x968>)
 8008034:	403a      	ands	r2, r7
 8008036:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800803a:	f04f 31ff 	mov.w	r1, #4294967295
 800803e:	d819      	bhi.n	8008074 <_strtod_l+0x8f4>
 8008040:	0d12      	lsrs	r2, r2, #20
 8008042:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008046:	fa01 f303 	lsl.w	r3, r1, r3
 800804a:	4298      	cmp	r0, r3
 800804c:	d117      	bne.n	800807e <_strtod_l+0x8fe>
 800804e:	4b29      	ldr	r3, [pc, #164]	; (80080f4 <_strtod_l+0x974>)
 8008050:	429f      	cmp	r7, r3
 8008052:	d102      	bne.n	800805a <_strtod_l+0x8da>
 8008054:	3001      	adds	r0, #1
 8008056:	f43f addf 	beq.w	8007c18 <_strtod_l+0x498>
 800805a:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <_strtod_l+0x968>)
 800805c:	403b      	ands	r3, r7
 800805e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008062:	f04f 0a00 	mov.w	sl, #0
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1a0      	bne.n	8007fae <_strtod_l+0x82e>
 800806c:	e5de      	b.n	8007c2c <_strtod_l+0x4ac>
 800806e:	f04f 33ff 	mov.w	r3, #4294967295
 8008072:	e7ea      	b.n	800804a <_strtod_l+0x8ca>
 8008074:	460b      	mov	r3, r1
 8008076:	e7e8      	b.n	800804a <_strtod_l+0x8ca>
 8008078:	ea53 030a 	orrs.w	r3, r3, sl
 800807c:	d088      	beq.n	8007f90 <_strtod_l+0x810>
 800807e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008080:	b1db      	cbz	r3, 80080ba <_strtod_l+0x93a>
 8008082:	423b      	tst	r3, r7
 8008084:	d0ef      	beq.n	8008066 <_strtod_l+0x8e6>
 8008086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008088:	9a04      	ldr	r2, [sp, #16]
 800808a:	4650      	mov	r0, sl
 800808c:	4659      	mov	r1, fp
 800808e:	b1c3      	cbz	r3, 80080c2 <_strtod_l+0x942>
 8008090:	f7ff fb5a 	bl	8007748 <sulp>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800809c:	f7f8 f906 	bl	80002ac <__adddf3>
 80080a0:	4682      	mov	sl, r0
 80080a2:	468b      	mov	fp, r1
 80080a4:	e7df      	b.n	8008066 <_strtod_l+0x8e6>
 80080a6:	4013      	ands	r3, r2
 80080a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80080ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080b4:	f04f 3aff 	mov.w	sl, #4294967295
 80080b8:	e7d5      	b.n	8008066 <_strtod_l+0x8e6>
 80080ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080bc:	ea13 0f0a 	tst.w	r3, sl
 80080c0:	e7e0      	b.n	8008084 <_strtod_l+0x904>
 80080c2:	f7ff fb41 	bl	8007748 <sulp>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080ce:	f7f8 f8eb 	bl	80002a8 <__aeabi_dsub>
 80080d2:	2200      	movs	r2, #0
 80080d4:	2300      	movs	r3, #0
 80080d6:	4682      	mov	sl, r0
 80080d8:	468b      	mov	fp, r1
 80080da:	f7f8 fd05 	bl	8000ae8 <__aeabi_dcmpeq>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d0c1      	beq.n	8008066 <_strtod_l+0x8e6>
 80080e2:	e60e      	b.n	8007d02 <_strtod_l+0x582>
 80080e4:	fffffc02 	.word	0xfffffc02
 80080e8:	7ff00000 	.word	0x7ff00000
 80080ec:	39500000 	.word	0x39500000
 80080f0:	000fffff 	.word	0x000fffff
 80080f4:	7fefffff 	.word	0x7fefffff
 80080f8:	0800de88 	.word	0x0800de88
 80080fc:	4631      	mov	r1, r6
 80080fe:	4628      	mov	r0, r5
 8008100:	f002 f82e 	bl	800a160 <__ratio>
 8008104:	ec59 8b10 	vmov	r8, r9, d0
 8008108:	ee10 0a10 	vmov	r0, s0
 800810c:	2200      	movs	r2, #0
 800810e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008112:	4649      	mov	r1, r9
 8008114:	f7f8 fcfc 	bl	8000b10 <__aeabi_dcmple>
 8008118:	2800      	cmp	r0, #0
 800811a:	d07c      	beq.n	8008216 <_strtod_l+0xa96>
 800811c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d04c      	beq.n	80081bc <_strtod_l+0xa3c>
 8008122:	4b95      	ldr	r3, [pc, #596]	; (8008378 <_strtod_l+0xbf8>)
 8008124:	2200      	movs	r2, #0
 8008126:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800812a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008378 <_strtod_l+0xbf8>
 800812e:	f04f 0800 	mov.w	r8, #0
 8008132:	4b92      	ldr	r3, [pc, #584]	; (800837c <_strtod_l+0xbfc>)
 8008134:	403b      	ands	r3, r7
 8008136:	9311      	str	r3, [sp, #68]	; 0x44
 8008138:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800813a:	4b91      	ldr	r3, [pc, #580]	; (8008380 <_strtod_l+0xc00>)
 800813c:	429a      	cmp	r2, r3
 800813e:	f040 80b2 	bne.w	80082a6 <_strtod_l+0xb26>
 8008142:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800814a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800814e:	ec4b ab10 	vmov	d0, sl, fp
 8008152:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008156:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800815a:	f001 ff29 	bl	8009fb0 <__ulp>
 800815e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008162:	ec53 2b10 	vmov	r2, r3, d0
 8008166:	f7f8 fa57 	bl	8000618 <__aeabi_dmul>
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	f7f8 f89d 	bl	80002ac <__adddf3>
 8008172:	460b      	mov	r3, r1
 8008174:	4981      	ldr	r1, [pc, #516]	; (800837c <_strtod_l+0xbfc>)
 8008176:	4a83      	ldr	r2, [pc, #524]	; (8008384 <_strtod_l+0xc04>)
 8008178:	4019      	ands	r1, r3
 800817a:	4291      	cmp	r1, r2
 800817c:	4682      	mov	sl, r0
 800817e:	d95e      	bls.n	800823e <_strtod_l+0xabe>
 8008180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008182:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008186:	4293      	cmp	r3, r2
 8008188:	d103      	bne.n	8008192 <_strtod_l+0xa12>
 800818a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818c:	3301      	adds	r3, #1
 800818e:	f43f ad43 	beq.w	8007c18 <_strtod_l+0x498>
 8008192:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008390 <_strtod_l+0xc10>
 8008196:	f04f 3aff 	mov.w	sl, #4294967295
 800819a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800819c:	4620      	mov	r0, r4
 800819e:	f001 fbdb 	bl	8009958 <_Bfree>
 80081a2:	9907      	ldr	r1, [sp, #28]
 80081a4:	4620      	mov	r0, r4
 80081a6:	f001 fbd7 	bl	8009958 <_Bfree>
 80081aa:	4631      	mov	r1, r6
 80081ac:	4620      	mov	r0, r4
 80081ae:	f001 fbd3 	bl	8009958 <_Bfree>
 80081b2:	4629      	mov	r1, r5
 80081b4:	4620      	mov	r0, r4
 80081b6:	f001 fbcf 	bl	8009958 <_Bfree>
 80081ba:	e613      	b.n	8007de4 <_strtod_l+0x664>
 80081bc:	f1ba 0f00 	cmp.w	sl, #0
 80081c0:	d11b      	bne.n	80081fa <_strtod_l+0xa7a>
 80081c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081c6:	b9f3      	cbnz	r3, 8008206 <_strtod_l+0xa86>
 80081c8:	4b6b      	ldr	r3, [pc, #428]	; (8008378 <_strtod_l+0xbf8>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	4640      	mov	r0, r8
 80081ce:	4649      	mov	r1, r9
 80081d0:	f7f8 fc94 	bl	8000afc <__aeabi_dcmplt>
 80081d4:	b9d0      	cbnz	r0, 800820c <_strtod_l+0xa8c>
 80081d6:	4640      	mov	r0, r8
 80081d8:	4649      	mov	r1, r9
 80081da:	4b6b      	ldr	r3, [pc, #428]	; (8008388 <_strtod_l+0xc08>)
 80081dc:	2200      	movs	r2, #0
 80081de:	f7f8 fa1b 	bl	8000618 <__aeabi_dmul>
 80081e2:	4680      	mov	r8, r0
 80081e4:	4689      	mov	r9, r1
 80081e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80081ea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80081ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80081f0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80081f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80081f8:	e79b      	b.n	8008132 <_strtod_l+0x9b2>
 80081fa:	f1ba 0f01 	cmp.w	sl, #1
 80081fe:	d102      	bne.n	8008206 <_strtod_l+0xa86>
 8008200:	2f00      	cmp	r7, #0
 8008202:	f43f ad7e 	beq.w	8007d02 <_strtod_l+0x582>
 8008206:	4b61      	ldr	r3, [pc, #388]	; (800838c <_strtod_l+0xc0c>)
 8008208:	2200      	movs	r2, #0
 800820a:	e78c      	b.n	8008126 <_strtod_l+0x9a6>
 800820c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008388 <_strtod_l+0xc08>
 8008210:	f04f 0800 	mov.w	r8, #0
 8008214:	e7e7      	b.n	80081e6 <_strtod_l+0xa66>
 8008216:	4b5c      	ldr	r3, [pc, #368]	; (8008388 <_strtod_l+0xc08>)
 8008218:	4640      	mov	r0, r8
 800821a:	4649      	mov	r1, r9
 800821c:	2200      	movs	r2, #0
 800821e:	f7f8 f9fb 	bl	8000618 <__aeabi_dmul>
 8008222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008224:	4680      	mov	r8, r0
 8008226:	4689      	mov	r9, r1
 8008228:	b933      	cbnz	r3, 8008238 <_strtod_l+0xab8>
 800822a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800822e:	9012      	str	r0, [sp, #72]	; 0x48
 8008230:	9313      	str	r3, [sp, #76]	; 0x4c
 8008232:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008236:	e7dd      	b.n	80081f4 <_strtod_l+0xa74>
 8008238:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800823c:	e7f9      	b.n	8008232 <_strtod_l+0xab2>
 800823e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1a8      	bne.n	800819a <_strtod_l+0xa1a>
 8008248:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800824c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800824e:	0d1b      	lsrs	r3, r3, #20
 8008250:	051b      	lsls	r3, r3, #20
 8008252:	429a      	cmp	r2, r3
 8008254:	d1a1      	bne.n	800819a <_strtod_l+0xa1a>
 8008256:	4640      	mov	r0, r8
 8008258:	4649      	mov	r1, r9
 800825a:	f7f8 fd3d 	bl	8000cd8 <__aeabi_d2lz>
 800825e:	f7f8 f9ad 	bl	80005bc <__aeabi_l2d>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4640      	mov	r0, r8
 8008268:	4649      	mov	r1, r9
 800826a:	f7f8 f81d 	bl	80002a8 <__aeabi_dsub>
 800826e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008270:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008274:	ea43 030a 	orr.w	r3, r3, sl
 8008278:	4313      	orrs	r3, r2
 800827a:	4680      	mov	r8, r0
 800827c:	4689      	mov	r9, r1
 800827e:	d053      	beq.n	8008328 <_strtod_l+0xba8>
 8008280:	a335      	add	r3, pc, #212	; (adr r3, 8008358 <_strtod_l+0xbd8>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	f7f8 fc39 	bl	8000afc <__aeabi_dcmplt>
 800828a:	2800      	cmp	r0, #0
 800828c:	f47f acce 	bne.w	8007c2c <_strtod_l+0x4ac>
 8008290:	a333      	add	r3, pc, #204	; (adr r3, 8008360 <_strtod_l+0xbe0>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	4640      	mov	r0, r8
 8008298:	4649      	mov	r1, r9
 800829a:	f7f8 fc4d 	bl	8000b38 <__aeabi_dcmpgt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f43f af7b 	beq.w	800819a <_strtod_l+0xa1a>
 80082a4:	e4c2      	b.n	8007c2c <_strtod_l+0x4ac>
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	b333      	cbz	r3, 80082f8 <_strtod_l+0xb78>
 80082aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082b0:	d822      	bhi.n	80082f8 <_strtod_l+0xb78>
 80082b2:	a32d      	add	r3, pc, #180	; (adr r3, 8008368 <_strtod_l+0xbe8>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	4640      	mov	r0, r8
 80082ba:	4649      	mov	r1, r9
 80082bc:	f7f8 fc28 	bl	8000b10 <__aeabi_dcmple>
 80082c0:	b1a0      	cbz	r0, 80082ec <_strtod_l+0xb6c>
 80082c2:	4649      	mov	r1, r9
 80082c4:	4640      	mov	r0, r8
 80082c6:	f7f8 fc7f 	bl	8000bc8 <__aeabi_d2uiz>
 80082ca:	2801      	cmp	r0, #1
 80082cc:	bf38      	it	cc
 80082ce:	2001      	movcc	r0, #1
 80082d0:	f7f8 f928 	bl	8000524 <__aeabi_ui2d>
 80082d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082d6:	4680      	mov	r8, r0
 80082d8:	4689      	mov	r9, r1
 80082da:	bb13      	cbnz	r3, 8008322 <_strtod_l+0xba2>
 80082dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082e0:	9014      	str	r0, [sp, #80]	; 0x50
 80082e2:	9315      	str	r3, [sp, #84]	; 0x54
 80082e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80082e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80082ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80082f4:	1a9b      	subs	r3, r3, r2
 80082f6:	930d      	str	r3, [sp, #52]	; 0x34
 80082f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082fc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008300:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008304:	f001 fe54 	bl	8009fb0 <__ulp>
 8008308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800830c:	ec53 2b10 	vmov	r2, r3, d0
 8008310:	f7f8 f982 	bl	8000618 <__aeabi_dmul>
 8008314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008318:	f7f7 ffc8 	bl	80002ac <__adddf3>
 800831c:	4682      	mov	sl, r0
 800831e:	468b      	mov	fp, r1
 8008320:	e78f      	b.n	8008242 <_strtod_l+0xac2>
 8008322:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008326:	e7dd      	b.n	80082e4 <_strtod_l+0xb64>
 8008328:	a311      	add	r3, pc, #68	; (adr r3, 8008370 <_strtod_l+0xbf0>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 fbe5 	bl	8000afc <__aeabi_dcmplt>
 8008332:	e7b4      	b.n	800829e <_strtod_l+0xb1e>
 8008334:	2300      	movs	r3, #0
 8008336:	930e      	str	r3, [sp, #56]	; 0x38
 8008338:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800833a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	f7ff ba65 	b.w	800780c <_strtod_l+0x8c>
 8008342:	2b65      	cmp	r3, #101	; 0x65
 8008344:	f43f ab5d 	beq.w	8007a02 <_strtod_l+0x282>
 8008348:	2b45      	cmp	r3, #69	; 0x45
 800834a:	f43f ab5a 	beq.w	8007a02 <_strtod_l+0x282>
 800834e:	2201      	movs	r2, #1
 8008350:	f7ff bb92 	b.w	8007a78 <_strtod_l+0x2f8>
 8008354:	f3af 8000 	nop.w
 8008358:	94a03595 	.word	0x94a03595
 800835c:	3fdfffff 	.word	0x3fdfffff
 8008360:	35afe535 	.word	0x35afe535
 8008364:	3fe00000 	.word	0x3fe00000
 8008368:	ffc00000 	.word	0xffc00000
 800836c:	41dfffff 	.word	0x41dfffff
 8008370:	94a03595 	.word	0x94a03595
 8008374:	3fcfffff 	.word	0x3fcfffff
 8008378:	3ff00000 	.word	0x3ff00000
 800837c:	7ff00000 	.word	0x7ff00000
 8008380:	7fe00000 	.word	0x7fe00000
 8008384:	7c9fffff 	.word	0x7c9fffff
 8008388:	3fe00000 	.word	0x3fe00000
 800838c:	bff00000 	.word	0xbff00000
 8008390:	7fefffff 	.word	0x7fefffff

08008394 <_strtod_r>:
 8008394:	4b01      	ldr	r3, [pc, #4]	; (800839c <_strtod_r+0x8>)
 8008396:	f7ff b9f3 	b.w	8007780 <_strtod_l>
 800839a:	bf00      	nop
 800839c:	200001b8 	.word	0x200001b8

080083a0 <_strtol_l.isra.0>:
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a6:	d001      	beq.n	80083ac <_strtol_l.isra.0+0xc>
 80083a8:	2b24      	cmp	r3, #36	; 0x24
 80083aa:	d906      	bls.n	80083ba <_strtol_l.isra.0+0x1a>
 80083ac:	f7fe fafa 	bl	80069a4 <__errno>
 80083b0:	2316      	movs	r3, #22
 80083b2:	6003      	str	r3, [r0, #0]
 80083b4:	2000      	movs	r0, #0
 80083b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ba:	4f3a      	ldr	r7, [pc, #232]	; (80084a4 <_strtol_l.isra.0+0x104>)
 80083bc:	468e      	mov	lr, r1
 80083be:	4676      	mov	r6, lr
 80083c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80083c4:	5de5      	ldrb	r5, [r4, r7]
 80083c6:	f015 0508 	ands.w	r5, r5, #8
 80083ca:	d1f8      	bne.n	80083be <_strtol_l.isra.0+0x1e>
 80083cc:	2c2d      	cmp	r4, #45	; 0x2d
 80083ce:	d134      	bne.n	800843a <_strtol_l.isra.0+0x9a>
 80083d0:	f89e 4000 	ldrb.w	r4, [lr]
 80083d4:	f04f 0801 	mov.w	r8, #1
 80083d8:	f106 0e02 	add.w	lr, r6, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d05c      	beq.n	800849a <_strtol_l.isra.0+0xfa>
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d10c      	bne.n	80083fe <_strtol_l.isra.0+0x5e>
 80083e4:	2c30      	cmp	r4, #48	; 0x30
 80083e6:	d10a      	bne.n	80083fe <_strtol_l.isra.0+0x5e>
 80083e8:	f89e 4000 	ldrb.w	r4, [lr]
 80083ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80083f0:	2c58      	cmp	r4, #88	; 0x58
 80083f2:	d14d      	bne.n	8008490 <_strtol_l.isra.0+0xf0>
 80083f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80083f8:	2310      	movs	r3, #16
 80083fa:	f10e 0e02 	add.w	lr, lr, #2
 80083fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008402:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008406:	2600      	movs	r6, #0
 8008408:	fbbc f9f3 	udiv	r9, ip, r3
 800840c:	4635      	mov	r5, r6
 800840e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008412:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008416:	2f09      	cmp	r7, #9
 8008418:	d818      	bhi.n	800844c <_strtol_l.isra.0+0xac>
 800841a:	463c      	mov	r4, r7
 800841c:	42a3      	cmp	r3, r4
 800841e:	dd24      	ble.n	800846a <_strtol_l.isra.0+0xca>
 8008420:	2e00      	cmp	r6, #0
 8008422:	db1f      	blt.n	8008464 <_strtol_l.isra.0+0xc4>
 8008424:	45a9      	cmp	r9, r5
 8008426:	d31d      	bcc.n	8008464 <_strtol_l.isra.0+0xc4>
 8008428:	d101      	bne.n	800842e <_strtol_l.isra.0+0x8e>
 800842a:	45a2      	cmp	sl, r4
 800842c:	db1a      	blt.n	8008464 <_strtol_l.isra.0+0xc4>
 800842e:	fb05 4503 	mla	r5, r5, r3, r4
 8008432:	2601      	movs	r6, #1
 8008434:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008438:	e7eb      	b.n	8008412 <_strtol_l.isra.0+0x72>
 800843a:	2c2b      	cmp	r4, #43	; 0x2b
 800843c:	bf08      	it	eq
 800843e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008442:	46a8      	mov	r8, r5
 8008444:	bf08      	it	eq
 8008446:	f106 0e02 	addeq.w	lr, r6, #2
 800844a:	e7c7      	b.n	80083dc <_strtol_l.isra.0+0x3c>
 800844c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008450:	2f19      	cmp	r7, #25
 8008452:	d801      	bhi.n	8008458 <_strtol_l.isra.0+0xb8>
 8008454:	3c37      	subs	r4, #55	; 0x37
 8008456:	e7e1      	b.n	800841c <_strtol_l.isra.0+0x7c>
 8008458:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800845c:	2f19      	cmp	r7, #25
 800845e:	d804      	bhi.n	800846a <_strtol_l.isra.0+0xca>
 8008460:	3c57      	subs	r4, #87	; 0x57
 8008462:	e7db      	b.n	800841c <_strtol_l.isra.0+0x7c>
 8008464:	f04f 36ff 	mov.w	r6, #4294967295
 8008468:	e7e4      	b.n	8008434 <_strtol_l.isra.0+0x94>
 800846a:	2e00      	cmp	r6, #0
 800846c:	da05      	bge.n	800847a <_strtol_l.isra.0+0xda>
 800846e:	2322      	movs	r3, #34	; 0x22
 8008470:	6003      	str	r3, [r0, #0]
 8008472:	4665      	mov	r5, ip
 8008474:	b942      	cbnz	r2, 8008488 <_strtol_l.isra.0+0xe8>
 8008476:	4628      	mov	r0, r5
 8008478:	e79d      	b.n	80083b6 <_strtol_l.isra.0+0x16>
 800847a:	f1b8 0f00 	cmp.w	r8, #0
 800847e:	d000      	beq.n	8008482 <_strtol_l.isra.0+0xe2>
 8008480:	426d      	negs	r5, r5
 8008482:	2a00      	cmp	r2, #0
 8008484:	d0f7      	beq.n	8008476 <_strtol_l.isra.0+0xd6>
 8008486:	b10e      	cbz	r6, 800848c <_strtol_l.isra.0+0xec>
 8008488:	f10e 31ff 	add.w	r1, lr, #4294967295
 800848c:	6011      	str	r1, [r2, #0]
 800848e:	e7f2      	b.n	8008476 <_strtol_l.isra.0+0xd6>
 8008490:	2430      	movs	r4, #48	; 0x30
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1b3      	bne.n	80083fe <_strtol_l.isra.0+0x5e>
 8008496:	2308      	movs	r3, #8
 8008498:	e7b1      	b.n	80083fe <_strtol_l.isra.0+0x5e>
 800849a:	2c30      	cmp	r4, #48	; 0x30
 800849c:	d0a4      	beq.n	80083e8 <_strtol_l.isra.0+0x48>
 800849e:	230a      	movs	r3, #10
 80084a0:	e7ad      	b.n	80083fe <_strtol_l.isra.0+0x5e>
 80084a2:	bf00      	nop
 80084a4:	0800deb1 	.word	0x0800deb1

080084a8 <_strtol_r>:
 80084a8:	f7ff bf7a 	b.w	80083a0 <_strtol_l.isra.0>

080084ac <quorem>:
 80084ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	6903      	ldr	r3, [r0, #16]
 80084b2:	690c      	ldr	r4, [r1, #16]
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	4607      	mov	r7, r0
 80084b8:	f2c0 8081 	blt.w	80085be <quorem+0x112>
 80084bc:	3c01      	subs	r4, #1
 80084be:	f101 0814 	add.w	r8, r1, #20
 80084c2:	f100 0514 	add.w	r5, r0, #20
 80084c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084d4:	3301      	adds	r3, #1
 80084d6:	429a      	cmp	r2, r3
 80084d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80084e4:	d331      	bcc.n	800854a <quorem+0x9e>
 80084e6:	f04f 0e00 	mov.w	lr, #0
 80084ea:	4640      	mov	r0, r8
 80084ec:	46ac      	mov	ip, r5
 80084ee:	46f2      	mov	sl, lr
 80084f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80084f4:	b293      	uxth	r3, r2
 80084f6:	fb06 e303 	mla	r3, r6, r3, lr
 80084fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80084fe:	b29b      	uxth	r3, r3
 8008500:	ebaa 0303 	sub.w	r3, sl, r3
 8008504:	0c12      	lsrs	r2, r2, #16
 8008506:	f8dc a000 	ldr.w	sl, [ip]
 800850a:	fb06 e202 	mla	r2, r6, r2, lr
 800850e:	fa13 f38a 	uxtah	r3, r3, sl
 8008512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008516:	fa1f fa82 	uxth.w	sl, r2
 800851a:	f8dc 2000 	ldr.w	r2, [ip]
 800851e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008522:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008526:	b29b      	uxth	r3, r3
 8008528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800852c:	4581      	cmp	r9, r0
 800852e:	f84c 3b04 	str.w	r3, [ip], #4
 8008532:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008536:	d2db      	bcs.n	80084f0 <quorem+0x44>
 8008538:	f855 300b 	ldr.w	r3, [r5, fp]
 800853c:	b92b      	cbnz	r3, 800854a <quorem+0x9e>
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	3b04      	subs	r3, #4
 8008542:	429d      	cmp	r5, r3
 8008544:	461a      	mov	r2, r3
 8008546:	d32e      	bcc.n	80085a6 <quorem+0xfa>
 8008548:	613c      	str	r4, [r7, #16]
 800854a:	4638      	mov	r0, r7
 800854c:	f001 fc8c 	bl	8009e68 <__mcmp>
 8008550:	2800      	cmp	r0, #0
 8008552:	db24      	blt.n	800859e <quorem+0xf2>
 8008554:	3601      	adds	r6, #1
 8008556:	4628      	mov	r0, r5
 8008558:	f04f 0c00 	mov.w	ip, #0
 800855c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008560:	f8d0 e000 	ldr.w	lr, [r0]
 8008564:	b293      	uxth	r3, r2
 8008566:	ebac 0303 	sub.w	r3, ip, r3
 800856a:	0c12      	lsrs	r2, r2, #16
 800856c:	fa13 f38e 	uxtah	r3, r3, lr
 8008570:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008578:	b29b      	uxth	r3, r3
 800857a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800857e:	45c1      	cmp	r9, r8
 8008580:	f840 3b04 	str.w	r3, [r0], #4
 8008584:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008588:	d2e8      	bcs.n	800855c <quorem+0xb0>
 800858a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800858e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008592:	b922      	cbnz	r2, 800859e <quorem+0xf2>
 8008594:	3b04      	subs	r3, #4
 8008596:	429d      	cmp	r5, r3
 8008598:	461a      	mov	r2, r3
 800859a:	d30a      	bcc.n	80085b2 <quorem+0x106>
 800859c:	613c      	str	r4, [r7, #16]
 800859e:	4630      	mov	r0, r6
 80085a0:	b003      	add	sp, #12
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	6812      	ldr	r2, [r2, #0]
 80085a8:	3b04      	subs	r3, #4
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	d1cc      	bne.n	8008548 <quorem+0x9c>
 80085ae:	3c01      	subs	r4, #1
 80085b0:	e7c7      	b.n	8008542 <quorem+0x96>
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	3b04      	subs	r3, #4
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	d1f0      	bne.n	800859c <quorem+0xf0>
 80085ba:	3c01      	subs	r4, #1
 80085bc:	e7eb      	b.n	8008596 <quorem+0xea>
 80085be:	2000      	movs	r0, #0
 80085c0:	e7ee      	b.n	80085a0 <quorem+0xf4>
 80085c2:	0000      	movs	r0, r0
 80085c4:	0000      	movs	r0, r0
	...

080085c8 <_dtoa_r>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	ed2d 8b02 	vpush	{d8}
 80085d0:	ec57 6b10 	vmov	r6, r7, d0
 80085d4:	b095      	sub	sp, #84	; 0x54
 80085d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085dc:	9105      	str	r1, [sp, #20]
 80085de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80085e2:	4604      	mov	r4, r0
 80085e4:	9209      	str	r2, [sp, #36]	; 0x24
 80085e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085e8:	b975      	cbnz	r5, 8008608 <_dtoa_r+0x40>
 80085ea:	2010      	movs	r0, #16
 80085ec:	f001 f94c 	bl	8009888 <malloc>
 80085f0:	4602      	mov	r2, r0
 80085f2:	6260      	str	r0, [r4, #36]	; 0x24
 80085f4:	b920      	cbnz	r0, 8008600 <_dtoa_r+0x38>
 80085f6:	4bb2      	ldr	r3, [pc, #712]	; (80088c0 <_dtoa_r+0x2f8>)
 80085f8:	21ea      	movs	r1, #234	; 0xea
 80085fa:	48b2      	ldr	r0, [pc, #712]	; (80088c4 <_dtoa_r+0x2fc>)
 80085fc:	f002 f874 	bl	800a6e8 <__assert_func>
 8008600:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008604:	6005      	str	r5, [r0, #0]
 8008606:	60c5      	str	r5, [r0, #12]
 8008608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800860a:	6819      	ldr	r1, [r3, #0]
 800860c:	b151      	cbz	r1, 8008624 <_dtoa_r+0x5c>
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	604a      	str	r2, [r1, #4]
 8008612:	2301      	movs	r3, #1
 8008614:	4093      	lsls	r3, r2
 8008616:	608b      	str	r3, [r1, #8]
 8008618:	4620      	mov	r0, r4
 800861a:	f001 f99d 	bl	8009958 <_Bfree>
 800861e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	1e3b      	subs	r3, r7, #0
 8008626:	bfb9      	ittee	lt
 8008628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800862c:	9303      	strlt	r3, [sp, #12]
 800862e:	2300      	movge	r3, #0
 8008630:	f8c8 3000 	strge.w	r3, [r8]
 8008634:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008638:	4ba3      	ldr	r3, [pc, #652]	; (80088c8 <_dtoa_r+0x300>)
 800863a:	bfbc      	itt	lt
 800863c:	2201      	movlt	r2, #1
 800863e:	f8c8 2000 	strlt.w	r2, [r8]
 8008642:	ea33 0309 	bics.w	r3, r3, r9
 8008646:	d11b      	bne.n	8008680 <_dtoa_r+0xb8>
 8008648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800864a:	f242 730f 	movw	r3, #9999	; 0x270f
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008654:	4333      	orrs	r3, r6
 8008656:	f000 857a 	beq.w	800914e <_dtoa_r+0xb86>
 800865a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800865c:	b963      	cbnz	r3, 8008678 <_dtoa_r+0xb0>
 800865e:	4b9b      	ldr	r3, [pc, #620]	; (80088cc <_dtoa_r+0x304>)
 8008660:	e024      	b.n	80086ac <_dtoa_r+0xe4>
 8008662:	4b9b      	ldr	r3, [pc, #620]	; (80088d0 <_dtoa_r+0x308>)
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	3308      	adds	r3, #8
 8008668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	9800      	ldr	r0, [sp, #0]
 800866e:	b015      	add	sp, #84	; 0x54
 8008670:	ecbd 8b02 	vpop	{d8}
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	4b94      	ldr	r3, [pc, #592]	; (80088cc <_dtoa_r+0x304>)
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	3303      	adds	r3, #3
 800867e:	e7f3      	b.n	8008668 <_dtoa_r+0xa0>
 8008680:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	ec51 0b17 	vmov	r0, r1, d7
 800868a:	2300      	movs	r3, #0
 800868c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008690:	f7f8 fa2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008694:	4680      	mov	r8, r0
 8008696:	b158      	cbz	r0, 80086b0 <_dtoa_r+0xe8>
 8008698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800869a:	2301      	movs	r3, #1
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8551 	beq.w	8009148 <_dtoa_r+0xb80>
 80086a6:	488b      	ldr	r0, [pc, #556]	; (80088d4 <_dtoa_r+0x30c>)
 80086a8:	6018      	str	r0, [r3, #0]
 80086aa:	1e43      	subs	r3, r0, #1
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	e7dd      	b.n	800866c <_dtoa_r+0xa4>
 80086b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80086b4:	aa12      	add	r2, sp, #72	; 0x48
 80086b6:	a913      	add	r1, sp, #76	; 0x4c
 80086b8:	4620      	mov	r0, r4
 80086ba:	f001 fcf5 	bl	800a0a8 <__d2b>
 80086be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086c2:	4683      	mov	fp, r0
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	d07c      	beq.n	80087c2 <_dtoa_r+0x1fa>
 80086c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80086ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80086d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80086da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80086de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086e2:	4b7d      	ldr	r3, [pc, #500]	; (80088d8 <_dtoa_r+0x310>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	4630      	mov	r0, r6
 80086e8:	4639      	mov	r1, r7
 80086ea:	f7f7 fddd 	bl	80002a8 <__aeabi_dsub>
 80086ee:	a36e      	add	r3, pc, #440	; (adr r3, 80088a8 <_dtoa_r+0x2e0>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 ff90 	bl	8000618 <__aeabi_dmul>
 80086f8:	a36d      	add	r3, pc, #436	; (adr r3, 80088b0 <_dtoa_r+0x2e8>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 fdd5 	bl	80002ac <__adddf3>
 8008702:	4606      	mov	r6, r0
 8008704:	4628      	mov	r0, r5
 8008706:	460f      	mov	r7, r1
 8008708:	f7f7 ff1c 	bl	8000544 <__aeabi_i2d>
 800870c:	a36a      	add	r3, pc, #424	; (adr r3, 80088b8 <_dtoa_r+0x2f0>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f7 ff81 	bl	8000618 <__aeabi_dmul>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4630      	mov	r0, r6
 800871c:	4639      	mov	r1, r7
 800871e:	f7f7 fdc5 	bl	80002ac <__adddf3>
 8008722:	4606      	mov	r6, r0
 8008724:	460f      	mov	r7, r1
 8008726:	f7f8 fa27 	bl	8000b78 <__aeabi_d2iz>
 800872a:	2200      	movs	r2, #0
 800872c:	4682      	mov	sl, r0
 800872e:	2300      	movs	r3, #0
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f8 f9e2 	bl	8000afc <__aeabi_dcmplt>
 8008738:	b148      	cbz	r0, 800874e <_dtoa_r+0x186>
 800873a:	4650      	mov	r0, sl
 800873c:	f7f7 ff02 	bl	8000544 <__aeabi_i2d>
 8008740:	4632      	mov	r2, r6
 8008742:	463b      	mov	r3, r7
 8008744:	f7f8 f9d0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008748:	b908      	cbnz	r0, 800874e <_dtoa_r+0x186>
 800874a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800874e:	f1ba 0f16 	cmp.w	sl, #22
 8008752:	d854      	bhi.n	80087fe <_dtoa_r+0x236>
 8008754:	4b61      	ldr	r3, [pc, #388]	; (80088dc <_dtoa_r+0x314>)
 8008756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008762:	f7f8 f9cb 	bl	8000afc <__aeabi_dcmplt>
 8008766:	2800      	cmp	r0, #0
 8008768:	d04b      	beq.n	8008802 <_dtoa_r+0x23a>
 800876a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800876e:	2300      	movs	r3, #0
 8008770:	930e      	str	r3, [sp, #56]	; 0x38
 8008772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008774:	1b5d      	subs	r5, r3, r5
 8008776:	1e6b      	subs	r3, r5, #1
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	bf43      	ittte	mi
 800877c:	2300      	movmi	r3, #0
 800877e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008782:	9304      	strmi	r3, [sp, #16]
 8008784:	f04f 0800 	movpl.w	r8, #0
 8008788:	f1ba 0f00 	cmp.w	sl, #0
 800878c:	db3b      	blt.n	8008806 <_dtoa_r+0x23e>
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008794:	4453      	add	r3, sl
 8008796:	9304      	str	r3, [sp, #16]
 8008798:	2300      	movs	r3, #0
 800879a:	9306      	str	r3, [sp, #24]
 800879c:	9b05      	ldr	r3, [sp, #20]
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d869      	bhi.n	8008876 <_dtoa_r+0x2ae>
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	bfc4      	itt	gt
 80087a6:	3b04      	subgt	r3, #4
 80087a8:	9305      	strgt	r3, [sp, #20]
 80087aa:	9b05      	ldr	r3, [sp, #20]
 80087ac:	f1a3 0302 	sub.w	r3, r3, #2
 80087b0:	bfcc      	ite	gt
 80087b2:	2500      	movgt	r5, #0
 80087b4:	2501      	movle	r5, #1
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d869      	bhi.n	800888e <_dtoa_r+0x2c6>
 80087ba:	e8df f003 	tbb	[pc, r3]
 80087be:	4e2c      	.short	0x4e2c
 80087c0:	5a4c      	.short	0x5a4c
 80087c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80087c6:	441d      	add	r5, r3
 80087c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	bfc1      	itttt	gt
 80087d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80087d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80087dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80087e0:	bfda      	itte	le
 80087e2:	f1c3 0320 	rsble	r3, r3, #32
 80087e6:	fa06 f003 	lslle.w	r0, r6, r3
 80087ea:	4318      	orrgt	r0, r3
 80087ec:	f7f7 fe9a 	bl	8000524 <__aeabi_ui2d>
 80087f0:	2301      	movs	r3, #1
 80087f2:	4606      	mov	r6, r0
 80087f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80087f8:	3d01      	subs	r5, #1
 80087fa:	9310      	str	r3, [sp, #64]	; 0x40
 80087fc:	e771      	b.n	80086e2 <_dtoa_r+0x11a>
 80087fe:	2301      	movs	r3, #1
 8008800:	e7b6      	b.n	8008770 <_dtoa_r+0x1a8>
 8008802:	900e      	str	r0, [sp, #56]	; 0x38
 8008804:	e7b5      	b.n	8008772 <_dtoa_r+0x1aa>
 8008806:	f1ca 0300 	rsb	r3, sl, #0
 800880a:	9306      	str	r3, [sp, #24]
 800880c:	2300      	movs	r3, #0
 800880e:	eba8 080a 	sub.w	r8, r8, sl
 8008812:	930d      	str	r3, [sp, #52]	; 0x34
 8008814:	e7c2      	b.n	800879c <_dtoa_r+0x1d4>
 8008816:	2300      	movs	r3, #0
 8008818:	9308      	str	r3, [sp, #32]
 800881a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881c:	2b00      	cmp	r3, #0
 800881e:	dc39      	bgt.n	8008894 <_dtoa_r+0x2cc>
 8008820:	f04f 0901 	mov.w	r9, #1
 8008824:	f8cd 9004 	str.w	r9, [sp, #4]
 8008828:	464b      	mov	r3, r9
 800882a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800882e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008830:	2200      	movs	r2, #0
 8008832:	6042      	str	r2, [r0, #4]
 8008834:	2204      	movs	r2, #4
 8008836:	f102 0614 	add.w	r6, r2, #20
 800883a:	429e      	cmp	r6, r3
 800883c:	6841      	ldr	r1, [r0, #4]
 800883e:	d92f      	bls.n	80088a0 <_dtoa_r+0x2d8>
 8008840:	4620      	mov	r0, r4
 8008842:	f001 f849 	bl	80098d8 <_Balloc>
 8008846:	9000      	str	r0, [sp, #0]
 8008848:	2800      	cmp	r0, #0
 800884a:	d14b      	bne.n	80088e4 <_dtoa_r+0x31c>
 800884c:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <_dtoa_r+0x318>)
 800884e:	4602      	mov	r2, r0
 8008850:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008854:	e6d1      	b.n	80085fa <_dtoa_r+0x32>
 8008856:	2301      	movs	r3, #1
 8008858:	e7de      	b.n	8008818 <_dtoa_r+0x250>
 800885a:	2300      	movs	r3, #0
 800885c:	9308      	str	r3, [sp, #32]
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	eb0a 0903 	add.w	r9, sl, r3
 8008864:	f109 0301 	add.w	r3, r9, #1
 8008868:	2b01      	cmp	r3, #1
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	bfb8      	it	lt
 800886e:	2301      	movlt	r3, #1
 8008870:	e7dd      	b.n	800882e <_dtoa_r+0x266>
 8008872:	2301      	movs	r3, #1
 8008874:	e7f2      	b.n	800885c <_dtoa_r+0x294>
 8008876:	2501      	movs	r5, #1
 8008878:	2300      	movs	r3, #0
 800887a:	9305      	str	r3, [sp, #20]
 800887c:	9508      	str	r5, [sp, #32]
 800887e:	f04f 39ff 	mov.w	r9, #4294967295
 8008882:	2200      	movs	r2, #0
 8008884:	f8cd 9004 	str.w	r9, [sp, #4]
 8008888:	2312      	movs	r3, #18
 800888a:	9209      	str	r2, [sp, #36]	; 0x24
 800888c:	e7cf      	b.n	800882e <_dtoa_r+0x266>
 800888e:	2301      	movs	r3, #1
 8008890:	9308      	str	r3, [sp, #32]
 8008892:	e7f4      	b.n	800887e <_dtoa_r+0x2b6>
 8008894:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008898:	f8cd 9004 	str.w	r9, [sp, #4]
 800889c:	464b      	mov	r3, r9
 800889e:	e7c6      	b.n	800882e <_dtoa_r+0x266>
 80088a0:	3101      	adds	r1, #1
 80088a2:	6041      	str	r1, [r0, #4]
 80088a4:	0052      	lsls	r2, r2, #1
 80088a6:	e7c6      	b.n	8008836 <_dtoa_r+0x26e>
 80088a8:	636f4361 	.word	0x636f4361
 80088ac:	3fd287a7 	.word	0x3fd287a7
 80088b0:	8b60c8b3 	.word	0x8b60c8b3
 80088b4:	3fc68a28 	.word	0x3fc68a28
 80088b8:	509f79fb 	.word	0x509f79fb
 80088bc:	3fd34413 	.word	0x3fd34413
 80088c0:	0800dfbe 	.word	0x0800dfbe
 80088c4:	0800dfd5 	.word	0x0800dfd5
 80088c8:	7ff00000 	.word	0x7ff00000
 80088cc:	0800dfba 	.word	0x0800dfba
 80088d0:	0800dfb1 	.word	0x0800dfb1
 80088d4:	0800de35 	.word	0x0800de35
 80088d8:	3ff80000 	.word	0x3ff80000
 80088dc:	0800e150 	.word	0x0800e150
 80088e0:	0800e034 	.word	0x0800e034
 80088e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088e6:	9a00      	ldr	r2, [sp, #0]
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	9b01      	ldr	r3, [sp, #4]
 80088ec:	2b0e      	cmp	r3, #14
 80088ee:	f200 80ad 	bhi.w	8008a4c <_dtoa_r+0x484>
 80088f2:	2d00      	cmp	r5, #0
 80088f4:	f000 80aa 	beq.w	8008a4c <_dtoa_r+0x484>
 80088f8:	f1ba 0f00 	cmp.w	sl, #0
 80088fc:	dd36      	ble.n	800896c <_dtoa_r+0x3a4>
 80088fe:	4ac3      	ldr	r2, [pc, #780]	; (8008c0c <_dtoa_r+0x644>)
 8008900:	f00a 030f 	and.w	r3, sl, #15
 8008904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008908:	ed93 7b00 	vldr	d7, [r3]
 800890c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008910:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008914:	eeb0 8a47 	vmov.f32	s16, s14
 8008918:	eef0 8a67 	vmov.f32	s17, s15
 800891c:	d016      	beq.n	800894c <_dtoa_r+0x384>
 800891e:	4bbc      	ldr	r3, [pc, #752]	; (8008c10 <_dtoa_r+0x648>)
 8008920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008924:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008928:	f7f7 ffa0 	bl	800086c <__aeabi_ddiv>
 800892c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008930:	f007 070f 	and.w	r7, r7, #15
 8008934:	2503      	movs	r5, #3
 8008936:	4eb6      	ldr	r6, [pc, #728]	; (8008c10 <_dtoa_r+0x648>)
 8008938:	b957      	cbnz	r7, 8008950 <_dtoa_r+0x388>
 800893a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893e:	ec53 2b18 	vmov	r2, r3, d8
 8008942:	f7f7 ff93 	bl	800086c <__aeabi_ddiv>
 8008946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800894a:	e029      	b.n	80089a0 <_dtoa_r+0x3d8>
 800894c:	2502      	movs	r5, #2
 800894e:	e7f2      	b.n	8008936 <_dtoa_r+0x36e>
 8008950:	07f9      	lsls	r1, r7, #31
 8008952:	d508      	bpl.n	8008966 <_dtoa_r+0x39e>
 8008954:	ec51 0b18 	vmov	r0, r1, d8
 8008958:	e9d6 2300 	ldrd	r2, r3, [r6]
 800895c:	f7f7 fe5c 	bl	8000618 <__aeabi_dmul>
 8008960:	ec41 0b18 	vmov	d8, r0, r1
 8008964:	3501      	adds	r5, #1
 8008966:	107f      	asrs	r7, r7, #1
 8008968:	3608      	adds	r6, #8
 800896a:	e7e5      	b.n	8008938 <_dtoa_r+0x370>
 800896c:	f000 80a6 	beq.w	8008abc <_dtoa_r+0x4f4>
 8008970:	f1ca 0600 	rsb	r6, sl, #0
 8008974:	4ba5      	ldr	r3, [pc, #660]	; (8008c0c <_dtoa_r+0x644>)
 8008976:	4fa6      	ldr	r7, [pc, #664]	; (8008c10 <_dtoa_r+0x648>)
 8008978:	f006 020f 	and.w	r2, r6, #15
 800897c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008988:	f7f7 fe46 	bl	8000618 <__aeabi_dmul>
 800898c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008990:	1136      	asrs	r6, r6, #4
 8008992:	2300      	movs	r3, #0
 8008994:	2502      	movs	r5, #2
 8008996:	2e00      	cmp	r6, #0
 8008998:	f040 8085 	bne.w	8008aa6 <_dtoa_r+0x4de>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1d2      	bne.n	8008946 <_dtoa_r+0x37e>
 80089a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 808c 	beq.w	8008ac0 <_dtoa_r+0x4f8>
 80089a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089ac:	4b99      	ldr	r3, [pc, #612]	; (8008c14 <_dtoa_r+0x64c>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f8 f8a2 	bl	8000afc <__aeabi_dcmplt>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f000 8081 	beq.w	8008ac0 <_dtoa_r+0x4f8>
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d07d      	beq.n	8008ac0 <_dtoa_r+0x4f8>
 80089c4:	f1b9 0f00 	cmp.w	r9, #0
 80089c8:	dd3c      	ble.n	8008a44 <_dtoa_r+0x47c>
 80089ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80089ce:	9307      	str	r3, [sp, #28]
 80089d0:	2200      	movs	r2, #0
 80089d2:	4b91      	ldr	r3, [pc, #580]	; (8008c18 <_dtoa_r+0x650>)
 80089d4:	4630      	mov	r0, r6
 80089d6:	4639      	mov	r1, r7
 80089d8:	f7f7 fe1e 	bl	8000618 <__aeabi_dmul>
 80089dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089e0:	3501      	adds	r5, #1
 80089e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80089e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089ea:	4628      	mov	r0, r5
 80089ec:	f7f7 fdaa 	bl	8000544 <__aeabi_i2d>
 80089f0:	4632      	mov	r2, r6
 80089f2:	463b      	mov	r3, r7
 80089f4:	f7f7 fe10 	bl	8000618 <__aeabi_dmul>
 80089f8:	4b88      	ldr	r3, [pc, #544]	; (8008c1c <_dtoa_r+0x654>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	f7f7 fc56 	bl	80002ac <__adddf3>
 8008a00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a08:	9303      	str	r3, [sp, #12]
 8008a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d15c      	bne.n	8008aca <_dtoa_r+0x502>
 8008a10:	4b83      	ldr	r3, [pc, #524]	; (8008c20 <_dtoa_r+0x658>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	f7f7 fc46 	bl	80002a8 <__aeabi_dsub>
 8008a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a20:	4606      	mov	r6, r0
 8008a22:	460f      	mov	r7, r1
 8008a24:	f7f8 f888 	bl	8000b38 <__aeabi_dcmpgt>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	f040 8296 	bne.w	8008f5a <_dtoa_r+0x992>
 8008a2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a32:	4630      	mov	r0, r6
 8008a34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a38:	4639      	mov	r1, r7
 8008a3a:	f7f8 f85f 	bl	8000afc <__aeabi_dcmplt>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f040 8288 	bne.w	8008f54 <_dtoa_r+0x98c>
 8008a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f2c0 8158 	blt.w	8008d04 <_dtoa_r+0x73c>
 8008a54:	f1ba 0f0e 	cmp.w	sl, #14
 8008a58:	f300 8154 	bgt.w	8008d04 <_dtoa_r+0x73c>
 8008a5c:	4b6b      	ldr	r3, [pc, #428]	; (8008c0c <_dtoa_r+0x644>)
 8008a5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f280 80e3 	bge.w	8008c34 <_dtoa_r+0x66c>
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f300 80df 	bgt.w	8008c34 <_dtoa_r+0x66c>
 8008a76:	f040 826d 	bne.w	8008f54 <_dtoa_r+0x98c>
 8008a7a:	4b69      	ldr	r3, [pc, #420]	; (8008c20 <_dtoa_r+0x658>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	4640      	mov	r0, r8
 8008a80:	4649      	mov	r1, r9
 8008a82:	f7f7 fdc9 	bl	8000618 <__aeabi_dmul>
 8008a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a8a:	f7f8 f84b 	bl	8000b24 <__aeabi_dcmpge>
 8008a8e:	9e01      	ldr	r6, [sp, #4]
 8008a90:	4637      	mov	r7, r6
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f040 8243 	bne.w	8008f1e <_dtoa_r+0x956>
 8008a98:	9d00      	ldr	r5, [sp, #0]
 8008a9a:	2331      	movs	r3, #49	; 0x31
 8008a9c:	f805 3b01 	strb.w	r3, [r5], #1
 8008aa0:	f10a 0a01 	add.w	sl, sl, #1
 8008aa4:	e23f      	b.n	8008f26 <_dtoa_r+0x95e>
 8008aa6:	07f2      	lsls	r2, r6, #31
 8008aa8:	d505      	bpl.n	8008ab6 <_dtoa_r+0x4ee>
 8008aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aae:	f7f7 fdb3 	bl	8000618 <__aeabi_dmul>
 8008ab2:	3501      	adds	r5, #1
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	1076      	asrs	r6, r6, #1
 8008ab8:	3708      	adds	r7, #8
 8008aba:	e76c      	b.n	8008996 <_dtoa_r+0x3ce>
 8008abc:	2502      	movs	r5, #2
 8008abe:	e76f      	b.n	80089a0 <_dtoa_r+0x3d8>
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ac6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ac8:	e78d      	b.n	80089e6 <_dtoa_r+0x41e>
 8008aca:	9900      	ldr	r1, [sp, #0]
 8008acc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ad0:	4b4e      	ldr	r3, [pc, #312]	; (8008c0c <_dtoa_r+0x644>)
 8008ad2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ad6:	4401      	add	r1, r0
 8008ad8:	9102      	str	r1, [sp, #8]
 8008ada:	9908      	ldr	r1, [sp, #32]
 8008adc:	eeb0 8a47 	vmov.f32	s16, s14
 8008ae0:	eef0 8a67 	vmov.f32	s17, s15
 8008ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aec:	2900      	cmp	r1, #0
 8008aee:	d045      	beq.n	8008b7c <_dtoa_r+0x5b4>
 8008af0:	494c      	ldr	r1, [pc, #304]	; (8008c24 <_dtoa_r+0x65c>)
 8008af2:	2000      	movs	r0, #0
 8008af4:	f7f7 feba 	bl	800086c <__aeabi_ddiv>
 8008af8:	ec53 2b18 	vmov	r2, r3, d8
 8008afc:	f7f7 fbd4 	bl	80002a8 <__aeabi_dsub>
 8008b00:	9d00      	ldr	r5, [sp, #0]
 8008b02:	ec41 0b18 	vmov	d8, r0, r1
 8008b06:	4639      	mov	r1, r7
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f7f8 f835 	bl	8000b78 <__aeabi_d2iz>
 8008b0e:	900c      	str	r0, [sp, #48]	; 0x30
 8008b10:	f7f7 fd18 	bl	8000544 <__aeabi_i2d>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	f7f7 fbc4 	bl	80002a8 <__aeabi_dsub>
 8008b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b22:	3330      	adds	r3, #48	; 0x30
 8008b24:	f805 3b01 	strb.w	r3, [r5], #1
 8008b28:	ec53 2b18 	vmov	r2, r3, d8
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	460f      	mov	r7, r1
 8008b30:	f7f7 ffe4 	bl	8000afc <__aeabi_dcmplt>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d165      	bne.n	8008c04 <_dtoa_r+0x63c>
 8008b38:	4632      	mov	r2, r6
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	4935      	ldr	r1, [pc, #212]	; (8008c14 <_dtoa_r+0x64c>)
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f7f7 fbb2 	bl	80002a8 <__aeabi_dsub>
 8008b44:	ec53 2b18 	vmov	r2, r3, d8
 8008b48:	f7f7 ffd8 	bl	8000afc <__aeabi_dcmplt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f040 80b9 	bne.w	8008cc4 <_dtoa_r+0x6fc>
 8008b52:	9b02      	ldr	r3, [sp, #8]
 8008b54:	429d      	cmp	r5, r3
 8008b56:	f43f af75 	beq.w	8008a44 <_dtoa_r+0x47c>
 8008b5a:	4b2f      	ldr	r3, [pc, #188]	; (8008c18 <_dtoa_r+0x650>)
 8008b5c:	ec51 0b18 	vmov	r0, r1, d8
 8008b60:	2200      	movs	r2, #0
 8008b62:	f7f7 fd59 	bl	8000618 <__aeabi_dmul>
 8008b66:	4b2c      	ldr	r3, [pc, #176]	; (8008c18 <_dtoa_r+0x650>)
 8008b68:	ec41 0b18 	vmov	d8, r0, r1
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4630      	mov	r0, r6
 8008b70:	4639      	mov	r1, r7
 8008b72:	f7f7 fd51 	bl	8000618 <__aeabi_dmul>
 8008b76:	4606      	mov	r6, r0
 8008b78:	460f      	mov	r7, r1
 8008b7a:	e7c4      	b.n	8008b06 <_dtoa_r+0x53e>
 8008b7c:	ec51 0b17 	vmov	r0, r1, d7
 8008b80:	f7f7 fd4a 	bl	8000618 <__aeabi_dmul>
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	9d00      	ldr	r5, [sp, #0]
 8008b88:	930c      	str	r3, [sp, #48]	; 0x30
 8008b8a:	ec41 0b18 	vmov	d8, r0, r1
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7f7 fff1 	bl	8000b78 <__aeabi_d2iz>
 8008b96:	9011      	str	r0, [sp, #68]	; 0x44
 8008b98:	f7f7 fcd4 	bl	8000544 <__aeabi_i2d>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 fb80 	bl	80002a8 <__aeabi_dsub>
 8008ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008baa:	3330      	adds	r3, #48	; 0x30
 8008bac:	f805 3b01 	strb.w	r3, [r5], #1
 8008bb0:	9b02      	ldr	r3, [sp, #8]
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	460f      	mov	r7, r1
 8008bb8:	f04f 0200 	mov.w	r2, #0
 8008bbc:	d134      	bne.n	8008c28 <_dtoa_r+0x660>
 8008bbe:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <_dtoa_r+0x65c>)
 8008bc0:	ec51 0b18 	vmov	r0, r1, d8
 8008bc4:	f7f7 fb72 	bl	80002ac <__adddf3>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 ffb2 	bl	8000b38 <__aeabi_dcmpgt>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d175      	bne.n	8008cc4 <_dtoa_r+0x6fc>
 8008bd8:	ec53 2b18 	vmov	r2, r3, d8
 8008bdc:	4911      	ldr	r1, [pc, #68]	; (8008c24 <_dtoa_r+0x65c>)
 8008bde:	2000      	movs	r0, #0
 8008be0:	f7f7 fb62 	bl	80002a8 <__aeabi_dsub>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 ff86 	bl	8000afc <__aeabi_dcmplt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f af27 	beq.w	8008a44 <_dtoa_r+0x47c>
 8008bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bf8:	1e6b      	subs	r3, r5, #1
 8008bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8008bfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c00:	2b30      	cmp	r3, #48	; 0x30
 8008c02:	d0f8      	beq.n	8008bf6 <_dtoa_r+0x62e>
 8008c04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008c08:	e04a      	b.n	8008ca0 <_dtoa_r+0x6d8>
 8008c0a:	bf00      	nop
 8008c0c:	0800e150 	.word	0x0800e150
 8008c10:	0800e128 	.word	0x0800e128
 8008c14:	3ff00000 	.word	0x3ff00000
 8008c18:	40240000 	.word	0x40240000
 8008c1c:	401c0000 	.word	0x401c0000
 8008c20:	40140000 	.word	0x40140000
 8008c24:	3fe00000 	.word	0x3fe00000
 8008c28:	4baf      	ldr	r3, [pc, #700]	; (8008ee8 <_dtoa_r+0x920>)
 8008c2a:	f7f7 fcf5 	bl	8000618 <__aeabi_dmul>
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	e7ac      	b.n	8008b8e <_dtoa_r+0x5c6>
 8008c34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c38:	9d00      	ldr	r5, [sp, #0]
 8008c3a:	4642      	mov	r2, r8
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	f7f7 fe13 	bl	800086c <__aeabi_ddiv>
 8008c46:	f7f7 ff97 	bl	8000b78 <__aeabi_d2iz>
 8008c4a:	9002      	str	r0, [sp, #8]
 8008c4c:	f7f7 fc7a 	bl	8000544 <__aeabi_i2d>
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	f7f7 fce0 	bl	8000618 <__aeabi_dmul>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4639      	mov	r1, r7
 8008c60:	f7f7 fb22 	bl	80002a8 <__aeabi_dsub>
 8008c64:	9e02      	ldr	r6, [sp, #8]
 8008c66:	9f01      	ldr	r7, [sp, #4]
 8008c68:	3630      	adds	r6, #48	; 0x30
 8008c6a:	f805 6b01 	strb.w	r6, [r5], #1
 8008c6e:	9e00      	ldr	r6, [sp, #0]
 8008c70:	1bae      	subs	r6, r5, r6
 8008c72:	42b7      	cmp	r7, r6
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	d137      	bne.n	8008cea <_dtoa_r+0x722>
 8008c7a:	f7f7 fb17 	bl	80002ac <__adddf3>
 8008c7e:	4642      	mov	r2, r8
 8008c80:	464b      	mov	r3, r9
 8008c82:	4606      	mov	r6, r0
 8008c84:	460f      	mov	r7, r1
 8008c86:	f7f7 ff57 	bl	8000b38 <__aeabi_dcmpgt>
 8008c8a:	b9c8      	cbnz	r0, 8008cc0 <_dtoa_r+0x6f8>
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	464b      	mov	r3, r9
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 ff28 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c98:	b110      	cbz	r0, 8008ca0 <_dtoa_r+0x6d8>
 8008c9a:	9b02      	ldr	r3, [sp, #8]
 8008c9c:	07d9      	lsls	r1, r3, #31
 8008c9e:	d40f      	bmi.n	8008cc0 <_dtoa_r+0x6f8>
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	4659      	mov	r1, fp
 8008ca4:	f000 fe58 	bl	8009958 <_Bfree>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	702b      	strb	r3, [r5, #0]
 8008cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cae:	f10a 0001 	add.w	r0, sl, #1
 8008cb2:	6018      	str	r0, [r3, #0]
 8008cb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f43f acd8 	beq.w	800866c <_dtoa_r+0xa4>
 8008cbc:	601d      	str	r5, [r3, #0]
 8008cbe:	e4d5      	b.n	800866c <_dtoa_r+0xa4>
 8008cc0:	f8cd a01c 	str.w	sl, [sp, #28]
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	461d      	mov	r5, r3
 8008cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ccc:	2a39      	cmp	r2, #57	; 0x39
 8008cce:	d108      	bne.n	8008ce2 <_dtoa_r+0x71a>
 8008cd0:	9a00      	ldr	r2, [sp, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d1f7      	bne.n	8008cc6 <_dtoa_r+0x6fe>
 8008cd6:	9a07      	ldr	r2, [sp, #28]
 8008cd8:	9900      	ldr	r1, [sp, #0]
 8008cda:	3201      	adds	r2, #1
 8008cdc:	9207      	str	r2, [sp, #28]
 8008cde:	2230      	movs	r2, #48	; 0x30
 8008ce0:	700a      	strb	r2, [r1, #0]
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	3201      	adds	r2, #1
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	e78c      	b.n	8008c04 <_dtoa_r+0x63c>
 8008cea:	4b7f      	ldr	r3, [pc, #508]	; (8008ee8 <_dtoa_r+0x920>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	f7f7 fc93 	bl	8000618 <__aeabi_dmul>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	460f      	mov	r7, r1
 8008cfa:	f7f7 fef5 	bl	8000ae8 <__aeabi_dcmpeq>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d09b      	beq.n	8008c3a <_dtoa_r+0x672>
 8008d02:	e7cd      	b.n	8008ca0 <_dtoa_r+0x6d8>
 8008d04:	9a08      	ldr	r2, [sp, #32]
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	f000 80c4 	beq.w	8008e94 <_dtoa_r+0x8cc>
 8008d0c:	9a05      	ldr	r2, [sp, #20]
 8008d0e:	2a01      	cmp	r2, #1
 8008d10:	f300 80a8 	bgt.w	8008e64 <_dtoa_r+0x89c>
 8008d14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	f000 80a0 	beq.w	8008e5c <_dtoa_r+0x894>
 8008d1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d20:	9e06      	ldr	r6, [sp, #24]
 8008d22:	4645      	mov	r5, r8
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	2101      	movs	r1, #1
 8008d28:	441a      	add	r2, r3
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	4498      	add	r8, r3
 8008d2e:	9204      	str	r2, [sp, #16]
 8008d30:	f000 ff18 	bl	8009b64 <__i2b>
 8008d34:	4607      	mov	r7, r0
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	dd0b      	ble.n	8008d52 <_dtoa_r+0x78a>
 8008d3a:	9b04      	ldr	r3, [sp, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dd08      	ble.n	8008d52 <_dtoa_r+0x78a>
 8008d40:	42ab      	cmp	r3, r5
 8008d42:	9a04      	ldr	r2, [sp, #16]
 8008d44:	bfa8      	it	ge
 8008d46:	462b      	movge	r3, r5
 8008d48:	eba8 0803 	sub.w	r8, r8, r3
 8008d4c:	1aed      	subs	r5, r5, r3
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	9b06      	ldr	r3, [sp, #24]
 8008d54:	b1fb      	cbz	r3, 8008d96 <_dtoa_r+0x7ce>
 8008d56:	9b08      	ldr	r3, [sp, #32]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 809f 	beq.w	8008e9c <_dtoa_r+0x8d4>
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	dd11      	ble.n	8008d86 <_dtoa_r+0x7be>
 8008d62:	4639      	mov	r1, r7
 8008d64:	4632      	mov	r2, r6
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 ffb8 	bl	8009cdc <__pow5mult>
 8008d6c:	465a      	mov	r2, fp
 8008d6e:	4601      	mov	r1, r0
 8008d70:	4607      	mov	r7, r0
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 ff0c 	bl	8009b90 <__multiply>
 8008d78:	4659      	mov	r1, fp
 8008d7a:	9007      	str	r0, [sp, #28]
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f000 fdeb 	bl	8009958 <_Bfree>
 8008d82:	9b07      	ldr	r3, [sp, #28]
 8008d84:	469b      	mov	fp, r3
 8008d86:	9b06      	ldr	r3, [sp, #24]
 8008d88:	1b9a      	subs	r2, r3, r6
 8008d8a:	d004      	beq.n	8008d96 <_dtoa_r+0x7ce>
 8008d8c:	4659      	mov	r1, fp
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 ffa4 	bl	8009cdc <__pow5mult>
 8008d94:	4683      	mov	fp, r0
 8008d96:	2101      	movs	r1, #1
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 fee3 	bl	8009b64 <__i2b>
 8008d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	4606      	mov	r6, r0
 8008da4:	dd7c      	ble.n	8008ea0 <_dtoa_r+0x8d8>
 8008da6:	461a      	mov	r2, r3
 8008da8:	4601      	mov	r1, r0
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 ff96 	bl	8009cdc <__pow5mult>
 8008db0:	9b05      	ldr	r3, [sp, #20]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	4606      	mov	r6, r0
 8008db6:	dd76      	ble.n	8008ea6 <_dtoa_r+0x8de>
 8008db8:	2300      	movs	r3, #0
 8008dba:	9306      	str	r3, [sp, #24]
 8008dbc:	6933      	ldr	r3, [r6, #16]
 8008dbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008dc2:	6918      	ldr	r0, [r3, #16]
 8008dc4:	f000 fe7e 	bl	8009ac4 <__hi0bits>
 8008dc8:	f1c0 0020 	rsb	r0, r0, #32
 8008dcc:	9b04      	ldr	r3, [sp, #16]
 8008dce:	4418      	add	r0, r3
 8008dd0:	f010 001f 	ands.w	r0, r0, #31
 8008dd4:	f000 8086 	beq.w	8008ee4 <_dtoa_r+0x91c>
 8008dd8:	f1c0 0320 	rsb	r3, r0, #32
 8008ddc:	2b04      	cmp	r3, #4
 8008dde:	dd7f      	ble.n	8008ee0 <_dtoa_r+0x918>
 8008de0:	f1c0 001c 	rsb	r0, r0, #28
 8008de4:	9b04      	ldr	r3, [sp, #16]
 8008de6:	4403      	add	r3, r0
 8008de8:	4480      	add	r8, r0
 8008dea:	4405      	add	r5, r0
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	f1b8 0f00 	cmp.w	r8, #0
 8008df2:	dd05      	ble.n	8008e00 <_dtoa_r+0x838>
 8008df4:	4659      	mov	r1, fp
 8008df6:	4642      	mov	r2, r8
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 ffc9 	bl	8009d90 <__lshift>
 8008dfe:	4683      	mov	fp, r0
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dd05      	ble.n	8008e12 <_dtoa_r+0x84a>
 8008e06:	4631      	mov	r1, r6
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 ffc0 	bl	8009d90 <__lshift>
 8008e10:	4606      	mov	r6, r0
 8008e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d069      	beq.n	8008eec <_dtoa_r+0x924>
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4658      	mov	r0, fp
 8008e1c:	f001 f824 	bl	8009e68 <__mcmp>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	da63      	bge.n	8008eec <_dtoa_r+0x924>
 8008e24:	2300      	movs	r3, #0
 8008e26:	4659      	mov	r1, fp
 8008e28:	220a      	movs	r2, #10
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 fdb6 	bl	800999c <__multadd>
 8008e30:	9b08      	ldr	r3, [sp, #32]
 8008e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e36:	4683      	mov	fp, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 818f 	beq.w	800915c <_dtoa_r+0xb94>
 8008e3e:	4639      	mov	r1, r7
 8008e40:	2300      	movs	r3, #0
 8008e42:	220a      	movs	r2, #10
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 fda9 	bl	800999c <__multadd>
 8008e4a:	f1b9 0f00 	cmp.w	r9, #0
 8008e4e:	4607      	mov	r7, r0
 8008e50:	f300 808e 	bgt.w	8008f70 <_dtoa_r+0x9a8>
 8008e54:	9b05      	ldr	r3, [sp, #20]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	dc50      	bgt.n	8008efc <_dtoa_r+0x934>
 8008e5a:	e089      	b.n	8008f70 <_dtoa_r+0x9a8>
 8008e5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e62:	e75d      	b.n	8008d20 <_dtoa_r+0x758>
 8008e64:	9b01      	ldr	r3, [sp, #4]
 8008e66:	1e5e      	subs	r6, r3, #1
 8008e68:	9b06      	ldr	r3, [sp, #24]
 8008e6a:	42b3      	cmp	r3, r6
 8008e6c:	bfbf      	itttt	lt
 8008e6e:	9b06      	ldrlt	r3, [sp, #24]
 8008e70:	9606      	strlt	r6, [sp, #24]
 8008e72:	1af2      	sublt	r2, r6, r3
 8008e74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008e76:	bfb6      	itet	lt
 8008e78:	189b      	addlt	r3, r3, r2
 8008e7a:	1b9e      	subge	r6, r3, r6
 8008e7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008e7e:	9b01      	ldr	r3, [sp, #4]
 8008e80:	bfb8      	it	lt
 8008e82:	2600      	movlt	r6, #0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bfb5      	itete	lt
 8008e88:	eba8 0503 	sublt.w	r5, r8, r3
 8008e8c:	9b01      	ldrge	r3, [sp, #4]
 8008e8e:	2300      	movlt	r3, #0
 8008e90:	4645      	movge	r5, r8
 8008e92:	e747      	b.n	8008d24 <_dtoa_r+0x75c>
 8008e94:	9e06      	ldr	r6, [sp, #24]
 8008e96:	9f08      	ldr	r7, [sp, #32]
 8008e98:	4645      	mov	r5, r8
 8008e9a:	e74c      	b.n	8008d36 <_dtoa_r+0x76e>
 8008e9c:	9a06      	ldr	r2, [sp, #24]
 8008e9e:	e775      	b.n	8008d8c <_dtoa_r+0x7c4>
 8008ea0:	9b05      	ldr	r3, [sp, #20]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	dc18      	bgt.n	8008ed8 <_dtoa_r+0x910>
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	b9b3      	cbnz	r3, 8008ed8 <_dtoa_r+0x910>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eb0:	b9a3      	cbnz	r3, 8008edc <_dtoa_r+0x914>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eb8:	0d1b      	lsrs	r3, r3, #20
 8008eba:	051b      	lsls	r3, r3, #20
 8008ebc:	b12b      	cbz	r3, 8008eca <_dtoa_r+0x902>
 8008ebe:	9b04      	ldr	r3, [sp, #16]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	f108 0801 	add.w	r8, r8, #1
 8008ec8:	2301      	movs	r3, #1
 8008eca:	9306      	str	r3, [sp, #24]
 8008ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f47f af74 	bne.w	8008dbc <_dtoa_r+0x7f4>
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	e779      	b.n	8008dcc <_dtoa_r+0x804>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e7f6      	b.n	8008eca <_dtoa_r+0x902>
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	e7f4      	b.n	8008eca <_dtoa_r+0x902>
 8008ee0:	d085      	beq.n	8008dee <_dtoa_r+0x826>
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	301c      	adds	r0, #28
 8008ee6:	e77d      	b.n	8008de4 <_dtoa_r+0x81c>
 8008ee8:	40240000 	.word	0x40240000
 8008eec:	9b01      	ldr	r3, [sp, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dc38      	bgt.n	8008f64 <_dtoa_r+0x99c>
 8008ef2:	9b05      	ldr	r3, [sp, #20]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	dd35      	ble.n	8008f64 <_dtoa_r+0x99c>
 8008ef8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008efc:	f1b9 0f00 	cmp.w	r9, #0
 8008f00:	d10d      	bne.n	8008f1e <_dtoa_r+0x956>
 8008f02:	4631      	mov	r1, r6
 8008f04:	464b      	mov	r3, r9
 8008f06:	2205      	movs	r2, #5
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 fd47 	bl	800999c <__multadd>
 8008f0e:	4601      	mov	r1, r0
 8008f10:	4606      	mov	r6, r0
 8008f12:	4658      	mov	r0, fp
 8008f14:	f000 ffa8 	bl	8009e68 <__mcmp>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f73f adbd 	bgt.w	8008a98 <_dtoa_r+0x4d0>
 8008f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f20:	9d00      	ldr	r5, [sp, #0]
 8008f22:	ea6f 0a03 	mvn.w	sl, r3
 8008f26:	f04f 0800 	mov.w	r8, #0
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fd13 	bl	8009958 <_Bfree>
 8008f32:	2f00      	cmp	r7, #0
 8008f34:	f43f aeb4 	beq.w	8008ca0 <_dtoa_r+0x6d8>
 8008f38:	f1b8 0f00 	cmp.w	r8, #0
 8008f3c:	d005      	beq.n	8008f4a <_dtoa_r+0x982>
 8008f3e:	45b8      	cmp	r8, r7
 8008f40:	d003      	beq.n	8008f4a <_dtoa_r+0x982>
 8008f42:	4641      	mov	r1, r8
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 fd07 	bl	8009958 <_Bfree>
 8008f4a:	4639      	mov	r1, r7
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f000 fd03 	bl	8009958 <_Bfree>
 8008f52:	e6a5      	b.n	8008ca0 <_dtoa_r+0x6d8>
 8008f54:	2600      	movs	r6, #0
 8008f56:	4637      	mov	r7, r6
 8008f58:	e7e1      	b.n	8008f1e <_dtoa_r+0x956>
 8008f5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008f5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f60:	4637      	mov	r7, r6
 8008f62:	e599      	b.n	8008a98 <_dtoa_r+0x4d0>
 8008f64:	9b08      	ldr	r3, [sp, #32]
 8008f66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80fd 	beq.w	800916a <_dtoa_r+0xba2>
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	dd05      	ble.n	8008f80 <_dtoa_r+0x9b8>
 8008f74:	4639      	mov	r1, r7
 8008f76:	462a      	mov	r2, r5
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 ff09 	bl	8009d90 <__lshift>
 8008f7e:	4607      	mov	r7, r0
 8008f80:	9b06      	ldr	r3, [sp, #24]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d05c      	beq.n	8009040 <_dtoa_r+0xa78>
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 fca5 	bl	80098d8 <_Balloc>
 8008f8e:	4605      	mov	r5, r0
 8008f90:	b928      	cbnz	r0, 8008f9e <_dtoa_r+0x9d6>
 8008f92:	4b80      	ldr	r3, [pc, #512]	; (8009194 <_dtoa_r+0xbcc>)
 8008f94:	4602      	mov	r2, r0
 8008f96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f9a:	f7ff bb2e 	b.w	80085fa <_dtoa_r+0x32>
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	3202      	adds	r2, #2
 8008fa2:	0092      	lsls	r2, r2, #2
 8008fa4:	f107 010c 	add.w	r1, r7, #12
 8008fa8:	300c      	adds	r0, #12
 8008faa:	f000 fc87 	bl	80098bc <memcpy>
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 feec 	bl	8009d90 <__lshift>
 8008fb8:	9b00      	ldr	r3, [sp, #0]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	9b00      	ldr	r3, [sp, #0]
 8008fc0:	444b      	add	r3, r9
 8008fc2:	9307      	str	r3, [sp, #28]
 8008fc4:	9b02      	ldr	r3, [sp, #8]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	46b8      	mov	r8, r7
 8008fcc:	9306      	str	r3, [sp, #24]
 8008fce:	4607      	mov	r7, r0
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	4658      	mov	r0, fp
 8008fd8:	9302      	str	r3, [sp, #8]
 8008fda:	f7ff fa67 	bl	80084ac <quorem>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	3330      	adds	r3, #48	; 0x30
 8008fe2:	9004      	str	r0, [sp, #16]
 8008fe4:	4641      	mov	r1, r8
 8008fe6:	4658      	mov	r0, fp
 8008fe8:	9308      	str	r3, [sp, #32]
 8008fea:	f000 ff3d 	bl	8009e68 <__mcmp>
 8008fee:	463a      	mov	r2, r7
 8008ff0:	4681      	mov	r9, r0
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 ff53 	bl	8009ea0 <__mdiff>
 8008ffa:	68c2      	ldr	r2, [r0, #12]
 8008ffc:	9b08      	ldr	r3, [sp, #32]
 8008ffe:	4605      	mov	r5, r0
 8009000:	bb02      	cbnz	r2, 8009044 <_dtoa_r+0xa7c>
 8009002:	4601      	mov	r1, r0
 8009004:	4658      	mov	r0, fp
 8009006:	f000 ff2f 	bl	8009e68 <__mcmp>
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	4602      	mov	r2, r0
 800900e:	4629      	mov	r1, r5
 8009010:	4620      	mov	r0, r4
 8009012:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009016:	f000 fc9f 	bl	8009958 <_Bfree>
 800901a:	9b05      	ldr	r3, [sp, #20]
 800901c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800901e:	9d01      	ldr	r5, [sp, #4]
 8009020:	ea43 0102 	orr.w	r1, r3, r2
 8009024:	9b06      	ldr	r3, [sp, #24]
 8009026:	430b      	orrs	r3, r1
 8009028:	9b08      	ldr	r3, [sp, #32]
 800902a:	d10d      	bne.n	8009048 <_dtoa_r+0xa80>
 800902c:	2b39      	cmp	r3, #57	; 0x39
 800902e:	d029      	beq.n	8009084 <_dtoa_r+0xabc>
 8009030:	f1b9 0f00 	cmp.w	r9, #0
 8009034:	dd01      	ble.n	800903a <_dtoa_r+0xa72>
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	3331      	adds	r3, #49	; 0x31
 800903a:	9a02      	ldr	r2, [sp, #8]
 800903c:	7013      	strb	r3, [r2, #0]
 800903e:	e774      	b.n	8008f2a <_dtoa_r+0x962>
 8009040:	4638      	mov	r0, r7
 8009042:	e7b9      	b.n	8008fb8 <_dtoa_r+0x9f0>
 8009044:	2201      	movs	r2, #1
 8009046:	e7e2      	b.n	800900e <_dtoa_r+0xa46>
 8009048:	f1b9 0f00 	cmp.w	r9, #0
 800904c:	db06      	blt.n	800905c <_dtoa_r+0xa94>
 800904e:	9905      	ldr	r1, [sp, #20]
 8009050:	ea41 0909 	orr.w	r9, r1, r9
 8009054:	9906      	ldr	r1, [sp, #24]
 8009056:	ea59 0101 	orrs.w	r1, r9, r1
 800905a:	d120      	bne.n	800909e <_dtoa_r+0xad6>
 800905c:	2a00      	cmp	r2, #0
 800905e:	ddec      	ble.n	800903a <_dtoa_r+0xa72>
 8009060:	4659      	mov	r1, fp
 8009062:	2201      	movs	r2, #1
 8009064:	4620      	mov	r0, r4
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	f000 fe92 	bl	8009d90 <__lshift>
 800906c:	4631      	mov	r1, r6
 800906e:	4683      	mov	fp, r0
 8009070:	f000 fefa 	bl	8009e68 <__mcmp>
 8009074:	2800      	cmp	r0, #0
 8009076:	9b01      	ldr	r3, [sp, #4]
 8009078:	dc02      	bgt.n	8009080 <_dtoa_r+0xab8>
 800907a:	d1de      	bne.n	800903a <_dtoa_r+0xa72>
 800907c:	07da      	lsls	r2, r3, #31
 800907e:	d5dc      	bpl.n	800903a <_dtoa_r+0xa72>
 8009080:	2b39      	cmp	r3, #57	; 0x39
 8009082:	d1d8      	bne.n	8009036 <_dtoa_r+0xa6e>
 8009084:	9a02      	ldr	r2, [sp, #8]
 8009086:	2339      	movs	r3, #57	; 0x39
 8009088:	7013      	strb	r3, [r2, #0]
 800908a:	462b      	mov	r3, r5
 800908c:	461d      	mov	r5, r3
 800908e:	3b01      	subs	r3, #1
 8009090:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009094:	2a39      	cmp	r2, #57	; 0x39
 8009096:	d050      	beq.n	800913a <_dtoa_r+0xb72>
 8009098:	3201      	adds	r2, #1
 800909a:	701a      	strb	r2, [r3, #0]
 800909c:	e745      	b.n	8008f2a <_dtoa_r+0x962>
 800909e:	2a00      	cmp	r2, #0
 80090a0:	dd03      	ble.n	80090aa <_dtoa_r+0xae2>
 80090a2:	2b39      	cmp	r3, #57	; 0x39
 80090a4:	d0ee      	beq.n	8009084 <_dtoa_r+0xabc>
 80090a6:	3301      	adds	r3, #1
 80090a8:	e7c7      	b.n	800903a <_dtoa_r+0xa72>
 80090aa:	9a01      	ldr	r2, [sp, #4]
 80090ac:	9907      	ldr	r1, [sp, #28]
 80090ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80090b2:	428a      	cmp	r2, r1
 80090b4:	d02a      	beq.n	800910c <_dtoa_r+0xb44>
 80090b6:	4659      	mov	r1, fp
 80090b8:	2300      	movs	r3, #0
 80090ba:	220a      	movs	r2, #10
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 fc6d 	bl	800999c <__multadd>
 80090c2:	45b8      	cmp	r8, r7
 80090c4:	4683      	mov	fp, r0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	f04f 020a 	mov.w	r2, #10
 80090ce:	4641      	mov	r1, r8
 80090d0:	4620      	mov	r0, r4
 80090d2:	d107      	bne.n	80090e4 <_dtoa_r+0xb1c>
 80090d4:	f000 fc62 	bl	800999c <__multadd>
 80090d8:	4680      	mov	r8, r0
 80090da:	4607      	mov	r7, r0
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	3301      	adds	r3, #1
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	e775      	b.n	8008fd0 <_dtoa_r+0xa08>
 80090e4:	f000 fc5a 	bl	800999c <__multadd>
 80090e8:	4639      	mov	r1, r7
 80090ea:	4680      	mov	r8, r0
 80090ec:	2300      	movs	r3, #0
 80090ee:	220a      	movs	r2, #10
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fc53 	bl	800999c <__multadd>
 80090f6:	4607      	mov	r7, r0
 80090f8:	e7f0      	b.n	80090dc <_dtoa_r+0xb14>
 80090fa:	f1b9 0f00 	cmp.w	r9, #0
 80090fe:	9a00      	ldr	r2, [sp, #0]
 8009100:	bfcc      	ite	gt
 8009102:	464d      	movgt	r5, r9
 8009104:	2501      	movle	r5, #1
 8009106:	4415      	add	r5, r2
 8009108:	f04f 0800 	mov.w	r8, #0
 800910c:	4659      	mov	r1, fp
 800910e:	2201      	movs	r2, #1
 8009110:	4620      	mov	r0, r4
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	f000 fe3c 	bl	8009d90 <__lshift>
 8009118:	4631      	mov	r1, r6
 800911a:	4683      	mov	fp, r0
 800911c:	f000 fea4 	bl	8009e68 <__mcmp>
 8009120:	2800      	cmp	r0, #0
 8009122:	dcb2      	bgt.n	800908a <_dtoa_r+0xac2>
 8009124:	d102      	bne.n	800912c <_dtoa_r+0xb64>
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	07db      	lsls	r3, r3, #31
 800912a:	d4ae      	bmi.n	800908a <_dtoa_r+0xac2>
 800912c:	462b      	mov	r3, r5
 800912e:	461d      	mov	r5, r3
 8009130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009134:	2a30      	cmp	r2, #48	; 0x30
 8009136:	d0fa      	beq.n	800912e <_dtoa_r+0xb66>
 8009138:	e6f7      	b.n	8008f2a <_dtoa_r+0x962>
 800913a:	9a00      	ldr	r2, [sp, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d1a5      	bne.n	800908c <_dtoa_r+0xac4>
 8009140:	f10a 0a01 	add.w	sl, sl, #1
 8009144:	2331      	movs	r3, #49	; 0x31
 8009146:	e779      	b.n	800903c <_dtoa_r+0xa74>
 8009148:	4b13      	ldr	r3, [pc, #76]	; (8009198 <_dtoa_r+0xbd0>)
 800914a:	f7ff baaf 	b.w	80086ac <_dtoa_r+0xe4>
 800914e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009150:	2b00      	cmp	r3, #0
 8009152:	f47f aa86 	bne.w	8008662 <_dtoa_r+0x9a>
 8009156:	4b11      	ldr	r3, [pc, #68]	; (800919c <_dtoa_r+0xbd4>)
 8009158:	f7ff baa8 	b.w	80086ac <_dtoa_r+0xe4>
 800915c:	f1b9 0f00 	cmp.w	r9, #0
 8009160:	dc03      	bgt.n	800916a <_dtoa_r+0xba2>
 8009162:	9b05      	ldr	r3, [sp, #20]
 8009164:	2b02      	cmp	r3, #2
 8009166:	f73f aec9 	bgt.w	8008efc <_dtoa_r+0x934>
 800916a:	9d00      	ldr	r5, [sp, #0]
 800916c:	4631      	mov	r1, r6
 800916e:	4658      	mov	r0, fp
 8009170:	f7ff f99c 	bl	80084ac <quorem>
 8009174:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009178:	f805 3b01 	strb.w	r3, [r5], #1
 800917c:	9a00      	ldr	r2, [sp, #0]
 800917e:	1aaa      	subs	r2, r5, r2
 8009180:	4591      	cmp	r9, r2
 8009182:	ddba      	ble.n	80090fa <_dtoa_r+0xb32>
 8009184:	4659      	mov	r1, fp
 8009186:	2300      	movs	r3, #0
 8009188:	220a      	movs	r2, #10
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fc06 	bl	800999c <__multadd>
 8009190:	4683      	mov	fp, r0
 8009192:	e7eb      	b.n	800916c <_dtoa_r+0xba4>
 8009194:	0800e034 	.word	0x0800e034
 8009198:	0800de34 	.word	0x0800de34
 800919c:	0800dfb1 	.word	0x0800dfb1

080091a0 <rshift>:
 80091a0:	6903      	ldr	r3, [r0, #16]
 80091a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091ae:	f100 0414 	add.w	r4, r0, #20
 80091b2:	dd45      	ble.n	8009240 <rshift+0xa0>
 80091b4:	f011 011f 	ands.w	r1, r1, #31
 80091b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091c0:	d10c      	bne.n	80091dc <rshift+0x3c>
 80091c2:	f100 0710 	add.w	r7, r0, #16
 80091c6:	4629      	mov	r1, r5
 80091c8:	42b1      	cmp	r1, r6
 80091ca:	d334      	bcc.n	8009236 <rshift+0x96>
 80091cc:	1a9b      	subs	r3, r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	1eea      	subs	r2, r5, #3
 80091d2:	4296      	cmp	r6, r2
 80091d4:	bf38      	it	cc
 80091d6:	2300      	movcc	r3, #0
 80091d8:	4423      	add	r3, r4
 80091da:	e015      	b.n	8009208 <rshift+0x68>
 80091dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091e0:	f1c1 0820 	rsb	r8, r1, #32
 80091e4:	40cf      	lsrs	r7, r1
 80091e6:	f105 0e04 	add.w	lr, r5, #4
 80091ea:	46a1      	mov	r9, r4
 80091ec:	4576      	cmp	r6, lr
 80091ee:	46f4      	mov	ip, lr
 80091f0:	d815      	bhi.n	800921e <rshift+0x7e>
 80091f2:	1a9b      	subs	r3, r3, r2
 80091f4:	009a      	lsls	r2, r3, #2
 80091f6:	3a04      	subs	r2, #4
 80091f8:	3501      	adds	r5, #1
 80091fa:	42ae      	cmp	r6, r5
 80091fc:	bf38      	it	cc
 80091fe:	2200      	movcc	r2, #0
 8009200:	18a3      	adds	r3, r4, r2
 8009202:	50a7      	str	r7, [r4, r2]
 8009204:	b107      	cbz	r7, 8009208 <rshift+0x68>
 8009206:	3304      	adds	r3, #4
 8009208:	1b1a      	subs	r2, r3, r4
 800920a:	42a3      	cmp	r3, r4
 800920c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009210:	bf08      	it	eq
 8009212:	2300      	moveq	r3, #0
 8009214:	6102      	str	r2, [r0, #16]
 8009216:	bf08      	it	eq
 8009218:	6143      	streq	r3, [r0, #20]
 800921a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800921e:	f8dc c000 	ldr.w	ip, [ip]
 8009222:	fa0c fc08 	lsl.w	ip, ip, r8
 8009226:	ea4c 0707 	orr.w	r7, ip, r7
 800922a:	f849 7b04 	str.w	r7, [r9], #4
 800922e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009232:	40cf      	lsrs	r7, r1
 8009234:	e7da      	b.n	80091ec <rshift+0x4c>
 8009236:	f851 cb04 	ldr.w	ip, [r1], #4
 800923a:	f847 cf04 	str.w	ip, [r7, #4]!
 800923e:	e7c3      	b.n	80091c8 <rshift+0x28>
 8009240:	4623      	mov	r3, r4
 8009242:	e7e1      	b.n	8009208 <rshift+0x68>

08009244 <__hexdig_fun>:
 8009244:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009248:	2b09      	cmp	r3, #9
 800924a:	d802      	bhi.n	8009252 <__hexdig_fun+0xe>
 800924c:	3820      	subs	r0, #32
 800924e:	b2c0      	uxtb	r0, r0
 8009250:	4770      	bx	lr
 8009252:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009256:	2b05      	cmp	r3, #5
 8009258:	d801      	bhi.n	800925e <__hexdig_fun+0x1a>
 800925a:	3847      	subs	r0, #71	; 0x47
 800925c:	e7f7      	b.n	800924e <__hexdig_fun+0xa>
 800925e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009262:	2b05      	cmp	r3, #5
 8009264:	d801      	bhi.n	800926a <__hexdig_fun+0x26>
 8009266:	3827      	subs	r0, #39	; 0x27
 8009268:	e7f1      	b.n	800924e <__hexdig_fun+0xa>
 800926a:	2000      	movs	r0, #0
 800926c:	4770      	bx	lr
	...

08009270 <__gethex>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	ed2d 8b02 	vpush	{d8}
 8009278:	b089      	sub	sp, #36	; 0x24
 800927a:	ee08 0a10 	vmov	s16, r0
 800927e:	9304      	str	r3, [sp, #16]
 8009280:	4bbc      	ldr	r3, [pc, #752]	; (8009574 <__gethex+0x304>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	4618      	mov	r0, r3
 8009288:	468b      	mov	fp, r1
 800928a:	4690      	mov	r8, r2
 800928c:	f7f6 ffb0 	bl	80001f0 <strlen>
 8009290:	9b01      	ldr	r3, [sp, #4]
 8009292:	f8db 2000 	ldr.w	r2, [fp]
 8009296:	4403      	add	r3, r0
 8009298:	4682      	mov	sl, r0
 800929a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800929e:	9305      	str	r3, [sp, #20]
 80092a0:	1c93      	adds	r3, r2, #2
 80092a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80092a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80092aa:	32fe      	adds	r2, #254	; 0xfe
 80092ac:	18d1      	adds	r1, r2, r3
 80092ae:	461f      	mov	r7, r3
 80092b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092b4:	9100      	str	r1, [sp, #0]
 80092b6:	2830      	cmp	r0, #48	; 0x30
 80092b8:	d0f8      	beq.n	80092ac <__gethex+0x3c>
 80092ba:	f7ff ffc3 	bl	8009244 <__hexdig_fun>
 80092be:	4604      	mov	r4, r0
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d13a      	bne.n	800933a <__gethex+0xca>
 80092c4:	9901      	ldr	r1, [sp, #4]
 80092c6:	4652      	mov	r2, sl
 80092c8:	4638      	mov	r0, r7
 80092ca:	f001 f9ed 	bl	800a6a8 <strncmp>
 80092ce:	4605      	mov	r5, r0
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d168      	bne.n	80093a6 <__gethex+0x136>
 80092d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80092d8:	eb07 060a 	add.w	r6, r7, sl
 80092dc:	f7ff ffb2 	bl	8009244 <__hexdig_fun>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d062      	beq.n	80093aa <__gethex+0x13a>
 80092e4:	4633      	mov	r3, r6
 80092e6:	7818      	ldrb	r0, [r3, #0]
 80092e8:	2830      	cmp	r0, #48	; 0x30
 80092ea:	461f      	mov	r7, r3
 80092ec:	f103 0301 	add.w	r3, r3, #1
 80092f0:	d0f9      	beq.n	80092e6 <__gethex+0x76>
 80092f2:	f7ff ffa7 	bl	8009244 <__hexdig_fun>
 80092f6:	2301      	movs	r3, #1
 80092f8:	fab0 f480 	clz	r4, r0
 80092fc:	0964      	lsrs	r4, r4, #5
 80092fe:	4635      	mov	r5, r6
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	463a      	mov	r2, r7
 8009304:	4616      	mov	r6, r2
 8009306:	3201      	adds	r2, #1
 8009308:	7830      	ldrb	r0, [r6, #0]
 800930a:	f7ff ff9b 	bl	8009244 <__hexdig_fun>
 800930e:	2800      	cmp	r0, #0
 8009310:	d1f8      	bne.n	8009304 <__gethex+0x94>
 8009312:	9901      	ldr	r1, [sp, #4]
 8009314:	4652      	mov	r2, sl
 8009316:	4630      	mov	r0, r6
 8009318:	f001 f9c6 	bl	800a6a8 <strncmp>
 800931c:	b980      	cbnz	r0, 8009340 <__gethex+0xd0>
 800931e:	b94d      	cbnz	r5, 8009334 <__gethex+0xc4>
 8009320:	eb06 050a 	add.w	r5, r6, sl
 8009324:	462a      	mov	r2, r5
 8009326:	4616      	mov	r6, r2
 8009328:	3201      	adds	r2, #1
 800932a:	7830      	ldrb	r0, [r6, #0]
 800932c:	f7ff ff8a 	bl	8009244 <__hexdig_fun>
 8009330:	2800      	cmp	r0, #0
 8009332:	d1f8      	bne.n	8009326 <__gethex+0xb6>
 8009334:	1bad      	subs	r5, r5, r6
 8009336:	00ad      	lsls	r5, r5, #2
 8009338:	e004      	b.n	8009344 <__gethex+0xd4>
 800933a:	2400      	movs	r4, #0
 800933c:	4625      	mov	r5, r4
 800933e:	e7e0      	b.n	8009302 <__gethex+0x92>
 8009340:	2d00      	cmp	r5, #0
 8009342:	d1f7      	bne.n	8009334 <__gethex+0xc4>
 8009344:	7833      	ldrb	r3, [r6, #0]
 8009346:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800934a:	2b50      	cmp	r3, #80	; 0x50
 800934c:	d13b      	bne.n	80093c6 <__gethex+0x156>
 800934e:	7873      	ldrb	r3, [r6, #1]
 8009350:	2b2b      	cmp	r3, #43	; 0x2b
 8009352:	d02c      	beq.n	80093ae <__gethex+0x13e>
 8009354:	2b2d      	cmp	r3, #45	; 0x2d
 8009356:	d02e      	beq.n	80093b6 <__gethex+0x146>
 8009358:	1c71      	adds	r1, r6, #1
 800935a:	f04f 0900 	mov.w	r9, #0
 800935e:	7808      	ldrb	r0, [r1, #0]
 8009360:	f7ff ff70 	bl	8009244 <__hexdig_fun>
 8009364:	1e43      	subs	r3, r0, #1
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b18      	cmp	r3, #24
 800936a:	d82c      	bhi.n	80093c6 <__gethex+0x156>
 800936c:	f1a0 0210 	sub.w	r2, r0, #16
 8009370:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009374:	f7ff ff66 	bl	8009244 <__hexdig_fun>
 8009378:	1e43      	subs	r3, r0, #1
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b18      	cmp	r3, #24
 800937e:	d91d      	bls.n	80093bc <__gethex+0x14c>
 8009380:	f1b9 0f00 	cmp.w	r9, #0
 8009384:	d000      	beq.n	8009388 <__gethex+0x118>
 8009386:	4252      	negs	r2, r2
 8009388:	4415      	add	r5, r2
 800938a:	f8cb 1000 	str.w	r1, [fp]
 800938e:	b1e4      	cbz	r4, 80093ca <__gethex+0x15a>
 8009390:	9b00      	ldr	r3, [sp, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	bf14      	ite	ne
 8009396:	2700      	movne	r7, #0
 8009398:	2706      	moveq	r7, #6
 800939a:	4638      	mov	r0, r7
 800939c:	b009      	add	sp, #36	; 0x24
 800939e:	ecbd 8b02 	vpop	{d8}
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a6:	463e      	mov	r6, r7
 80093a8:	4625      	mov	r5, r4
 80093aa:	2401      	movs	r4, #1
 80093ac:	e7ca      	b.n	8009344 <__gethex+0xd4>
 80093ae:	f04f 0900 	mov.w	r9, #0
 80093b2:	1cb1      	adds	r1, r6, #2
 80093b4:	e7d3      	b.n	800935e <__gethex+0xee>
 80093b6:	f04f 0901 	mov.w	r9, #1
 80093ba:	e7fa      	b.n	80093b2 <__gethex+0x142>
 80093bc:	230a      	movs	r3, #10
 80093be:	fb03 0202 	mla	r2, r3, r2, r0
 80093c2:	3a10      	subs	r2, #16
 80093c4:	e7d4      	b.n	8009370 <__gethex+0x100>
 80093c6:	4631      	mov	r1, r6
 80093c8:	e7df      	b.n	800938a <__gethex+0x11a>
 80093ca:	1bf3      	subs	r3, r6, r7
 80093cc:	3b01      	subs	r3, #1
 80093ce:	4621      	mov	r1, r4
 80093d0:	2b07      	cmp	r3, #7
 80093d2:	dc0b      	bgt.n	80093ec <__gethex+0x17c>
 80093d4:	ee18 0a10 	vmov	r0, s16
 80093d8:	f000 fa7e 	bl	80098d8 <_Balloc>
 80093dc:	4604      	mov	r4, r0
 80093de:	b940      	cbnz	r0, 80093f2 <__gethex+0x182>
 80093e0:	4b65      	ldr	r3, [pc, #404]	; (8009578 <__gethex+0x308>)
 80093e2:	4602      	mov	r2, r0
 80093e4:	21de      	movs	r1, #222	; 0xde
 80093e6:	4865      	ldr	r0, [pc, #404]	; (800957c <__gethex+0x30c>)
 80093e8:	f001 f97e 	bl	800a6e8 <__assert_func>
 80093ec:	3101      	adds	r1, #1
 80093ee:	105b      	asrs	r3, r3, #1
 80093f0:	e7ee      	b.n	80093d0 <__gethex+0x160>
 80093f2:	f100 0914 	add.w	r9, r0, #20
 80093f6:	f04f 0b00 	mov.w	fp, #0
 80093fa:	f1ca 0301 	rsb	r3, sl, #1
 80093fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8009402:	f8cd b000 	str.w	fp, [sp]
 8009406:	9306      	str	r3, [sp, #24]
 8009408:	42b7      	cmp	r7, r6
 800940a:	d340      	bcc.n	800948e <__gethex+0x21e>
 800940c:	9802      	ldr	r0, [sp, #8]
 800940e:	9b00      	ldr	r3, [sp, #0]
 8009410:	f840 3b04 	str.w	r3, [r0], #4
 8009414:	eba0 0009 	sub.w	r0, r0, r9
 8009418:	1080      	asrs	r0, r0, #2
 800941a:	0146      	lsls	r6, r0, #5
 800941c:	6120      	str	r0, [r4, #16]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fb50 	bl	8009ac4 <__hi0bits>
 8009424:	1a30      	subs	r0, r6, r0
 8009426:	f8d8 6000 	ldr.w	r6, [r8]
 800942a:	42b0      	cmp	r0, r6
 800942c:	dd63      	ble.n	80094f6 <__gethex+0x286>
 800942e:	1b87      	subs	r7, r0, r6
 8009430:	4639      	mov	r1, r7
 8009432:	4620      	mov	r0, r4
 8009434:	f000 feea 	bl	800a20c <__any_on>
 8009438:	4682      	mov	sl, r0
 800943a:	b1a8      	cbz	r0, 8009468 <__gethex+0x1f8>
 800943c:	1e7b      	subs	r3, r7, #1
 800943e:	1159      	asrs	r1, r3, #5
 8009440:	f003 021f 	and.w	r2, r3, #31
 8009444:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009448:	f04f 0a01 	mov.w	sl, #1
 800944c:	fa0a f202 	lsl.w	r2, sl, r2
 8009450:	420a      	tst	r2, r1
 8009452:	d009      	beq.n	8009468 <__gethex+0x1f8>
 8009454:	4553      	cmp	r3, sl
 8009456:	dd05      	ble.n	8009464 <__gethex+0x1f4>
 8009458:	1eb9      	subs	r1, r7, #2
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fed6 	bl	800a20c <__any_on>
 8009460:	2800      	cmp	r0, #0
 8009462:	d145      	bne.n	80094f0 <__gethex+0x280>
 8009464:	f04f 0a02 	mov.w	sl, #2
 8009468:	4639      	mov	r1, r7
 800946a:	4620      	mov	r0, r4
 800946c:	f7ff fe98 	bl	80091a0 <rshift>
 8009470:	443d      	add	r5, r7
 8009472:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009476:	42ab      	cmp	r3, r5
 8009478:	da4c      	bge.n	8009514 <__gethex+0x2a4>
 800947a:	ee18 0a10 	vmov	r0, s16
 800947e:	4621      	mov	r1, r4
 8009480:	f000 fa6a 	bl	8009958 <_Bfree>
 8009484:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009486:	2300      	movs	r3, #0
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	27a3      	movs	r7, #163	; 0xa3
 800948c:	e785      	b.n	800939a <__gethex+0x12a>
 800948e:	1e73      	subs	r3, r6, #1
 8009490:	9a05      	ldr	r2, [sp, #20]
 8009492:	9303      	str	r3, [sp, #12]
 8009494:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009498:	4293      	cmp	r3, r2
 800949a:	d019      	beq.n	80094d0 <__gethex+0x260>
 800949c:	f1bb 0f20 	cmp.w	fp, #32
 80094a0:	d107      	bne.n	80094b2 <__gethex+0x242>
 80094a2:	9b02      	ldr	r3, [sp, #8]
 80094a4:	9a00      	ldr	r2, [sp, #0]
 80094a6:	f843 2b04 	str.w	r2, [r3], #4
 80094aa:	9302      	str	r3, [sp, #8]
 80094ac:	2300      	movs	r3, #0
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	469b      	mov	fp, r3
 80094b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80094b6:	f7ff fec5 	bl	8009244 <__hexdig_fun>
 80094ba:	9b00      	ldr	r3, [sp, #0]
 80094bc:	f000 000f 	and.w	r0, r0, #15
 80094c0:	fa00 f00b 	lsl.w	r0, r0, fp
 80094c4:	4303      	orrs	r3, r0
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	f10b 0b04 	add.w	fp, fp, #4
 80094cc:	9b03      	ldr	r3, [sp, #12]
 80094ce:	e00d      	b.n	80094ec <__gethex+0x27c>
 80094d0:	9b03      	ldr	r3, [sp, #12]
 80094d2:	9a06      	ldr	r2, [sp, #24]
 80094d4:	4413      	add	r3, r2
 80094d6:	42bb      	cmp	r3, r7
 80094d8:	d3e0      	bcc.n	800949c <__gethex+0x22c>
 80094da:	4618      	mov	r0, r3
 80094dc:	9901      	ldr	r1, [sp, #4]
 80094de:	9307      	str	r3, [sp, #28]
 80094e0:	4652      	mov	r2, sl
 80094e2:	f001 f8e1 	bl	800a6a8 <strncmp>
 80094e6:	9b07      	ldr	r3, [sp, #28]
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d1d7      	bne.n	800949c <__gethex+0x22c>
 80094ec:	461e      	mov	r6, r3
 80094ee:	e78b      	b.n	8009408 <__gethex+0x198>
 80094f0:	f04f 0a03 	mov.w	sl, #3
 80094f4:	e7b8      	b.n	8009468 <__gethex+0x1f8>
 80094f6:	da0a      	bge.n	800950e <__gethex+0x29e>
 80094f8:	1a37      	subs	r7, r6, r0
 80094fa:	4621      	mov	r1, r4
 80094fc:	ee18 0a10 	vmov	r0, s16
 8009500:	463a      	mov	r2, r7
 8009502:	f000 fc45 	bl	8009d90 <__lshift>
 8009506:	1bed      	subs	r5, r5, r7
 8009508:	4604      	mov	r4, r0
 800950a:	f100 0914 	add.w	r9, r0, #20
 800950e:	f04f 0a00 	mov.w	sl, #0
 8009512:	e7ae      	b.n	8009472 <__gethex+0x202>
 8009514:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009518:	42a8      	cmp	r0, r5
 800951a:	dd72      	ble.n	8009602 <__gethex+0x392>
 800951c:	1b45      	subs	r5, r0, r5
 800951e:	42ae      	cmp	r6, r5
 8009520:	dc36      	bgt.n	8009590 <__gethex+0x320>
 8009522:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009526:	2b02      	cmp	r3, #2
 8009528:	d02a      	beq.n	8009580 <__gethex+0x310>
 800952a:	2b03      	cmp	r3, #3
 800952c:	d02c      	beq.n	8009588 <__gethex+0x318>
 800952e:	2b01      	cmp	r3, #1
 8009530:	d115      	bne.n	800955e <__gethex+0x2ee>
 8009532:	42ae      	cmp	r6, r5
 8009534:	d113      	bne.n	800955e <__gethex+0x2ee>
 8009536:	2e01      	cmp	r6, #1
 8009538:	d10b      	bne.n	8009552 <__gethex+0x2e2>
 800953a:	9a04      	ldr	r2, [sp, #16]
 800953c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	2301      	movs	r3, #1
 8009544:	6123      	str	r3, [r4, #16]
 8009546:	f8c9 3000 	str.w	r3, [r9]
 800954a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800954c:	2762      	movs	r7, #98	; 0x62
 800954e:	601c      	str	r4, [r3, #0]
 8009550:	e723      	b.n	800939a <__gethex+0x12a>
 8009552:	1e71      	subs	r1, r6, #1
 8009554:	4620      	mov	r0, r4
 8009556:	f000 fe59 	bl	800a20c <__any_on>
 800955a:	2800      	cmp	r0, #0
 800955c:	d1ed      	bne.n	800953a <__gethex+0x2ca>
 800955e:	ee18 0a10 	vmov	r0, s16
 8009562:	4621      	mov	r1, r4
 8009564:	f000 f9f8 	bl	8009958 <_Bfree>
 8009568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800956a:	2300      	movs	r3, #0
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	2750      	movs	r7, #80	; 0x50
 8009570:	e713      	b.n	800939a <__gethex+0x12a>
 8009572:	bf00      	nop
 8009574:	0800e0b0 	.word	0x0800e0b0
 8009578:	0800e034 	.word	0x0800e034
 800957c:	0800e045 	.word	0x0800e045
 8009580:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1eb      	bne.n	800955e <__gethex+0x2ee>
 8009586:	e7d8      	b.n	800953a <__gethex+0x2ca>
 8009588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1d5      	bne.n	800953a <__gethex+0x2ca>
 800958e:	e7e6      	b.n	800955e <__gethex+0x2ee>
 8009590:	1e6f      	subs	r7, r5, #1
 8009592:	f1ba 0f00 	cmp.w	sl, #0
 8009596:	d131      	bne.n	80095fc <__gethex+0x38c>
 8009598:	b127      	cbz	r7, 80095a4 <__gethex+0x334>
 800959a:	4639      	mov	r1, r7
 800959c:	4620      	mov	r0, r4
 800959e:	f000 fe35 	bl	800a20c <__any_on>
 80095a2:	4682      	mov	sl, r0
 80095a4:	117b      	asrs	r3, r7, #5
 80095a6:	2101      	movs	r1, #1
 80095a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80095ac:	f007 071f 	and.w	r7, r7, #31
 80095b0:	fa01 f707 	lsl.w	r7, r1, r7
 80095b4:	421f      	tst	r7, r3
 80095b6:	4629      	mov	r1, r5
 80095b8:	4620      	mov	r0, r4
 80095ba:	bf18      	it	ne
 80095bc:	f04a 0a02 	orrne.w	sl, sl, #2
 80095c0:	1b76      	subs	r6, r6, r5
 80095c2:	f7ff fded 	bl	80091a0 <rshift>
 80095c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095ca:	2702      	movs	r7, #2
 80095cc:	f1ba 0f00 	cmp.w	sl, #0
 80095d0:	d048      	beq.n	8009664 <__gethex+0x3f4>
 80095d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d015      	beq.n	8009606 <__gethex+0x396>
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d017      	beq.n	800960e <__gethex+0x39e>
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d109      	bne.n	80095f6 <__gethex+0x386>
 80095e2:	f01a 0f02 	tst.w	sl, #2
 80095e6:	d006      	beq.n	80095f6 <__gethex+0x386>
 80095e8:	f8d9 0000 	ldr.w	r0, [r9]
 80095ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80095f0:	f01a 0f01 	tst.w	sl, #1
 80095f4:	d10e      	bne.n	8009614 <__gethex+0x3a4>
 80095f6:	f047 0710 	orr.w	r7, r7, #16
 80095fa:	e033      	b.n	8009664 <__gethex+0x3f4>
 80095fc:	f04f 0a01 	mov.w	sl, #1
 8009600:	e7d0      	b.n	80095a4 <__gethex+0x334>
 8009602:	2701      	movs	r7, #1
 8009604:	e7e2      	b.n	80095cc <__gethex+0x35c>
 8009606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009608:	f1c3 0301 	rsb	r3, r3, #1
 800960c:	9315      	str	r3, [sp, #84]	; 0x54
 800960e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0f0      	beq.n	80095f6 <__gethex+0x386>
 8009614:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009618:	f104 0314 	add.w	r3, r4, #20
 800961c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009620:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009624:	f04f 0c00 	mov.w	ip, #0
 8009628:	4618      	mov	r0, r3
 800962a:	f853 2b04 	ldr.w	r2, [r3], #4
 800962e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009632:	d01c      	beq.n	800966e <__gethex+0x3fe>
 8009634:	3201      	adds	r2, #1
 8009636:	6002      	str	r2, [r0, #0]
 8009638:	2f02      	cmp	r7, #2
 800963a:	f104 0314 	add.w	r3, r4, #20
 800963e:	d13f      	bne.n	80096c0 <__gethex+0x450>
 8009640:	f8d8 2000 	ldr.w	r2, [r8]
 8009644:	3a01      	subs	r2, #1
 8009646:	42b2      	cmp	r2, r6
 8009648:	d10a      	bne.n	8009660 <__gethex+0x3f0>
 800964a:	1171      	asrs	r1, r6, #5
 800964c:	2201      	movs	r2, #1
 800964e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009652:	f006 061f 	and.w	r6, r6, #31
 8009656:	fa02 f606 	lsl.w	r6, r2, r6
 800965a:	421e      	tst	r6, r3
 800965c:	bf18      	it	ne
 800965e:	4617      	movne	r7, r2
 8009660:	f047 0720 	orr.w	r7, r7, #32
 8009664:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009666:	601c      	str	r4, [r3, #0]
 8009668:	9b04      	ldr	r3, [sp, #16]
 800966a:	601d      	str	r5, [r3, #0]
 800966c:	e695      	b.n	800939a <__gethex+0x12a>
 800966e:	4299      	cmp	r1, r3
 8009670:	f843 cc04 	str.w	ip, [r3, #-4]
 8009674:	d8d8      	bhi.n	8009628 <__gethex+0x3b8>
 8009676:	68a3      	ldr	r3, [r4, #8]
 8009678:	459b      	cmp	fp, r3
 800967a:	db19      	blt.n	80096b0 <__gethex+0x440>
 800967c:	6861      	ldr	r1, [r4, #4]
 800967e:	ee18 0a10 	vmov	r0, s16
 8009682:	3101      	adds	r1, #1
 8009684:	f000 f928 	bl	80098d8 <_Balloc>
 8009688:	4681      	mov	r9, r0
 800968a:	b918      	cbnz	r0, 8009694 <__gethex+0x424>
 800968c:	4b1a      	ldr	r3, [pc, #104]	; (80096f8 <__gethex+0x488>)
 800968e:	4602      	mov	r2, r0
 8009690:	2184      	movs	r1, #132	; 0x84
 8009692:	e6a8      	b.n	80093e6 <__gethex+0x176>
 8009694:	6922      	ldr	r2, [r4, #16]
 8009696:	3202      	adds	r2, #2
 8009698:	f104 010c 	add.w	r1, r4, #12
 800969c:	0092      	lsls	r2, r2, #2
 800969e:	300c      	adds	r0, #12
 80096a0:	f000 f90c 	bl	80098bc <memcpy>
 80096a4:	4621      	mov	r1, r4
 80096a6:	ee18 0a10 	vmov	r0, s16
 80096aa:	f000 f955 	bl	8009958 <_Bfree>
 80096ae:	464c      	mov	r4, r9
 80096b0:	6923      	ldr	r3, [r4, #16]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096b8:	6122      	str	r2, [r4, #16]
 80096ba:	2201      	movs	r2, #1
 80096bc:	615a      	str	r2, [r3, #20]
 80096be:	e7bb      	b.n	8009638 <__gethex+0x3c8>
 80096c0:	6922      	ldr	r2, [r4, #16]
 80096c2:	455a      	cmp	r2, fp
 80096c4:	dd0b      	ble.n	80096de <__gethex+0x46e>
 80096c6:	2101      	movs	r1, #1
 80096c8:	4620      	mov	r0, r4
 80096ca:	f7ff fd69 	bl	80091a0 <rshift>
 80096ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096d2:	3501      	adds	r5, #1
 80096d4:	42ab      	cmp	r3, r5
 80096d6:	f6ff aed0 	blt.w	800947a <__gethex+0x20a>
 80096da:	2701      	movs	r7, #1
 80096dc:	e7c0      	b.n	8009660 <__gethex+0x3f0>
 80096de:	f016 061f 	ands.w	r6, r6, #31
 80096e2:	d0fa      	beq.n	80096da <__gethex+0x46a>
 80096e4:	449a      	add	sl, r3
 80096e6:	f1c6 0620 	rsb	r6, r6, #32
 80096ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80096ee:	f000 f9e9 	bl	8009ac4 <__hi0bits>
 80096f2:	42b0      	cmp	r0, r6
 80096f4:	dbe7      	blt.n	80096c6 <__gethex+0x456>
 80096f6:	e7f0      	b.n	80096da <__gethex+0x46a>
 80096f8:	0800e034 	.word	0x0800e034

080096fc <L_shift>:
 80096fc:	f1c2 0208 	rsb	r2, r2, #8
 8009700:	0092      	lsls	r2, r2, #2
 8009702:	b570      	push	{r4, r5, r6, lr}
 8009704:	f1c2 0620 	rsb	r6, r2, #32
 8009708:	6843      	ldr	r3, [r0, #4]
 800970a:	6804      	ldr	r4, [r0, #0]
 800970c:	fa03 f506 	lsl.w	r5, r3, r6
 8009710:	432c      	orrs	r4, r5
 8009712:	40d3      	lsrs	r3, r2
 8009714:	6004      	str	r4, [r0, #0]
 8009716:	f840 3f04 	str.w	r3, [r0, #4]!
 800971a:	4288      	cmp	r0, r1
 800971c:	d3f4      	bcc.n	8009708 <L_shift+0xc>
 800971e:	bd70      	pop	{r4, r5, r6, pc}

08009720 <__match>:
 8009720:	b530      	push	{r4, r5, lr}
 8009722:	6803      	ldr	r3, [r0, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800972a:	b914      	cbnz	r4, 8009732 <__match+0x12>
 800972c:	6003      	str	r3, [r0, #0]
 800972e:	2001      	movs	r0, #1
 8009730:	bd30      	pop	{r4, r5, pc}
 8009732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009736:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800973a:	2d19      	cmp	r5, #25
 800973c:	bf98      	it	ls
 800973e:	3220      	addls	r2, #32
 8009740:	42a2      	cmp	r2, r4
 8009742:	d0f0      	beq.n	8009726 <__match+0x6>
 8009744:	2000      	movs	r0, #0
 8009746:	e7f3      	b.n	8009730 <__match+0x10>

08009748 <__hexnan>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	680b      	ldr	r3, [r1, #0]
 800974e:	6801      	ldr	r1, [r0, #0]
 8009750:	115e      	asrs	r6, r3, #5
 8009752:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009756:	f013 031f 	ands.w	r3, r3, #31
 800975a:	b087      	sub	sp, #28
 800975c:	bf18      	it	ne
 800975e:	3604      	addne	r6, #4
 8009760:	2500      	movs	r5, #0
 8009762:	1f37      	subs	r7, r6, #4
 8009764:	4682      	mov	sl, r0
 8009766:	4690      	mov	r8, r2
 8009768:	9301      	str	r3, [sp, #4]
 800976a:	f846 5c04 	str.w	r5, [r6, #-4]
 800976e:	46b9      	mov	r9, r7
 8009770:	463c      	mov	r4, r7
 8009772:	9502      	str	r5, [sp, #8]
 8009774:	46ab      	mov	fp, r5
 8009776:	784a      	ldrb	r2, [r1, #1]
 8009778:	1c4b      	adds	r3, r1, #1
 800977a:	9303      	str	r3, [sp, #12]
 800977c:	b342      	cbz	r2, 80097d0 <__hexnan+0x88>
 800977e:	4610      	mov	r0, r2
 8009780:	9105      	str	r1, [sp, #20]
 8009782:	9204      	str	r2, [sp, #16]
 8009784:	f7ff fd5e 	bl	8009244 <__hexdig_fun>
 8009788:	2800      	cmp	r0, #0
 800978a:	d14f      	bne.n	800982c <__hexnan+0xe4>
 800978c:	9a04      	ldr	r2, [sp, #16]
 800978e:	9905      	ldr	r1, [sp, #20]
 8009790:	2a20      	cmp	r2, #32
 8009792:	d818      	bhi.n	80097c6 <__hexnan+0x7e>
 8009794:	9b02      	ldr	r3, [sp, #8]
 8009796:	459b      	cmp	fp, r3
 8009798:	dd13      	ble.n	80097c2 <__hexnan+0x7a>
 800979a:	454c      	cmp	r4, r9
 800979c:	d206      	bcs.n	80097ac <__hexnan+0x64>
 800979e:	2d07      	cmp	r5, #7
 80097a0:	dc04      	bgt.n	80097ac <__hexnan+0x64>
 80097a2:	462a      	mov	r2, r5
 80097a4:	4649      	mov	r1, r9
 80097a6:	4620      	mov	r0, r4
 80097a8:	f7ff ffa8 	bl	80096fc <L_shift>
 80097ac:	4544      	cmp	r4, r8
 80097ae:	d950      	bls.n	8009852 <__hexnan+0x10a>
 80097b0:	2300      	movs	r3, #0
 80097b2:	f1a4 0904 	sub.w	r9, r4, #4
 80097b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80097ba:	f8cd b008 	str.w	fp, [sp, #8]
 80097be:	464c      	mov	r4, r9
 80097c0:	461d      	mov	r5, r3
 80097c2:	9903      	ldr	r1, [sp, #12]
 80097c4:	e7d7      	b.n	8009776 <__hexnan+0x2e>
 80097c6:	2a29      	cmp	r2, #41	; 0x29
 80097c8:	d156      	bne.n	8009878 <__hexnan+0x130>
 80097ca:	3102      	adds	r1, #2
 80097cc:	f8ca 1000 	str.w	r1, [sl]
 80097d0:	f1bb 0f00 	cmp.w	fp, #0
 80097d4:	d050      	beq.n	8009878 <__hexnan+0x130>
 80097d6:	454c      	cmp	r4, r9
 80097d8:	d206      	bcs.n	80097e8 <__hexnan+0xa0>
 80097da:	2d07      	cmp	r5, #7
 80097dc:	dc04      	bgt.n	80097e8 <__hexnan+0xa0>
 80097de:	462a      	mov	r2, r5
 80097e0:	4649      	mov	r1, r9
 80097e2:	4620      	mov	r0, r4
 80097e4:	f7ff ff8a 	bl	80096fc <L_shift>
 80097e8:	4544      	cmp	r4, r8
 80097ea:	d934      	bls.n	8009856 <__hexnan+0x10e>
 80097ec:	f1a8 0204 	sub.w	r2, r8, #4
 80097f0:	4623      	mov	r3, r4
 80097f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80097f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80097fa:	429f      	cmp	r7, r3
 80097fc:	d2f9      	bcs.n	80097f2 <__hexnan+0xaa>
 80097fe:	1b3b      	subs	r3, r7, r4
 8009800:	f023 0303 	bic.w	r3, r3, #3
 8009804:	3304      	adds	r3, #4
 8009806:	3401      	adds	r4, #1
 8009808:	3e03      	subs	r6, #3
 800980a:	42b4      	cmp	r4, r6
 800980c:	bf88      	it	hi
 800980e:	2304      	movhi	r3, #4
 8009810:	4443      	add	r3, r8
 8009812:	2200      	movs	r2, #0
 8009814:	f843 2b04 	str.w	r2, [r3], #4
 8009818:	429f      	cmp	r7, r3
 800981a:	d2fb      	bcs.n	8009814 <__hexnan+0xcc>
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	b91b      	cbnz	r3, 8009828 <__hexnan+0xe0>
 8009820:	4547      	cmp	r7, r8
 8009822:	d127      	bne.n	8009874 <__hexnan+0x12c>
 8009824:	2301      	movs	r3, #1
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	2005      	movs	r0, #5
 800982a:	e026      	b.n	800987a <__hexnan+0x132>
 800982c:	3501      	adds	r5, #1
 800982e:	2d08      	cmp	r5, #8
 8009830:	f10b 0b01 	add.w	fp, fp, #1
 8009834:	dd06      	ble.n	8009844 <__hexnan+0xfc>
 8009836:	4544      	cmp	r4, r8
 8009838:	d9c3      	bls.n	80097c2 <__hexnan+0x7a>
 800983a:	2300      	movs	r3, #0
 800983c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009840:	2501      	movs	r5, #1
 8009842:	3c04      	subs	r4, #4
 8009844:	6822      	ldr	r2, [r4, #0]
 8009846:	f000 000f 	and.w	r0, r0, #15
 800984a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800984e:	6022      	str	r2, [r4, #0]
 8009850:	e7b7      	b.n	80097c2 <__hexnan+0x7a>
 8009852:	2508      	movs	r5, #8
 8009854:	e7b5      	b.n	80097c2 <__hexnan+0x7a>
 8009856:	9b01      	ldr	r3, [sp, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0df      	beq.n	800981c <__hexnan+0xd4>
 800985c:	f04f 32ff 	mov.w	r2, #4294967295
 8009860:	f1c3 0320 	rsb	r3, r3, #32
 8009864:	fa22 f303 	lsr.w	r3, r2, r3
 8009868:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800986c:	401a      	ands	r2, r3
 800986e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009872:	e7d3      	b.n	800981c <__hexnan+0xd4>
 8009874:	3f04      	subs	r7, #4
 8009876:	e7d1      	b.n	800981c <__hexnan+0xd4>
 8009878:	2004      	movs	r0, #4
 800987a:	b007      	add	sp, #28
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009880 <_localeconv_r>:
 8009880:	4800      	ldr	r0, [pc, #0]	; (8009884 <_localeconv_r+0x4>)
 8009882:	4770      	bx	lr
 8009884:	200002a8 	.word	0x200002a8

08009888 <malloc>:
 8009888:	4b02      	ldr	r3, [pc, #8]	; (8009894 <malloc+0xc>)
 800988a:	4601      	mov	r1, r0
 800988c:	6818      	ldr	r0, [r3, #0]
 800988e:	f000 bd3d 	b.w	800a30c <_malloc_r>
 8009892:	bf00      	nop
 8009894:	20000150 	.word	0x20000150

08009898 <__ascii_mbtowc>:
 8009898:	b082      	sub	sp, #8
 800989a:	b901      	cbnz	r1, 800989e <__ascii_mbtowc+0x6>
 800989c:	a901      	add	r1, sp, #4
 800989e:	b142      	cbz	r2, 80098b2 <__ascii_mbtowc+0x1a>
 80098a0:	b14b      	cbz	r3, 80098b6 <__ascii_mbtowc+0x1e>
 80098a2:	7813      	ldrb	r3, [r2, #0]
 80098a4:	600b      	str	r3, [r1, #0]
 80098a6:	7812      	ldrb	r2, [r2, #0]
 80098a8:	1e10      	subs	r0, r2, #0
 80098aa:	bf18      	it	ne
 80098ac:	2001      	movne	r0, #1
 80098ae:	b002      	add	sp, #8
 80098b0:	4770      	bx	lr
 80098b2:	4610      	mov	r0, r2
 80098b4:	e7fb      	b.n	80098ae <__ascii_mbtowc+0x16>
 80098b6:	f06f 0001 	mvn.w	r0, #1
 80098ba:	e7f8      	b.n	80098ae <__ascii_mbtowc+0x16>

080098bc <memcpy>:
 80098bc:	440a      	add	r2, r1
 80098be:	4291      	cmp	r1, r2
 80098c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80098c4:	d100      	bne.n	80098c8 <memcpy+0xc>
 80098c6:	4770      	bx	lr
 80098c8:	b510      	push	{r4, lr}
 80098ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098d2:	4291      	cmp	r1, r2
 80098d4:	d1f9      	bne.n	80098ca <memcpy+0xe>
 80098d6:	bd10      	pop	{r4, pc}

080098d8 <_Balloc>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098dc:	4604      	mov	r4, r0
 80098de:	460d      	mov	r5, r1
 80098e0:	b976      	cbnz	r6, 8009900 <_Balloc+0x28>
 80098e2:	2010      	movs	r0, #16
 80098e4:	f7ff ffd0 	bl	8009888 <malloc>
 80098e8:	4602      	mov	r2, r0
 80098ea:	6260      	str	r0, [r4, #36]	; 0x24
 80098ec:	b920      	cbnz	r0, 80098f8 <_Balloc+0x20>
 80098ee:	4b18      	ldr	r3, [pc, #96]	; (8009950 <_Balloc+0x78>)
 80098f0:	4818      	ldr	r0, [pc, #96]	; (8009954 <_Balloc+0x7c>)
 80098f2:	2166      	movs	r1, #102	; 0x66
 80098f4:	f000 fef8 	bl	800a6e8 <__assert_func>
 80098f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098fc:	6006      	str	r6, [r0, #0]
 80098fe:	60c6      	str	r6, [r0, #12]
 8009900:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009902:	68f3      	ldr	r3, [r6, #12]
 8009904:	b183      	cbz	r3, 8009928 <_Balloc+0x50>
 8009906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800990e:	b9b8      	cbnz	r0, 8009940 <_Balloc+0x68>
 8009910:	2101      	movs	r1, #1
 8009912:	fa01 f605 	lsl.w	r6, r1, r5
 8009916:	1d72      	adds	r2, r6, #5
 8009918:	0092      	lsls	r2, r2, #2
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fc97 	bl	800a24e <_calloc_r>
 8009920:	b160      	cbz	r0, 800993c <_Balloc+0x64>
 8009922:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009926:	e00e      	b.n	8009946 <_Balloc+0x6e>
 8009928:	2221      	movs	r2, #33	; 0x21
 800992a:	2104      	movs	r1, #4
 800992c:	4620      	mov	r0, r4
 800992e:	f000 fc8e 	bl	800a24e <_calloc_r>
 8009932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009934:	60f0      	str	r0, [r6, #12]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e4      	bne.n	8009906 <_Balloc+0x2e>
 800993c:	2000      	movs	r0, #0
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	6802      	ldr	r2, [r0, #0]
 8009942:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009946:	2300      	movs	r3, #0
 8009948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800994c:	e7f7      	b.n	800993e <_Balloc+0x66>
 800994e:	bf00      	nop
 8009950:	0800dfbe 	.word	0x0800dfbe
 8009954:	0800e0c4 	.word	0x0800e0c4

08009958 <_Bfree>:
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800995c:	4605      	mov	r5, r0
 800995e:	460c      	mov	r4, r1
 8009960:	b976      	cbnz	r6, 8009980 <_Bfree+0x28>
 8009962:	2010      	movs	r0, #16
 8009964:	f7ff ff90 	bl	8009888 <malloc>
 8009968:	4602      	mov	r2, r0
 800996a:	6268      	str	r0, [r5, #36]	; 0x24
 800996c:	b920      	cbnz	r0, 8009978 <_Bfree+0x20>
 800996e:	4b09      	ldr	r3, [pc, #36]	; (8009994 <_Bfree+0x3c>)
 8009970:	4809      	ldr	r0, [pc, #36]	; (8009998 <_Bfree+0x40>)
 8009972:	218a      	movs	r1, #138	; 0x8a
 8009974:	f000 feb8 	bl	800a6e8 <__assert_func>
 8009978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800997c:	6006      	str	r6, [r0, #0]
 800997e:	60c6      	str	r6, [r0, #12]
 8009980:	b13c      	cbz	r4, 8009992 <_Bfree+0x3a>
 8009982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009984:	6862      	ldr	r2, [r4, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800998c:	6021      	str	r1, [r4, #0]
 800998e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	0800dfbe 	.word	0x0800dfbe
 8009998:	0800e0c4 	.word	0x0800e0c4

0800999c <__multadd>:
 800999c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a0:	690e      	ldr	r6, [r1, #16]
 80099a2:	4607      	mov	r7, r0
 80099a4:	4698      	mov	r8, r3
 80099a6:	460c      	mov	r4, r1
 80099a8:	f101 0014 	add.w	r0, r1, #20
 80099ac:	2300      	movs	r3, #0
 80099ae:	6805      	ldr	r5, [r0, #0]
 80099b0:	b2a9      	uxth	r1, r5
 80099b2:	fb02 8101 	mla	r1, r2, r1, r8
 80099b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80099ba:	0c2d      	lsrs	r5, r5, #16
 80099bc:	fb02 c505 	mla	r5, r2, r5, ip
 80099c0:	b289      	uxth	r1, r1
 80099c2:	3301      	adds	r3, #1
 80099c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80099c8:	429e      	cmp	r6, r3
 80099ca:	f840 1b04 	str.w	r1, [r0], #4
 80099ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80099d2:	dcec      	bgt.n	80099ae <__multadd+0x12>
 80099d4:	f1b8 0f00 	cmp.w	r8, #0
 80099d8:	d022      	beq.n	8009a20 <__multadd+0x84>
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	42b3      	cmp	r3, r6
 80099de:	dc19      	bgt.n	8009a14 <__multadd+0x78>
 80099e0:	6861      	ldr	r1, [r4, #4]
 80099e2:	4638      	mov	r0, r7
 80099e4:	3101      	adds	r1, #1
 80099e6:	f7ff ff77 	bl	80098d8 <_Balloc>
 80099ea:	4605      	mov	r5, r0
 80099ec:	b928      	cbnz	r0, 80099fa <__multadd+0x5e>
 80099ee:	4602      	mov	r2, r0
 80099f0:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <__multadd+0x8c>)
 80099f2:	480e      	ldr	r0, [pc, #56]	; (8009a2c <__multadd+0x90>)
 80099f4:	21b5      	movs	r1, #181	; 0xb5
 80099f6:	f000 fe77 	bl	800a6e8 <__assert_func>
 80099fa:	6922      	ldr	r2, [r4, #16]
 80099fc:	3202      	adds	r2, #2
 80099fe:	f104 010c 	add.w	r1, r4, #12
 8009a02:	0092      	lsls	r2, r2, #2
 8009a04:	300c      	adds	r0, #12
 8009a06:	f7ff ff59 	bl	80098bc <memcpy>
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f7ff ffa3 	bl	8009958 <_Bfree>
 8009a12:	462c      	mov	r4, r5
 8009a14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009a18:	3601      	adds	r6, #1
 8009a1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009a1e:	6126      	str	r6, [r4, #16]
 8009a20:	4620      	mov	r0, r4
 8009a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a26:	bf00      	nop
 8009a28:	0800e034 	.word	0x0800e034
 8009a2c:	0800e0c4 	.word	0x0800e0c4

08009a30 <__s2b>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	460c      	mov	r4, r1
 8009a36:	4615      	mov	r5, r2
 8009a38:	461f      	mov	r7, r3
 8009a3a:	2209      	movs	r2, #9
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	4606      	mov	r6, r0
 8009a40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a44:	2100      	movs	r1, #0
 8009a46:	2201      	movs	r2, #1
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	db09      	blt.n	8009a60 <__s2b+0x30>
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7ff ff43 	bl	80098d8 <_Balloc>
 8009a52:	b940      	cbnz	r0, 8009a66 <__s2b+0x36>
 8009a54:	4602      	mov	r2, r0
 8009a56:	4b19      	ldr	r3, [pc, #100]	; (8009abc <__s2b+0x8c>)
 8009a58:	4819      	ldr	r0, [pc, #100]	; (8009ac0 <__s2b+0x90>)
 8009a5a:	21ce      	movs	r1, #206	; 0xce
 8009a5c:	f000 fe44 	bl	800a6e8 <__assert_func>
 8009a60:	0052      	lsls	r2, r2, #1
 8009a62:	3101      	adds	r1, #1
 8009a64:	e7f0      	b.n	8009a48 <__s2b+0x18>
 8009a66:	9b08      	ldr	r3, [sp, #32]
 8009a68:	6143      	str	r3, [r0, #20]
 8009a6a:	2d09      	cmp	r5, #9
 8009a6c:	f04f 0301 	mov.w	r3, #1
 8009a70:	6103      	str	r3, [r0, #16]
 8009a72:	dd16      	ble.n	8009aa2 <__s2b+0x72>
 8009a74:	f104 0909 	add.w	r9, r4, #9
 8009a78:	46c8      	mov	r8, r9
 8009a7a:	442c      	add	r4, r5
 8009a7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a80:	4601      	mov	r1, r0
 8009a82:	3b30      	subs	r3, #48	; 0x30
 8009a84:	220a      	movs	r2, #10
 8009a86:	4630      	mov	r0, r6
 8009a88:	f7ff ff88 	bl	800999c <__multadd>
 8009a8c:	45a0      	cmp	r8, r4
 8009a8e:	d1f5      	bne.n	8009a7c <__s2b+0x4c>
 8009a90:	f1a5 0408 	sub.w	r4, r5, #8
 8009a94:	444c      	add	r4, r9
 8009a96:	1b2d      	subs	r5, r5, r4
 8009a98:	1963      	adds	r3, r4, r5
 8009a9a:	42bb      	cmp	r3, r7
 8009a9c:	db04      	blt.n	8009aa8 <__s2b+0x78>
 8009a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa2:	340a      	adds	r4, #10
 8009aa4:	2509      	movs	r5, #9
 8009aa6:	e7f6      	b.n	8009a96 <__s2b+0x66>
 8009aa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009aac:	4601      	mov	r1, r0
 8009aae:	3b30      	subs	r3, #48	; 0x30
 8009ab0:	220a      	movs	r2, #10
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ff72 	bl	800999c <__multadd>
 8009ab8:	e7ee      	b.n	8009a98 <__s2b+0x68>
 8009aba:	bf00      	nop
 8009abc:	0800e034 	.word	0x0800e034
 8009ac0:	0800e0c4 	.word	0x0800e0c4

08009ac4 <__hi0bits>:
 8009ac4:	0c03      	lsrs	r3, r0, #16
 8009ac6:	041b      	lsls	r3, r3, #16
 8009ac8:	b9d3      	cbnz	r3, 8009b00 <__hi0bits+0x3c>
 8009aca:	0400      	lsls	r0, r0, #16
 8009acc:	2310      	movs	r3, #16
 8009ace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ad2:	bf04      	itt	eq
 8009ad4:	0200      	lsleq	r0, r0, #8
 8009ad6:	3308      	addeq	r3, #8
 8009ad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009adc:	bf04      	itt	eq
 8009ade:	0100      	lsleq	r0, r0, #4
 8009ae0:	3304      	addeq	r3, #4
 8009ae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ae6:	bf04      	itt	eq
 8009ae8:	0080      	lsleq	r0, r0, #2
 8009aea:	3302      	addeq	r3, #2
 8009aec:	2800      	cmp	r0, #0
 8009aee:	db05      	blt.n	8009afc <__hi0bits+0x38>
 8009af0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009af4:	f103 0301 	add.w	r3, r3, #1
 8009af8:	bf08      	it	eq
 8009afa:	2320      	moveq	r3, #32
 8009afc:	4618      	mov	r0, r3
 8009afe:	4770      	bx	lr
 8009b00:	2300      	movs	r3, #0
 8009b02:	e7e4      	b.n	8009ace <__hi0bits+0xa>

08009b04 <__lo0bits>:
 8009b04:	6803      	ldr	r3, [r0, #0]
 8009b06:	f013 0207 	ands.w	r2, r3, #7
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	d00b      	beq.n	8009b26 <__lo0bits+0x22>
 8009b0e:	07da      	lsls	r2, r3, #31
 8009b10:	d424      	bmi.n	8009b5c <__lo0bits+0x58>
 8009b12:	0798      	lsls	r0, r3, #30
 8009b14:	bf49      	itett	mi
 8009b16:	085b      	lsrmi	r3, r3, #1
 8009b18:	089b      	lsrpl	r3, r3, #2
 8009b1a:	2001      	movmi	r0, #1
 8009b1c:	600b      	strmi	r3, [r1, #0]
 8009b1e:	bf5c      	itt	pl
 8009b20:	600b      	strpl	r3, [r1, #0]
 8009b22:	2002      	movpl	r0, #2
 8009b24:	4770      	bx	lr
 8009b26:	b298      	uxth	r0, r3
 8009b28:	b9b0      	cbnz	r0, 8009b58 <__lo0bits+0x54>
 8009b2a:	0c1b      	lsrs	r3, r3, #16
 8009b2c:	2010      	movs	r0, #16
 8009b2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b32:	bf04      	itt	eq
 8009b34:	0a1b      	lsreq	r3, r3, #8
 8009b36:	3008      	addeq	r0, #8
 8009b38:	071a      	lsls	r2, r3, #28
 8009b3a:	bf04      	itt	eq
 8009b3c:	091b      	lsreq	r3, r3, #4
 8009b3e:	3004      	addeq	r0, #4
 8009b40:	079a      	lsls	r2, r3, #30
 8009b42:	bf04      	itt	eq
 8009b44:	089b      	lsreq	r3, r3, #2
 8009b46:	3002      	addeq	r0, #2
 8009b48:	07da      	lsls	r2, r3, #31
 8009b4a:	d403      	bmi.n	8009b54 <__lo0bits+0x50>
 8009b4c:	085b      	lsrs	r3, r3, #1
 8009b4e:	f100 0001 	add.w	r0, r0, #1
 8009b52:	d005      	beq.n	8009b60 <__lo0bits+0x5c>
 8009b54:	600b      	str	r3, [r1, #0]
 8009b56:	4770      	bx	lr
 8009b58:	4610      	mov	r0, r2
 8009b5a:	e7e8      	b.n	8009b2e <__lo0bits+0x2a>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	4770      	bx	lr
 8009b60:	2020      	movs	r0, #32
 8009b62:	4770      	bx	lr

08009b64 <__i2b>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	460c      	mov	r4, r1
 8009b68:	2101      	movs	r1, #1
 8009b6a:	f7ff feb5 	bl	80098d8 <_Balloc>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	b928      	cbnz	r0, 8009b7e <__i2b+0x1a>
 8009b72:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <__i2b+0x24>)
 8009b74:	4805      	ldr	r0, [pc, #20]	; (8009b8c <__i2b+0x28>)
 8009b76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b7a:	f000 fdb5 	bl	800a6e8 <__assert_func>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	6144      	str	r4, [r0, #20]
 8009b82:	6103      	str	r3, [r0, #16]
 8009b84:	bd10      	pop	{r4, pc}
 8009b86:	bf00      	nop
 8009b88:	0800e034 	.word	0x0800e034
 8009b8c:	0800e0c4 	.word	0x0800e0c4

08009b90 <__multiply>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	4614      	mov	r4, r2
 8009b96:	690a      	ldr	r2, [r1, #16]
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	bfb8      	it	lt
 8009b9e:	460b      	movlt	r3, r1
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	bfbc      	itt	lt
 8009ba4:	4625      	movlt	r5, r4
 8009ba6:	461c      	movlt	r4, r3
 8009ba8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009bac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009bb0:	68ab      	ldr	r3, [r5, #8]
 8009bb2:	6869      	ldr	r1, [r5, #4]
 8009bb4:	eb0a 0709 	add.w	r7, sl, r9
 8009bb8:	42bb      	cmp	r3, r7
 8009bba:	b085      	sub	sp, #20
 8009bbc:	bfb8      	it	lt
 8009bbe:	3101      	addlt	r1, #1
 8009bc0:	f7ff fe8a 	bl	80098d8 <_Balloc>
 8009bc4:	b930      	cbnz	r0, 8009bd4 <__multiply+0x44>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	4b42      	ldr	r3, [pc, #264]	; (8009cd4 <__multiply+0x144>)
 8009bca:	4843      	ldr	r0, [pc, #268]	; (8009cd8 <__multiply+0x148>)
 8009bcc:	f240 115d 	movw	r1, #349	; 0x15d
 8009bd0:	f000 fd8a 	bl	800a6e8 <__assert_func>
 8009bd4:	f100 0614 	add.w	r6, r0, #20
 8009bd8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009bdc:	4633      	mov	r3, r6
 8009bde:	2200      	movs	r2, #0
 8009be0:	4543      	cmp	r3, r8
 8009be2:	d31e      	bcc.n	8009c22 <__multiply+0x92>
 8009be4:	f105 0c14 	add.w	ip, r5, #20
 8009be8:	f104 0314 	add.w	r3, r4, #20
 8009bec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009bf0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009bf4:	9202      	str	r2, [sp, #8]
 8009bf6:	ebac 0205 	sub.w	r2, ip, r5
 8009bfa:	3a15      	subs	r2, #21
 8009bfc:	f022 0203 	bic.w	r2, r2, #3
 8009c00:	3204      	adds	r2, #4
 8009c02:	f105 0115 	add.w	r1, r5, #21
 8009c06:	458c      	cmp	ip, r1
 8009c08:	bf38      	it	cc
 8009c0a:	2204      	movcc	r2, #4
 8009c0c:	9201      	str	r2, [sp, #4]
 8009c0e:	9a02      	ldr	r2, [sp, #8]
 8009c10:	9303      	str	r3, [sp, #12]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d808      	bhi.n	8009c28 <__multiply+0x98>
 8009c16:	2f00      	cmp	r7, #0
 8009c18:	dc55      	bgt.n	8009cc6 <__multiply+0x136>
 8009c1a:	6107      	str	r7, [r0, #16]
 8009c1c:	b005      	add	sp, #20
 8009c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c22:	f843 2b04 	str.w	r2, [r3], #4
 8009c26:	e7db      	b.n	8009be0 <__multiply+0x50>
 8009c28:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c2c:	f1ba 0f00 	cmp.w	sl, #0
 8009c30:	d020      	beq.n	8009c74 <__multiply+0xe4>
 8009c32:	f105 0e14 	add.w	lr, r5, #20
 8009c36:	46b1      	mov	r9, r6
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009c3e:	f8d9 b000 	ldr.w	fp, [r9]
 8009c42:	b2a1      	uxth	r1, r4
 8009c44:	fa1f fb8b 	uxth.w	fp, fp
 8009c48:	fb0a b101 	mla	r1, sl, r1, fp
 8009c4c:	4411      	add	r1, r2
 8009c4e:	f8d9 2000 	ldr.w	r2, [r9]
 8009c52:	0c24      	lsrs	r4, r4, #16
 8009c54:	0c12      	lsrs	r2, r2, #16
 8009c56:	fb0a 2404 	mla	r4, sl, r4, r2
 8009c5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009c5e:	b289      	uxth	r1, r1
 8009c60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009c64:	45f4      	cmp	ip, lr
 8009c66:	f849 1b04 	str.w	r1, [r9], #4
 8009c6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009c6e:	d8e4      	bhi.n	8009c3a <__multiply+0xaa>
 8009c70:	9901      	ldr	r1, [sp, #4]
 8009c72:	5072      	str	r2, [r6, r1]
 8009c74:	9a03      	ldr	r2, [sp, #12]
 8009c76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	f1b9 0f00 	cmp.w	r9, #0
 8009c80:	d01f      	beq.n	8009cc2 <__multiply+0x132>
 8009c82:	6834      	ldr	r4, [r6, #0]
 8009c84:	f105 0114 	add.w	r1, r5, #20
 8009c88:	46b6      	mov	lr, r6
 8009c8a:	f04f 0a00 	mov.w	sl, #0
 8009c8e:	880a      	ldrh	r2, [r1, #0]
 8009c90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009c94:	fb09 b202 	mla	r2, r9, r2, fp
 8009c98:	4492      	add	sl, r2
 8009c9a:	b2a4      	uxth	r4, r4
 8009c9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009ca0:	f84e 4b04 	str.w	r4, [lr], #4
 8009ca4:	f851 4b04 	ldr.w	r4, [r1], #4
 8009ca8:	f8be 2000 	ldrh.w	r2, [lr]
 8009cac:	0c24      	lsrs	r4, r4, #16
 8009cae:	fb09 2404 	mla	r4, r9, r4, r2
 8009cb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009cb6:	458c      	cmp	ip, r1
 8009cb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009cbc:	d8e7      	bhi.n	8009c8e <__multiply+0xfe>
 8009cbe:	9a01      	ldr	r2, [sp, #4]
 8009cc0:	50b4      	str	r4, [r6, r2]
 8009cc2:	3604      	adds	r6, #4
 8009cc4:	e7a3      	b.n	8009c0e <__multiply+0x7e>
 8009cc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1a5      	bne.n	8009c1a <__multiply+0x8a>
 8009cce:	3f01      	subs	r7, #1
 8009cd0:	e7a1      	b.n	8009c16 <__multiply+0x86>
 8009cd2:	bf00      	nop
 8009cd4:	0800e034 	.word	0x0800e034
 8009cd8:	0800e0c4 	.word	0x0800e0c4

08009cdc <__pow5mult>:
 8009cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	4615      	mov	r5, r2
 8009ce2:	f012 0203 	ands.w	r2, r2, #3
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460f      	mov	r7, r1
 8009cea:	d007      	beq.n	8009cfc <__pow5mult+0x20>
 8009cec:	4c25      	ldr	r4, [pc, #148]	; (8009d84 <__pow5mult+0xa8>)
 8009cee:	3a01      	subs	r2, #1
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cf6:	f7ff fe51 	bl	800999c <__multadd>
 8009cfa:	4607      	mov	r7, r0
 8009cfc:	10ad      	asrs	r5, r5, #2
 8009cfe:	d03d      	beq.n	8009d7c <__pow5mult+0xa0>
 8009d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d02:	b97c      	cbnz	r4, 8009d24 <__pow5mult+0x48>
 8009d04:	2010      	movs	r0, #16
 8009d06:	f7ff fdbf 	bl	8009888 <malloc>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	6270      	str	r0, [r6, #36]	; 0x24
 8009d0e:	b928      	cbnz	r0, 8009d1c <__pow5mult+0x40>
 8009d10:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <__pow5mult+0xac>)
 8009d12:	481e      	ldr	r0, [pc, #120]	; (8009d8c <__pow5mult+0xb0>)
 8009d14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d18:	f000 fce6 	bl	800a6e8 <__assert_func>
 8009d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d20:	6004      	str	r4, [r0, #0]
 8009d22:	60c4      	str	r4, [r0, #12]
 8009d24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d2c:	b94c      	cbnz	r4, 8009d42 <__pow5mult+0x66>
 8009d2e:	f240 2171 	movw	r1, #625	; 0x271
 8009d32:	4630      	mov	r0, r6
 8009d34:	f7ff ff16 	bl	8009b64 <__i2b>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d3e:	4604      	mov	r4, r0
 8009d40:	6003      	str	r3, [r0, #0]
 8009d42:	f04f 0900 	mov.w	r9, #0
 8009d46:	07eb      	lsls	r3, r5, #31
 8009d48:	d50a      	bpl.n	8009d60 <__pow5mult+0x84>
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	4622      	mov	r2, r4
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f7ff ff1e 	bl	8009b90 <__multiply>
 8009d54:	4639      	mov	r1, r7
 8009d56:	4680      	mov	r8, r0
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7ff fdfd 	bl	8009958 <_Bfree>
 8009d5e:	4647      	mov	r7, r8
 8009d60:	106d      	asrs	r5, r5, #1
 8009d62:	d00b      	beq.n	8009d7c <__pow5mult+0xa0>
 8009d64:	6820      	ldr	r0, [r4, #0]
 8009d66:	b938      	cbnz	r0, 8009d78 <__pow5mult+0x9c>
 8009d68:	4622      	mov	r2, r4
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f7ff ff0f 	bl	8009b90 <__multiply>
 8009d72:	6020      	str	r0, [r4, #0]
 8009d74:	f8c0 9000 	str.w	r9, [r0]
 8009d78:	4604      	mov	r4, r0
 8009d7a:	e7e4      	b.n	8009d46 <__pow5mult+0x6a>
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d82:	bf00      	nop
 8009d84:	0800e218 	.word	0x0800e218
 8009d88:	0800dfbe 	.word	0x0800dfbe
 8009d8c:	0800e0c4 	.word	0x0800e0c4

08009d90 <__lshift>:
 8009d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d94:	460c      	mov	r4, r1
 8009d96:	6849      	ldr	r1, [r1, #4]
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	4607      	mov	r7, r0
 8009da2:	4691      	mov	r9, r2
 8009da4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009da8:	f108 0601 	add.w	r6, r8, #1
 8009dac:	42b3      	cmp	r3, r6
 8009dae:	db0b      	blt.n	8009dc8 <__lshift+0x38>
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7ff fd91 	bl	80098d8 <_Balloc>
 8009db6:	4605      	mov	r5, r0
 8009db8:	b948      	cbnz	r0, 8009dce <__lshift+0x3e>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	4b28      	ldr	r3, [pc, #160]	; (8009e60 <__lshift+0xd0>)
 8009dbe:	4829      	ldr	r0, [pc, #164]	; (8009e64 <__lshift+0xd4>)
 8009dc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009dc4:	f000 fc90 	bl	800a6e8 <__assert_func>
 8009dc8:	3101      	adds	r1, #1
 8009dca:	005b      	lsls	r3, r3, #1
 8009dcc:	e7ee      	b.n	8009dac <__lshift+0x1c>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f100 0114 	add.w	r1, r0, #20
 8009dd4:	f100 0210 	add.w	r2, r0, #16
 8009dd8:	4618      	mov	r0, r3
 8009dda:	4553      	cmp	r3, sl
 8009ddc:	db33      	blt.n	8009e46 <__lshift+0xb6>
 8009dde:	6920      	ldr	r0, [r4, #16]
 8009de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009de4:	f104 0314 	add.w	r3, r4, #20
 8009de8:	f019 091f 	ands.w	r9, r9, #31
 8009dec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009df0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009df4:	d02b      	beq.n	8009e4e <__lshift+0xbe>
 8009df6:	f1c9 0e20 	rsb	lr, r9, #32
 8009dfa:	468a      	mov	sl, r1
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	6818      	ldr	r0, [r3, #0]
 8009e00:	fa00 f009 	lsl.w	r0, r0, r9
 8009e04:	4302      	orrs	r2, r0
 8009e06:	f84a 2b04 	str.w	r2, [sl], #4
 8009e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e0e:	459c      	cmp	ip, r3
 8009e10:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e14:	d8f3      	bhi.n	8009dfe <__lshift+0x6e>
 8009e16:	ebac 0304 	sub.w	r3, ip, r4
 8009e1a:	3b15      	subs	r3, #21
 8009e1c:	f023 0303 	bic.w	r3, r3, #3
 8009e20:	3304      	adds	r3, #4
 8009e22:	f104 0015 	add.w	r0, r4, #21
 8009e26:	4584      	cmp	ip, r0
 8009e28:	bf38      	it	cc
 8009e2a:	2304      	movcc	r3, #4
 8009e2c:	50ca      	str	r2, [r1, r3]
 8009e2e:	b10a      	cbz	r2, 8009e34 <__lshift+0xa4>
 8009e30:	f108 0602 	add.w	r6, r8, #2
 8009e34:	3e01      	subs	r6, #1
 8009e36:	4638      	mov	r0, r7
 8009e38:	612e      	str	r6, [r5, #16]
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	f7ff fd8c 	bl	8009958 <_Bfree>
 8009e40:	4628      	mov	r0, r5
 8009e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	e7c5      	b.n	8009dda <__lshift+0x4a>
 8009e4e:	3904      	subs	r1, #4
 8009e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e58:	459c      	cmp	ip, r3
 8009e5a:	d8f9      	bhi.n	8009e50 <__lshift+0xc0>
 8009e5c:	e7ea      	b.n	8009e34 <__lshift+0xa4>
 8009e5e:	bf00      	nop
 8009e60:	0800e034 	.word	0x0800e034
 8009e64:	0800e0c4 	.word	0x0800e0c4

08009e68 <__mcmp>:
 8009e68:	b530      	push	{r4, r5, lr}
 8009e6a:	6902      	ldr	r2, [r0, #16]
 8009e6c:	690c      	ldr	r4, [r1, #16]
 8009e6e:	1b12      	subs	r2, r2, r4
 8009e70:	d10e      	bne.n	8009e90 <__mcmp+0x28>
 8009e72:	f100 0314 	add.w	r3, r0, #20
 8009e76:	3114      	adds	r1, #20
 8009e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e88:	42a5      	cmp	r5, r4
 8009e8a:	d003      	beq.n	8009e94 <__mcmp+0x2c>
 8009e8c:	d305      	bcc.n	8009e9a <__mcmp+0x32>
 8009e8e:	2201      	movs	r2, #1
 8009e90:	4610      	mov	r0, r2
 8009e92:	bd30      	pop	{r4, r5, pc}
 8009e94:	4283      	cmp	r3, r0
 8009e96:	d3f3      	bcc.n	8009e80 <__mcmp+0x18>
 8009e98:	e7fa      	b.n	8009e90 <__mcmp+0x28>
 8009e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9e:	e7f7      	b.n	8009e90 <__mcmp+0x28>

08009ea0 <__mdiff>:
 8009ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4617      	mov	r7, r2
 8009eae:	f7ff ffdb 	bl	8009e68 <__mcmp>
 8009eb2:	1e05      	subs	r5, r0, #0
 8009eb4:	d110      	bne.n	8009ed8 <__mdiff+0x38>
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7ff fd0d 	bl	80098d8 <_Balloc>
 8009ebe:	b930      	cbnz	r0, 8009ece <__mdiff+0x2e>
 8009ec0:	4b39      	ldr	r3, [pc, #228]	; (8009fa8 <__mdiff+0x108>)
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	f240 2132 	movw	r1, #562	; 0x232
 8009ec8:	4838      	ldr	r0, [pc, #224]	; (8009fac <__mdiff+0x10c>)
 8009eca:	f000 fc0d 	bl	800a6e8 <__assert_func>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed8:	bfa4      	itt	ge
 8009eda:	463b      	movge	r3, r7
 8009edc:	4627      	movge	r7, r4
 8009ede:	4630      	mov	r0, r6
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	bfa6      	itte	ge
 8009ee4:	461c      	movge	r4, r3
 8009ee6:	2500      	movge	r5, #0
 8009ee8:	2501      	movlt	r5, #1
 8009eea:	f7ff fcf5 	bl	80098d8 <_Balloc>
 8009eee:	b920      	cbnz	r0, 8009efa <__mdiff+0x5a>
 8009ef0:	4b2d      	ldr	r3, [pc, #180]	; (8009fa8 <__mdiff+0x108>)
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ef8:	e7e6      	b.n	8009ec8 <__mdiff+0x28>
 8009efa:	693e      	ldr	r6, [r7, #16]
 8009efc:	60c5      	str	r5, [r0, #12]
 8009efe:	6925      	ldr	r5, [r4, #16]
 8009f00:	f107 0114 	add.w	r1, r7, #20
 8009f04:	f104 0914 	add.w	r9, r4, #20
 8009f08:	f100 0e14 	add.w	lr, r0, #20
 8009f0c:	f107 0210 	add.w	r2, r7, #16
 8009f10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009f14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009f18:	46f2      	mov	sl, lr
 8009f1a:	2700      	movs	r7, #0
 8009f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f24:	fa1f f883 	uxth.w	r8, r3
 8009f28:	fa17 f78b 	uxtah	r7, r7, fp
 8009f2c:	0c1b      	lsrs	r3, r3, #16
 8009f2e:	eba7 0808 	sub.w	r8, r7, r8
 8009f32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f3a:	fa1f f888 	uxth.w	r8, r8
 8009f3e:	141f      	asrs	r7, r3, #16
 8009f40:	454d      	cmp	r5, r9
 8009f42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f46:	f84a 3b04 	str.w	r3, [sl], #4
 8009f4a:	d8e7      	bhi.n	8009f1c <__mdiff+0x7c>
 8009f4c:	1b2b      	subs	r3, r5, r4
 8009f4e:	3b15      	subs	r3, #21
 8009f50:	f023 0303 	bic.w	r3, r3, #3
 8009f54:	3304      	adds	r3, #4
 8009f56:	3415      	adds	r4, #21
 8009f58:	42a5      	cmp	r5, r4
 8009f5a:	bf38      	it	cc
 8009f5c:	2304      	movcc	r3, #4
 8009f5e:	4419      	add	r1, r3
 8009f60:	4473      	add	r3, lr
 8009f62:	469e      	mov	lr, r3
 8009f64:	460d      	mov	r5, r1
 8009f66:	4565      	cmp	r5, ip
 8009f68:	d30e      	bcc.n	8009f88 <__mdiff+0xe8>
 8009f6a:	f10c 0203 	add.w	r2, ip, #3
 8009f6e:	1a52      	subs	r2, r2, r1
 8009f70:	f022 0203 	bic.w	r2, r2, #3
 8009f74:	3903      	subs	r1, #3
 8009f76:	458c      	cmp	ip, r1
 8009f78:	bf38      	it	cc
 8009f7a:	2200      	movcc	r2, #0
 8009f7c:	441a      	add	r2, r3
 8009f7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f82:	b17b      	cbz	r3, 8009fa4 <__mdiff+0x104>
 8009f84:	6106      	str	r6, [r0, #16]
 8009f86:	e7a5      	b.n	8009ed4 <__mdiff+0x34>
 8009f88:	f855 8b04 	ldr.w	r8, [r5], #4
 8009f8c:	fa17 f488 	uxtah	r4, r7, r8
 8009f90:	1422      	asrs	r2, r4, #16
 8009f92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009f96:	b2a4      	uxth	r4, r4
 8009f98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009f9c:	f84e 4b04 	str.w	r4, [lr], #4
 8009fa0:	1417      	asrs	r7, r2, #16
 8009fa2:	e7e0      	b.n	8009f66 <__mdiff+0xc6>
 8009fa4:	3e01      	subs	r6, #1
 8009fa6:	e7ea      	b.n	8009f7e <__mdiff+0xde>
 8009fa8:	0800e034 	.word	0x0800e034
 8009fac:	0800e0c4 	.word	0x0800e0c4

08009fb0 <__ulp>:
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	ed8d 0b00 	vstr	d0, [sp]
 8009fb6:	9b01      	ldr	r3, [sp, #4]
 8009fb8:	4912      	ldr	r1, [pc, #72]	; (800a004 <__ulp+0x54>)
 8009fba:	4019      	ands	r1, r3
 8009fbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	dd05      	ble.n	8009fd0 <__ulp+0x20>
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	ec43 2b10 	vmov	d0, r2, r3
 8009fcc:	b002      	add	sp, #8
 8009fce:	4770      	bx	lr
 8009fd0:	4249      	negs	r1, r1
 8009fd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009fd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009fda:	f04f 0200 	mov.w	r2, #0
 8009fde:	f04f 0300 	mov.w	r3, #0
 8009fe2:	da04      	bge.n	8009fee <__ulp+0x3e>
 8009fe4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009fe8:	fa41 f300 	asr.w	r3, r1, r0
 8009fec:	e7ec      	b.n	8009fc8 <__ulp+0x18>
 8009fee:	f1a0 0114 	sub.w	r1, r0, #20
 8009ff2:	291e      	cmp	r1, #30
 8009ff4:	bfda      	itte	le
 8009ff6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009ffa:	fa20 f101 	lsrle.w	r1, r0, r1
 8009ffe:	2101      	movgt	r1, #1
 800a000:	460a      	mov	r2, r1
 800a002:	e7e1      	b.n	8009fc8 <__ulp+0x18>
 800a004:	7ff00000 	.word	0x7ff00000

0800a008 <__b2d>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	6905      	ldr	r5, [r0, #16]
 800a00c:	f100 0714 	add.w	r7, r0, #20
 800a010:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a014:	1f2e      	subs	r6, r5, #4
 800a016:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a01a:	4620      	mov	r0, r4
 800a01c:	f7ff fd52 	bl	8009ac4 <__hi0bits>
 800a020:	f1c0 0320 	rsb	r3, r0, #32
 800a024:	280a      	cmp	r0, #10
 800a026:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a0a4 <__b2d+0x9c>
 800a02a:	600b      	str	r3, [r1, #0]
 800a02c:	dc14      	bgt.n	800a058 <__b2d+0x50>
 800a02e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a032:	fa24 f10e 	lsr.w	r1, r4, lr
 800a036:	42b7      	cmp	r7, r6
 800a038:	ea41 030c 	orr.w	r3, r1, ip
 800a03c:	bf34      	ite	cc
 800a03e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a042:	2100      	movcs	r1, #0
 800a044:	3015      	adds	r0, #21
 800a046:	fa04 f000 	lsl.w	r0, r4, r0
 800a04a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a04e:	ea40 0201 	orr.w	r2, r0, r1
 800a052:	ec43 2b10 	vmov	d0, r2, r3
 800a056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a058:	42b7      	cmp	r7, r6
 800a05a:	bf3a      	itte	cc
 800a05c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a060:	f1a5 0608 	subcc.w	r6, r5, #8
 800a064:	2100      	movcs	r1, #0
 800a066:	380b      	subs	r0, #11
 800a068:	d017      	beq.n	800a09a <__b2d+0x92>
 800a06a:	f1c0 0c20 	rsb	ip, r0, #32
 800a06e:	fa04 f500 	lsl.w	r5, r4, r0
 800a072:	42be      	cmp	r6, r7
 800a074:	fa21 f40c 	lsr.w	r4, r1, ip
 800a078:	ea45 0504 	orr.w	r5, r5, r4
 800a07c:	bf8c      	ite	hi
 800a07e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a082:	2400      	movls	r4, #0
 800a084:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a088:	fa01 f000 	lsl.w	r0, r1, r0
 800a08c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a090:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a094:	ea40 0204 	orr.w	r2, r0, r4
 800a098:	e7db      	b.n	800a052 <__b2d+0x4a>
 800a09a:	ea44 030c 	orr.w	r3, r4, ip
 800a09e:	460a      	mov	r2, r1
 800a0a0:	e7d7      	b.n	800a052 <__b2d+0x4a>
 800a0a2:	bf00      	nop
 800a0a4:	3ff00000 	.word	0x3ff00000

0800a0a8 <__d2b>:
 800a0a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0ac:	4689      	mov	r9, r1
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	ec57 6b10 	vmov	r6, r7, d0
 800a0b4:	4690      	mov	r8, r2
 800a0b6:	f7ff fc0f 	bl	80098d8 <_Balloc>
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	b930      	cbnz	r0, 800a0cc <__d2b+0x24>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	4b25      	ldr	r3, [pc, #148]	; (800a158 <__d2b+0xb0>)
 800a0c2:	4826      	ldr	r0, [pc, #152]	; (800a15c <__d2b+0xb4>)
 800a0c4:	f240 310a 	movw	r1, #778	; 0x30a
 800a0c8:	f000 fb0e 	bl	800a6e8 <__assert_func>
 800a0cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0d4:	bb35      	cbnz	r5, 800a124 <__d2b+0x7c>
 800a0d6:	2e00      	cmp	r6, #0
 800a0d8:	9301      	str	r3, [sp, #4]
 800a0da:	d028      	beq.n	800a12e <__d2b+0x86>
 800a0dc:	4668      	mov	r0, sp
 800a0de:	9600      	str	r6, [sp, #0]
 800a0e0:	f7ff fd10 	bl	8009b04 <__lo0bits>
 800a0e4:	9900      	ldr	r1, [sp, #0]
 800a0e6:	b300      	cbz	r0, 800a12a <__d2b+0x82>
 800a0e8:	9a01      	ldr	r2, [sp, #4]
 800a0ea:	f1c0 0320 	rsb	r3, r0, #32
 800a0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f2:	430b      	orrs	r3, r1
 800a0f4:	40c2      	lsrs	r2, r0
 800a0f6:	6163      	str	r3, [r4, #20]
 800a0f8:	9201      	str	r2, [sp, #4]
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	61a3      	str	r3, [r4, #24]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bf14      	ite	ne
 800a102:	2202      	movne	r2, #2
 800a104:	2201      	moveq	r2, #1
 800a106:	6122      	str	r2, [r4, #16]
 800a108:	b1d5      	cbz	r5, 800a140 <__d2b+0x98>
 800a10a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a10e:	4405      	add	r5, r0
 800a110:	f8c9 5000 	str.w	r5, [r9]
 800a114:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a118:	f8c8 0000 	str.w	r0, [r8]
 800a11c:	4620      	mov	r0, r4
 800a11e:	b003      	add	sp, #12
 800a120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a128:	e7d5      	b.n	800a0d6 <__d2b+0x2e>
 800a12a:	6161      	str	r1, [r4, #20]
 800a12c:	e7e5      	b.n	800a0fa <__d2b+0x52>
 800a12e:	a801      	add	r0, sp, #4
 800a130:	f7ff fce8 	bl	8009b04 <__lo0bits>
 800a134:	9b01      	ldr	r3, [sp, #4]
 800a136:	6163      	str	r3, [r4, #20]
 800a138:	2201      	movs	r2, #1
 800a13a:	6122      	str	r2, [r4, #16]
 800a13c:	3020      	adds	r0, #32
 800a13e:	e7e3      	b.n	800a108 <__d2b+0x60>
 800a140:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a144:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a148:	f8c9 0000 	str.w	r0, [r9]
 800a14c:	6918      	ldr	r0, [r3, #16]
 800a14e:	f7ff fcb9 	bl	8009ac4 <__hi0bits>
 800a152:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a156:	e7df      	b.n	800a118 <__d2b+0x70>
 800a158:	0800e034 	.word	0x0800e034
 800a15c:	0800e0c4 	.word	0x0800e0c4

0800a160 <__ratio>:
 800a160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	4688      	mov	r8, r1
 800a166:	4669      	mov	r1, sp
 800a168:	4681      	mov	r9, r0
 800a16a:	f7ff ff4d 	bl	800a008 <__b2d>
 800a16e:	a901      	add	r1, sp, #4
 800a170:	4640      	mov	r0, r8
 800a172:	ec55 4b10 	vmov	r4, r5, d0
 800a176:	f7ff ff47 	bl	800a008 <__b2d>
 800a17a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a17e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a182:	eba3 0c02 	sub.w	ip, r3, r2
 800a186:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a18a:	1a9b      	subs	r3, r3, r2
 800a18c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a190:	ec51 0b10 	vmov	r0, r1, d0
 800a194:	2b00      	cmp	r3, #0
 800a196:	bfd6      	itet	le
 800a198:	460a      	movle	r2, r1
 800a19a:	462a      	movgt	r2, r5
 800a19c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a1a0:	468b      	mov	fp, r1
 800a1a2:	462f      	mov	r7, r5
 800a1a4:	bfd4      	ite	le
 800a1a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a1aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	ee10 2a10 	vmov	r2, s0
 800a1b4:	465b      	mov	r3, fp
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 fb58 	bl	800086c <__aeabi_ddiv>
 800a1bc:	ec41 0b10 	vmov	d0, r0, r1
 800a1c0:	b003      	add	sp, #12
 800a1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1c6 <__copybits>:
 800a1c6:	3901      	subs	r1, #1
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	1149      	asrs	r1, r1, #5
 800a1cc:	6914      	ldr	r4, [r2, #16]
 800a1ce:	3101      	adds	r1, #1
 800a1d0:	f102 0314 	add.w	r3, r2, #20
 800a1d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a1d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1dc:	1f05      	subs	r5, r0, #4
 800a1de:	42a3      	cmp	r3, r4
 800a1e0:	d30c      	bcc.n	800a1fc <__copybits+0x36>
 800a1e2:	1aa3      	subs	r3, r4, r2
 800a1e4:	3b11      	subs	r3, #17
 800a1e6:	f023 0303 	bic.w	r3, r3, #3
 800a1ea:	3211      	adds	r2, #17
 800a1ec:	42a2      	cmp	r2, r4
 800a1ee:	bf88      	it	hi
 800a1f0:	2300      	movhi	r3, #0
 800a1f2:	4418      	add	r0, r3
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4288      	cmp	r0, r1
 800a1f8:	d305      	bcc.n	800a206 <__copybits+0x40>
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}
 800a1fc:	f853 6b04 	ldr.w	r6, [r3], #4
 800a200:	f845 6f04 	str.w	r6, [r5, #4]!
 800a204:	e7eb      	b.n	800a1de <__copybits+0x18>
 800a206:	f840 3b04 	str.w	r3, [r0], #4
 800a20a:	e7f4      	b.n	800a1f6 <__copybits+0x30>

0800a20c <__any_on>:
 800a20c:	f100 0214 	add.w	r2, r0, #20
 800a210:	6900      	ldr	r0, [r0, #16]
 800a212:	114b      	asrs	r3, r1, #5
 800a214:	4298      	cmp	r0, r3
 800a216:	b510      	push	{r4, lr}
 800a218:	db11      	blt.n	800a23e <__any_on+0x32>
 800a21a:	dd0a      	ble.n	800a232 <__any_on+0x26>
 800a21c:	f011 011f 	ands.w	r1, r1, #31
 800a220:	d007      	beq.n	800a232 <__any_on+0x26>
 800a222:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a226:	fa24 f001 	lsr.w	r0, r4, r1
 800a22a:	fa00 f101 	lsl.w	r1, r0, r1
 800a22e:	428c      	cmp	r4, r1
 800a230:	d10b      	bne.n	800a24a <__any_on+0x3e>
 800a232:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a236:	4293      	cmp	r3, r2
 800a238:	d803      	bhi.n	800a242 <__any_on+0x36>
 800a23a:	2000      	movs	r0, #0
 800a23c:	bd10      	pop	{r4, pc}
 800a23e:	4603      	mov	r3, r0
 800a240:	e7f7      	b.n	800a232 <__any_on+0x26>
 800a242:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a246:	2900      	cmp	r1, #0
 800a248:	d0f5      	beq.n	800a236 <__any_on+0x2a>
 800a24a:	2001      	movs	r0, #1
 800a24c:	e7f6      	b.n	800a23c <__any_on+0x30>

0800a24e <_calloc_r>:
 800a24e:	b513      	push	{r0, r1, r4, lr}
 800a250:	434a      	muls	r2, r1
 800a252:	4611      	mov	r1, r2
 800a254:	9201      	str	r2, [sp, #4]
 800a256:	f000 f859 	bl	800a30c <_malloc_r>
 800a25a:	4604      	mov	r4, r0
 800a25c:	b118      	cbz	r0, 800a266 <_calloc_r+0x18>
 800a25e:	9a01      	ldr	r2, [sp, #4]
 800a260:	2100      	movs	r1, #0
 800a262:	f7fc fbc9 	bl	80069f8 <memset>
 800a266:	4620      	mov	r0, r4
 800a268:	b002      	add	sp, #8
 800a26a:	bd10      	pop	{r4, pc}

0800a26c <_free_r>:
 800a26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a26e:	2900      	cmp	r1, #0
 800a270:	d048      	beq.n	800a304 <_free_r+0x98>
 800a272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a276:	9001      	str	r0, [sp, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f1a1 0404 	sub.w	r4, r1, #4
 800a27e:	bfb8      	it	lt
 800a280:	18e4      	addlt	r4, r4, r3
 800a282:	f000 fa7b 	bl	800a77c <__malloc_lock>
 800a286:	4a20      	ldr	r2, [pc, #128]	; (800a308 <_free_r+0x9c>)
 800a288:	9801      	ldr	r0, [sp, #4]
 800a28a:	6813      	ldr	r3, [r2, #0]
 800a28c:	4615      	mov	r5, r2
 800a28e:	b933      	cbnz	r3, 800a29e <_free_r+0x32>
 800a290:	6063      	str	r3, [r4, #4]
 800a292:	6014      	str	r4, [r2, #0]
 800a294:	b003      	add	sp, #12
 800a296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a29a:	f000 ba75 	b.w	800a788 <__malloc_unlock>
 800a29e:	42a3      	cmp	r3, r4
 800a2a0:	d90b      	bls.n	800a2ba <_free_r+0x4e>
 800a2a2:	6821      	ldr	r1, [r4, #0]
 800a2a4:	1862      	adds	r2, r4, r1
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	bf04      	itt	eq
 800a2aa:	681a      	ldreq	r2, [r3, #0]
 800a2ac:	685b      	ldreq	r3, [r3, #4]
 800a2ae:	6063      	str	r3, [r4, #4]
 800a2b0:	bf04      	itt	eq
 800a2b2:	1852      	addeq	r2, r2, r1
 800a2b4:	6022      	streq	r2, [r4, #0]
 800a2b6:	602c      	str	r4, [r5, #0]
 800a2b8:	e7ec      	b.n	800a294 <_free_r+0x28>
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	b10b      	cbz	r3, 800a2c4 <_free_r+0x58>
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d9fa      	bls.n	800a2ba <_free_r+0x4e>
 800a2c4:	6811      	ldr	r1, [r2, #0]
 800a2c6:	1855      	adds	r5, r2, r1
 800a2c8:	42a5      	cmp	r5, r4
 800a2ca:	d10b      	bne.n	800a2e4 <_free_r+0x78>
 800a2cc:	6824      	ldr	r4, [r4, #0]
 800a2ce:	4421      	add	r1, r4
 800a2d0:	1854      	adds	r4, r2, r1
 800a2d2:	42a3      	cmp	r3, r4
 800a2d4:	6011      	str	r1, [r2, #0]
 800a2d6:	d1dd      	bne.n	800a294 <_free_r+0x28>
 800a2d8:	681c      	ldr	r4, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	6053      	str	r3, [r2, #4]
 800a2de:	4421      	add	r1, r4
 800a2e0:	6011      	str	r1, [r2, #0]
 800a2e2:	e7d7      	b.n	800a294 <_free_r+0x28>
 800a2e4:	d902      	bls.n	800a2ec <_free_r+0x80>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	e7d3      	b.n	800a294 <_free_r+0x28>
 800a2ec:	6825      	ldr	r5, [r4, #0]
 800a2ee:	1961      	adds	r1, r4, r5
 800a2f0:	428b      	cmp	r3, r1
 800a2f2:	bf04      	itt	eq
 800a2f4:	6819      	ldreq	r1, [r3, #0]
 800a2f6:	685b      	ldreq	r3, [r3, #4]
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	bf04      	itt	eq
 800a2fc:	1949      	addeq	r1, r1, r5
 800a2fe:	6021      	streq	r1, [r4, #0]
 800a300:	6054      	str	r4, [r2, #4]
 800a302:	e7c7      	b.n	800a294 <_free_r+0x28>
 800a304:	b003      	add	sp, #12
 800a306:	bd30      	pop	{r4, r5, pc}
 800a308:	20000778 	.word	0x20000778

0800a30c <_malloc_r>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	1ccd      	adds	r5, r1, #3
 800a310:	f025 0503 	bic.w	r5, r5, #3
 800a314:	3508      	adds	r5, #8
 800a316:	2d0c      	cmp	r5, #12
 800a318:	bf38      	it	cc
 800a31a:	250c      	movcc	r5, #12
 800a31c:	2d00      	cmp	r5, #0
 800a31e:	4606      	mov	r6, r0
 800a320:	db01      	blt.n	800a326 <_malloc_r+0x1a>
 800a322:	42a9      	cmp	r1, r5
 800a324:	d903      	bls.n	800a32e <_malloc_r+0x22>
 800a326:	230c      	movs	r3, #12
 800a328:	6033      	str	r3, [r6, #0]
 800a32a:	2000      	movs	r0, #0
 800a32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a32e:	f000 fa25 	bl	800a77c <__malloc_lock>
 800a332:	4921      	ldr	r1, [pc, #132]	; (800a3b8 <_malloc_r+0xac>)
 800a334:	680a      	ldr	r2, [r1, #0]
 800a336:	4614      	mov	r4, r2
 800a338:	b99c      	cbnz	r4, 800a362 <_malloc_r+0x56>
 800a33a:	4f20      	ldr	r7, [pc, #128]	; (800a3bc <_malloc_r+0xb0>)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	b923      	cbnz	r3, 800a34a <_malloc_r+0x3e>
 800a340:	4621      	mov	r1, r4
 800a342:	4630      	mov	r0, r6
 800a344:	f000 f9a0 	bl	800a688 <_sbrk_r>
 800a348:	6038      	str	r0, [r7, #0]
 800a34a:	4629      	mov	r1, r5
 800a34c:	4630      	mov	r0, r6
 800a34e:	f000 f99b 	bl	800a688 <_sbrk_r>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	d123      	bne.n	800a39e <_malloc_r+0x92>
 800a356:	230c      	movs	r3, #12
 800a358:	6033      	str	r3, [r6, #0]
 800a35a:	4630      	mov	r0, r6
 800a35c:	f000 fa14 	bl	800a788 <__malloc_unlock>
 800a360:	e7e3      	b.n	800a32a <_malloc_r+0x1e>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	1b5b      	subs	r3, r3, r5
 800a366:	d417      	bmi.n	800a398 <_malloc_r+0x8c>
 800a368:	2b0b      	cmp	r3, #11
 800a36a:	d903      	bls.n	800a374 <_malloc_r+0x68>
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	441c      	add	r4, r3
 800a370:	6025      	str	r5, [r4, #0]
 800a372:	e004      	b.n	800a37e <_malloc_r+0x72>
 800a374:	6863      	ldr	r3, [r4, #4]
 800a376:	42a2      	cmp	r2, r4
 800a378:	bf0c      	ite	eq
 800a37a:	600b      	streq	r3, [r1, #0]
 800a37c:	6053      	strne	r3, [r2, #4]
 800a37e:	4630      	mov	r0, r6
 800a380:	f000 fa02 	bl	800a788 <__malloc_unlock>
 800a384:	f104 000b 	add.w	r0, r4, #11
 800a388:	1d23      	adds	r3, r4, #4
 800a38a:	f020 0007 	bic.w	r0, r0, #7
 800a38e:	1ac2      	subs	r2, r0, r3
 800a390:	d0cc      	beq.n	800a32c <_malloc_r+0x20>
 800a392:	1a1b      	subs	r3, r3, r0
 800a394:	50a3      	str	r3, [r4, r2]
 800a396:	e7c9      	b.n	800a32c <_malloc_r+0x20>
 800a398:	4622      	mov	r2, r4
 800a39a:	6864      	ldr	r4, [r4, #4]
 800a39c:	e7cc      	b.n	800a338 <_malloc_r+0x2c>
 800a39e:	1cc4      	adds	r4, r0, #3
 800a3a0:	f024 0403 	bic.w	r4, r4, #3
 800a3a4:	42a0      	cmp	r0, r4
 800a3a6:	d0e3      	beq.n	800a370 <_malloc_r+0x64>
 800a3a8:	1a21      	subs	r1, r4, r0
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f000 f96c 	bl	800a688 <_sbrk_r>
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d1dd      	bne.n	800a370 <_malloc_r+0x64>
 800a3b4:	e7cf      	b.n	800a356 <_malloc_r+0x4a>
 800a3b6:	bf00      	nop
 800a3b8:	20000778 	.word	0x20000778
 800a3bc:	2000077c 	.word	0x2000077c

0800a3c0 <__ssputs_r>:
 800a3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c4:	688e      	ldr	r6, [r1, #8]
 800a3c6:	429e      	cmp	r6, r3
 800a3c8:	4682      	mov	sl, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	4690      	mov	r8, r2
 800a3ce:	461f      	mov	r7, r3
 800a3d0:	d838      	bhi.n	800a444 <__ssputs_r+0x84>
 800a3d2:	898a      	ldrh	r2, [r1, #12]
 800a3d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3d8:	d032      	beq.n	800a440 <__ssputs_r+0x80>
 800a3da:	6825      	ldr	r5, [r4, #0]
 800a3dc:	6909      	ldr	r1, [r1, #16]
 800a3de:	eba5 0901 	sub.w	r9, r5, r1
 800a3e2:	6965      	ldr	r5, [r4, #20]
 800a3e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	444b      	add	r3, r9
 800a3f0:	106d      	asrs	r5, r5, #1
 800a3f2:	429d      	cmp	r5, r3
 800a3f4:	bf38      	it	cc
 800a3f6:	461d      	movcc	r5, r3
 800a3f8:	0553      	lsls	r3, r2, #21
 800a3fa:	d531      	bpl.n	800a460 <__ssputs_r+0xa0>
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	f7ff ff85 	bl	800a30c <_malloc_r>
 800a402:	4606      	mov	r6, r0
 800a404:	b950      	cbnz	r0, 800a41c <__ssputs_r+0x5c>
 800a406:	230c      	movs	r3, #12
 800a408:	f8ca 3000 	str.w	r3, [sl]
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	f04f 30ff 	mov.w	r0, #4294967295
 800a418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41c:	6921      	ldr	r1, [r4, #16]
 800a41e:	464a      	mov	r2, r9
 800a420:	f7ff fa4c 	bl	80098bc <memcpy>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	6126      	str	r6, [r4, #16]
 800a432:	6165      	str	r5, [r4, #20]
 800a434:	444e      	add	r6, r9
 800a436:	eba5 0509 	sub.w	r5, r5, r9
 800a43a:	6026      	str	r6, [r4, #0]
 800a43c:	60a5      	str	r5, [r4, #8]
 800a43e:	463e      	mov	r6, r7
 800a440:	42be      	cmp	r6, r7
 800a442:	d900      	bls.n	800a446 <__ssputs_r+0x86>
 800a444:	463e      	mov	r6, r7
 800a446:	4632      	mov	r2, r6
 800a448:	6820      	ldr	r0, [r4, #0]
 800a44a:	4641      	mov	r1, r8
 800a44c:	f000 f97c 	bl	800a748 <memmove>
 800a450:	68a3      	ldr	r3, [r4, #8]
 800a452:	6822      	ldr	r2, [r4, #0]
 800a454:	1b9b      	subs	r3, r3, r6
 800a456:	4432      	add	r2, r6
 800a458:	60a3      	str	r3, [r4, #8]
 800a45a:	6022      	str	r2, [r4, #0]
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7db      	b.n	800a418 <__ssputs_r+0x58>
 800a460:	462a      	mov	r2, r5
 800a462:	f000 f997 	bl	800a794 <_realloc_r>
 800a466:	4606      	mov	r6, r0
 800a468:	2800      	cmp	r0, #0
 800a46a:	d1e1      	bne.n	800a430 <__ssputs_r+0x70>
 800a46c:	6921      	ldr	r1, [r4, #16]
 800a46e:	4650      	mov	r0, sl
 800a470:	f7ff fefc 	bl	800a26c <_free_r>
 800a474:	e7c7      	b.n	800a406 <__ssputs_r+0x46>
	...

0800a478 <_svfiprintf_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	4698      	mov	r8, r3
 800a47e:	898b      	ldrh	r3, [r1, #12]
 800a480:	061b      	lsls	r3, r3, #24
 800a482:	b09d      	sub	sp, #116	; 0x74
 800a484:	4607      	mov	r7, r0
 800a486:	460d      	mov	r5, r1
 800a488:	4614      	mov	r4, r2
 800a48a:	d50e      	bpl.n	800a4aa <_svfiprintf_r+0x32>
 800a48c:	690b      	ldr	r3, [r1, #16]
 800a48e:	b963      	cbnz	r3, 800a4aa <_svfiprintf_r+0x32>
 800a490:	2140      	movs	r1, #64	; 0x40
 800a492:	f7ff ff3b 	bl	800a30c <_malloc_r>
 800a496:	6028      	str	r0, [r5, #0]
 800a498:	6128      	str	r0, [r5, #16]
 800a49a:	b920      	cbnz	r0, 800a4a6 <_svfiprintf_r+0x2e>
 800a49c:	230c      	movs	r3, #12
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	e0d1      	b.n	800a64a <_svfiprintf_r+0x1d2>
 800a4a6:	2340      	movs	r3, #64	; 0x40
 800a4a8:	616b      	str	r3, [r5, #20]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ae:	2320      	movs	r3, #32
 800a4b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4b8:	2330      	movs	r3, #48	; 0x30
 800a4ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a664 <_svfiprintf_r+0x1ec>
 800a4be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4c2:	f04f 0901 	mov.w	r9, #1
 800a4c6:	4623      	mov	r3, r4
 800a4c8:	469a      	mov	sl, r3
 800a4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ce:	b10a      	cbz	r2, 800a4d4 <_svfiprintf_r+0x5c>
 800a4d0:	2a25      	cmp	r2, #37	; 0x25
 800a4d2:	d1f9      	bne.n	800a4c8 <_svfiprintf_r+0x50>
 800a4d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4d8:	d00b      	beq.n	800a4f2 <_svfiprintf_r+0x7a>
 800a4da:	465b      	mov	r3, fp
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f7ff ff6d 	bl	800a3c0 <__ssputs_r>
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	f000 80aa 	beq.w	800a640 <_svfiprintf_r+0x1c8>
 800a4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ee:	445a      	add	r2, fp
 800a4f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 80a2 	beq.w	800a640 <_svfiprintf_r+0x1c8>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a506:	f10a 0a01 	add.w	sl, sl, #1
 800a50a:	9304      	str	r3, [sp, #16]
 800a50c:	9307      	str	r3, [sp, #28]
 800a50e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a512:	931a      	str	r3, [sp, #104]	; 0x68
 800a514:	4654      	mov	r4, sl
 800a516:	2205      	movs	r2, #5
 800a518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51c:	4851      	ldr	r0, [pc, #324]	; (800a664 <_svfiprintf_r+0x1ec>)
 800a51e:	f7f5 fe6f 	bl	8000200 <memchr>
 800a522:	9a04      	ldr	r2, [sp, #16]
 800a524:	b9d8      	cbnz	r0, 800a55e <_svfiprintf_r+0xe6>
 800a526:	06d0      	lsls	r0, r2, #27
 800a528:	bf44      	itt	mi
 800a52a:	2320      	movmi	r3, #32
 800a52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a530:	0711      	lsls	r1, r2, #28
 800a532:	bf44      	itt	mi
 800a534:	232b      	movmi	r3, #43	; 0x2b
 800a536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a53a:	f89a 3000 	ldrb.w	r3, [sl]
 800a53e:	2b2a      	cmp	r3, #42	; 0x2a
 800a540:	d015      	beq.n	800a56e <_svfiprintf_r+0xf6>
 800a542:	9a07      	ldr	r2, [sp, #28]
 800a544:	4654      	mov	r4, sl
 800a546:	2000      	movs	r0, #0
 800a548:	f04f 0c0a 	mov.w	ip, #10
 800a54c:	4621      	mov	r1, r4
 800a54e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a552:	3b30      	subs	r3, #48	; 0x30
 800a554:	2b09      	cmp	r3, #9
 800a556:	d94e      	bls.n	800a5f6 <_svfiprintf_r+0x17e>
 800a558:	b1b0      	cbz	r0, 800a588 <_svfiprintf_r+0x110>
 800a55a:	9207      	str	r2, [sp, #28]
 800a55c:	e014      	b.n	800a588 <_svfiprintf_r+0x110>
 800a55e:	eba0 0308 	sub.w	r3, r0, r8
 800a562:	fa09 f303 	lsl.w	r3, r9, r3
 800a566:	4313      	orrs	r3, r2
 800a568:	9304      	str	r3, [sp, #16]
 800a56a:	46a2      	mov	sl, r4
 800a56c:	e7d2      	b.n	800a514 <_svfiprintf_r+0x9c>
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	1d19      	adds	r1, r3, #4
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	9103      	str	r1, [sp, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	bfbb      	ittet	lt
 800a57a:	425b      	neglt	r3, r3
 800a57c:	f042 0202 	orrlt.w	r2, r2, #2
 800a580:	9307      	strge	r3, [sp, #28]
 800a582:	9307      	strlt	r3, [sp, #28]
 800a584:	bfb8      	it	lt
 800a586:	9204      	strlt	r2, [sp, #16]
 800a588:	7823      	ldrb	r3, [r4, #0]
 800a58a:	2b2e      	cmp	r3, #46	; 0x2e
 800a58c:	d10c      	bne.n	800a5a8 <_svfiprintf_r+0x130>
 800a58e:	7863      	ldrb	r3, [r4, #1]
 800a590:	2b2a      	cmp	r3, #42	; 0x2a
 800a592:	d135      	bne.n	800a600 <_svfiprintf_r+0x188>
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	1d1a      	adds	r2, r3, #4
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	9203      	str	r2, [sp, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	bfb8      	it	lt
 800a5a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5a4:	3402      	adds	r4, #2
 800a5a6:	9305      	str	r3, [sp, #20]
 800a5a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a674 <_svfiprintf_r+0x1fc>
 800a5ac:	7821      	ldrb	r1, [r4, #0]
 800a5ae:	2203      	movs	r2, #3
 800a5b0:	4650      	mov	r0, sl
 800a5b2:	f7f5 fe25 	bl	8000200 <memchr>
 800a5b6:	b140      	cbz	r0, 800a5ca <_svfiprintf_r+0x152>
 800a5b8:	2340      	movs	r3, #64	; 0x40
 800a5ba:	eba0 000a 	sub.w	r0, r0, sl
 800a5be:	fa03 f000 	lsl.w	r0, r3, r0
 800a5c2:	9b04      	ldr	r3, [sp, #16]
 800a5c4:	4303      	orrs	r3, r0
 800a5c6:	3401      	adds	r4, #1
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ce:	4826      	ldr	r0, [pc, #152]	; (800a668 <_svfiprintf_r+0x1f0>)
 800a5d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5d4:	2206      	movs	r2, #6
 800a5d6:	f7f5 fe13 	bl	8000200 <memchr>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d038      	beq.n	800a650 <_svfiprintf_r+0x1d8>
 800a5de:	4b23      	ldr	r3, [pc, #140]	; (800a66c <_svfiprintf_r+0x1f4>)
 800a5e0:	bb1b      	cbnz	r3, 800a62a <_svfiprintf_r+0x1b2>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	3307      	adds	r3, #7
 800a5e6:	f023 0307 	bic.w	r3, r3, #7
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f0:	4433      	add	r3, r6
 800a5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f4:	e767      	b.n	800a4c6 <_svfiprintf_r+0x4e>
 800a5f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	e7a5      	b.n	800a54c <_svfiprintf_r+0xd4>
 800a600:	2300      	movs	r3, #0
 800a602:	3401      	adds	r4, #1
 800a604:	9305      	str	r3, [sp, #20]
 800a606:	4619      	mov	r1, r3
 800a608:	f04f 0c0a 	mov.w	ip, #10
 800a60c:	4620      	mov	r0, r4
 800a60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a612:	3a30      	subs	r2, #48	; 0x30
 800a614:	2a09      	cmp	r2, #9
 800a616:	d903      	bls.n	800a620 <_svfiprintf_r+0x1a8>
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d0c5      	beq.n	800a5a8 <_svfiprintf_r+0x130>
 800a61c:	9105      	str	r1, [sp, #20]
 800a61e:	e7c3      	b.n	800a5a8 <_svfiprintf_r+0x130>
 800a620:	fb0c 2101 	mla	r1, ip, r1, r2
 800a624:	4604      	mov	r4, r0
 800a626:	2301      	movs	r3, #1
 800a628:	e7f0      	b.n	800a60c <_svfiprintf_r+0x194>
 800a62a:	ab03      	add	r3, sp, #12
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	462a      	mov	r2, r5
 800a630:	4b0f      	ldr	r3, [pc, #60]	; (800a670 <_svfiprintf_r+0x1f8>)
 800a632:	a904      	add	r1, sp, #16
 800a634:	4638      	mov	r0, r7
 800a636:	f7fc fa87 	bl	8006b48 <_printf_float>
 800a63a:	1c42      	adds	r2, r0, #1
 800a63c:	4606      	mov	r6, r0
 800a63e:	d1d6      	bne.n	800a5ee <_svfiprintf_r+0x176>
 800a640:	89ab      	ldrh	r3, [r5, #12]
 800a642:	065b      	lsls	r3, r3, #25
 800a644:	f53f af2c 	bmi.w	800a4a0 <_svfiprintf_r+0x28>
 800a648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a64a:	b01d      	add	sp, #116	; 0x74
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	ab03      	add	r3, sp, #12
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	462a      	mov	r2, r5
 800a656:	4b06      	ldr	r3, [pc, #24]	; (800a670 <_svfiprintf_r+0x1f8>)
 800a658:	a904      	add	r1, sp, #16
 800a65a:	4638      	mov	r0, r7
 800a65c:	f7fc fd18 	bl	8007090 <_printf_i>
 800a660:	e7eb      	b.n	800a63a <_svfiprintf_r+0x1c2>
 800a662:	bf00      	nop
 800a664:	0800e224 	.word	0x0800e224
 800a668:	0800e22e 	.word	0x0800e22e
 800a66c:	08006b49 	.word	0x08006b49
 800a670:	0800a3c1 	.word	0x0800a3c1
 800a674:	0800e22a 	.word	0x0800e22a

0800a678 <nan>:
 800a678:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a680 <nan+0x8>
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	00000000 	.word	0x00000000
 800a684:	7ff80000 	.word	0x7ff80000

0800a688 <_sbrk_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4d06      	ldr	r5, [pc, #24]	; (800a6a4 <_sbrk_r+0x1c>)
 800a68c:	2300      	movs	r3, #0
 800a68e:	4604      	mov	r4, r0
 800a690:	4608      	mov	r0, r1
 800a692:	602b      	str	r3, [r5, #0]
 800a694:	f7f8 fc54 	bl	8002f40 <_sbrk>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_sbrk_r+0x1a>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_sbrk_r+0x1a>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	20000d78 	.word	0x20000d78

0800a6a8 <strncmp>:
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	b16a      	cbz	r2, 800a6c8 <strncmp+0x20>
 800a6ac:	3901      	subs	r1, #1
 800a6ae:	1884      	adds	r4, r0, r2
 800a6b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a6b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d103      	bne.n	800a6c4 <strncmp+0x1c>
 800a6bc:	42a0      	cmp	r0, r4
 800a6be:	d001      	beq.n	800a6c4 <strncmp+0x1c>
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1f5      	bne.n	800a6b0 <strncmp+0x8>
 800a6c4:	1a98      	subs	r0, r3, r2
 800a6c6:	bd10      	pop	{r4, pc}
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	e7fc      	b.n	800a6c6 <strncmp+0x1e>

0800a6cc <__ascii_wctomb>:
 800a6cc:	b149      	cbz	r1, 800a6e2 <__ascii_wctomb+0x16>
 800a6ce:	2aff      	cmp	r2, #255	; 0xff
 800a6d0:	bf85      	ittet	hi
 800a6d2:	238a      	movhi	r3, #138	; 0x8a
 800a6d4:	6003      	strhi	r3, [r0, #0]
 800a6d6:	700a      	strbls	r2, [r1, #0]
 800a6d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6dc:	bf98      	it	ls
 800a6de:	2001      	movls	r0, #1
 800a6e0:	4770      	bx	lr
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <__assert_func>:
 800a6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ea:	4614      	mov	r4, r2
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <__assert_func+0x2c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	68d8      	ldr	r0, [r3, #12]
 800a6f6:	b14c      	cbz	r4, 800a70c <__assert_func+0x24>
 800a6f8:	4b07      	ldr	r3, [pc, #28]	; (800a718 <__assert_func+0x30>)
 800a6fa:	9100      	str	r1, [sp, #0]
 800a6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a700:	4906      	ldr	r1, [pc, #24]	; (800a71c <__assert_func+0x34>)
 800a702:	462b      	mov	r3, r5
 800a704:	f000 f80e 	bl	800a724 <fiprintf>
 800a708:	f000 fa84 	bl	800ac14 <abort>
 800a70c:	4b04      	ldr	r3, [pc, #16]	; (800a720 <__assert_func+0x38>)
 800a70e:	461c      	mov	r4, r3
 800a710:	e7f3      	b.n	800a6fa <__assert_func+0x12>
 800a712:	bf00      	nop
 800a714:	20000150 	.word	0x20000150
 800a718:	0800e235 	.word	0x0800e235
 800a71c:	0800e242 	.word	0x0800e242
 800a720:	0800e270 	.word	0x0800e270

0800a724 <fiprintf>:
 800a724:	b40e      	push	{r1, r2, r3}
 800a726:	b503      	push	{r0, r1, lr}
 800a728:	4601      	mov	r1, r0
 800a72a:	ab03      	add	r3, sp, #12
 800a72c:	4805      	ldr	r0, [pc, #20]	; (800a744 <fiprintf+0x20>)
 800a72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a732:	6800      	ldr	r0, [r0, #0]
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	f000 f87d 	bl	800a834 <_vfiprintf_r>
 800a73a:	b002      	add	sp, #8
 800a73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a740:	b003      	add	sp, #12
 800a742:	4770      	bx	lr
 800a744:	20000150 	.word	0x20000150

0800a748 <memmove>:
 800a748:	4288      	cmp	r0, r1
 800a74a:	b510      	push	{r4, lr}
 800a74c:	eb01 0402 	add.w	r4, r1, r2
 800a750:	d902      	bls.n	800a758 <memmove+0x10>
 800a752:	4284      	cmp	r4, r0
 800a754:	4623      	mov	r3, r4
 800a756:	d807      	bhi.n	800a768 <memmove+0x20>
 800a758:	1e43      	subs	r3, r0, #1
 800a75a:	42a1      	cmp	r1, r4
 800a75c:	d008      	beq.n	800a770 <memmove+0x28>
 800a75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a762:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a766:	e7f8      	b.n	800a75a <memmove+0x12>
 800a768:	4402      	add	r2, r0
 800a76a:	4601      	mov	r1, r0
 800a76c:	428a      	cmp	r2, r1
 800a76e:	d100      	bne.n	800a772 <memmove+0x2a>
 800a770:	bd10      	pop	{r4, pc}
 800a772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a77a:	e7f7      	b.n	800a76c <memmove+0x24>

0800a77c <__malloc_lock>:
 800a77c:	4801      	ldr	r0, [pc, #4]	; (800a784 <__malloc_lock+0x8>)
 800a77e:	f000 bc09 	b.w	800af94 <__retarget_lock_acquire_recursive>
 800a782:	bf00      	nop
 800a784:	20000d80 	.word	0x20000d80

0800a788 <__malloc_unlock>:
 800a788:	4801      	ldr	r0, [pc, #4]	; (800a790 <__malloc_unlock+0x8>)
 800a78a:	f000 bc04 	b.w	800af96 <__retarget_lock_release_recursive>
 800a78e:	bf00      	nop
 800a790:	20000d80 	.word	0x20000d80

0800a794 <_realloc_r>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	4607      	mov	r7, r0
 800a798:	4614      	mov	r4, r2
 800a79a:	460e      	mov	r6, r1
 800a79c:	b921      	cbnz	r1, 800a7a8 <_realloc_r+0x14>
 800a79e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	f7ff bdb2 	b.w	800a30c <_malloc_r>
 800a7a8:	b922      	cbnz	r2, 800a7b4 <_realloc_r+0x20>
 800a7aa:	f7ff fd5f 	bl	800a26c <_free_r>
 800a7ae:	4625      	mov	r5, r4
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b4:	f000 fc54 	bl	800b060 <_malloc_usable_size_r>
 800a7b8:	42a0      	cmp	r0, r4
 800a7ba:	d20f      	bcs.n	800a7dc <_realloc_r+0x48>
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f7ff fda4 	bl	800a30c <_malloc_r>
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0f2      	beq.n	800a7b0 <_realloc_r+0x1c>
 800a7ca:	4631      	mov	r1, r6
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	f7ff f875 	bl	80098bc <memcpy>
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f7ff fd49 	bl	800a26c <_free_r>
 800a7da:	e7e9      	b.n	800a7b0 <_realloc_r+0x1c>
 800a7dc:	4635      	mov	r5, r6
 800a7de:	e7e7      	b.n	800a7b0 <_realloc_r+0x1c>

0800a7e0 <__sfputc_r>:
 800a7e0:	6893      	ldr	r3, [r2, #8]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	b410      	push	{r4}
 800a7e8:	6093      	str	r3, [r2, #8]
 800a7ea:	da08      	bge.n	800a7fe <__sfputc_r+0x1e>
 800a7ec:	6994      	ldr	r4, [r2, #24]
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	db01      	blt.n	800a7f6 <__sfputc_r+0x16>
 800a7f2:	290a      	cmp	r1, #10
 800a7f4:	d103      	bne.n	800a7fe <__sfputc_r+0x1e>
 800a7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7fa:	f000 b94b 	b.w	800aa94 <__swbuf_r>
 800a7fe:	6813      	ldr	r3, [r2, #0]
 800a800:	1c58      	adds	r0, r3, #1
 800a802:	6010      	str	r0, [r2, #0]
 800a804:	7019      	strb	r1, [r3, #0]
 800a806:	4608      	mov	r0, r1
 800a808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <__sfputs_r>:
 800a80e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a810:	4606      	mov	r6, r0
 800a812:	460f      	mov	r7, r1
 800a814:	4614      	mov	r4, r2
 800a816:	18d5      	adds	r5, r2, r3
 800a818:	42ac      	cmp	r4, r5
 800a81a:	d101      	bne.n	800a820 <__sfputs_r+0x12>
 800a81c:	2000      	movs	r0, #0
 800a81e:	e007      	b.n	800a830 <__sfputs_r+0x22>
 800a820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a824:	463a      	mov	r2, r7
 800a826:	4630      	mov	r0, r6
 800a828:	f7ff ffda 	bl	800a7e0 <__sfputc_r>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d1f3      	bne.n	800a818 <__sfputs_r+0xa>
 800a830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a834 <_vfiprintf_r>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	460d      	mov	r5, r1
 800a83a:	b09d      	sub	sp, #116	; 0x74
 800a83c:	4614      	mov	r4, r2
 800a83e:	4698      	mov	r8, r3
 800a840:	4606      	mov	r6, r0
 800a842:	b118      	cbz	r0, 800a84c <_vfiprintf_r+0x18>
 800a844:	6983      	ldr	r3, [r0, #24]
 800a846:	b90b      	cbnz	r3, 800a84c <_vfiprintf_r+0x18>
 800a848:	f000 fb06 	bl	800ae58 <__sinit>
 800a84c:	4b89      	ldr	r3, [pc, #548]	; (800aa74 <_vfiprintf_r+0x240>)
 800a84e:	429d      	cmp	r5, r3
 800a850:	d11b      	bne.n	800a88a <_vfiprintf_r+0x56>
 800a852:	6875      	ldr	r5, [r6, #4]
 800a854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a856:	07d9      	lsls	r1, r3, #31
 800a858:	d405      	bmi.n	800a866 <_vfiprintf_r+0x32>
 800a85a:	89ab      	ldrh	r3, [r5, #12]
 800a85c:	059a      	lsls	r2, r3, #22
 800a85e:	d402      	bmi.n	800a866 <_vfiprintf_r+0x32>
 800a860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a862:	f000 fb97 	bl	800af94 <__retarget_lock_acquire_recursive>
 800a866:	89ab      	ldrh	r3, [r5, #12]
 800a868:	071b      	lsls	r3, r3, #28
 800a86a:	d501      	bpl.n	800a870 <_vfiprintf_r+0x3c>
 800a86c:	692b      	ldr	r3, [r5, #16]
 800a86e:	b9eb      	cbnz	r3, 800a8ac <_vfiprintf_r+0x78>
 800a870:	4629      	mov	r1, r5
 800a872:	4630      	mov	r0, r6
 800a874:	f000 f960 	bl	800ab38 <__swsetup_r>
 800a878:	b1c0      	cbz	r0, 800a8ac <_vfiprintf_r+0x78>
 800a87a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a87c:	07dc      	lsls	r4, r3, #31
 800a87e:	d50e      	bpl.n	800a89e <_vfiprintf_r+0x6a>
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	b01d      	add	sp, #116	; 0x74
 800a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88a:	4b7b      	ldr	r3, [pc, #492]	; (800aa78 <_vfiprintf_r+0x244>)
 800a88c:	429d      	cmp	r5, r3
 800a88e:	d101      	bne.n	800a894 <_vfiprintf_r+0x60>
 800a890:	68b5      	ldr	r5, [r6, #8]
 800a892:	e7df      	b.n	800a854 <_vfiprintf_r+0x20>
 800a894:	4b79      	ldr	r3, [pc, #484]	; (800aa7c <_vfiprintf_r+0x248>)
 800a896:	429d      	cmp	r5, r3
 800a898:	bf08      	it	eq
 800a89a:	68f5      	ldreq	r5, [r6, #12]
 800a89c:	e7da      	b.n	800a854 <_vfiprintf_r+0x20>
 800a89e:	89ab      	ldrh	r3, [r5, #12]
 800a8a0:	0598      	lsls	r0, r3, #22
 800a8a2:	d4ed      	bmi.n	800a880 <_vfiprintf_r+0x4c>
 800a8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8a6:	f000 fb76 	bl	800af96 <__retarget_lock_release_recursive>
 800a8aa:	e7e9      	b.n	800a880 <_vfiprintf_r+0x4c>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b0:	2320      	movs	r3, #32
 800a8b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ba:	2330      	movs	r3, #48	; 0x30
 800a8bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa80 <_vfiprintf_r+0x24c>
 800a8c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8c4:	f04f 0901 	mov.w	r9, #1
 800a8c8:	4623      	mov	r3, r4
 800a8ca:	469a      	mov	sl, r3
 800a8cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8d0:	b10a      	cbz	r2, 800a8d6 <_vfiprintf_r+0xa2>
 800a8d2:	2a25      	cmp	r2, #37	; 0x25
 800a8d4:	d1f9      	bne.n	800a8ca <_vfiprintf_r+0x96>
 800a8d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a8da:	d00b      	beq.n	800a8f4 <_vfiprintf_r+0xc0>
 800a8dc:	465b      	mov	r3, fp
 800a8de:	4622      	mov	r2, r4
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f7ff ff93 	bl	800a80e <__sfputs_r>
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	f000 80aa 	beq.w	800aa42 <_vfiprintf_r+0x20e>
 800a8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8f0:	445a      	add	r2, fp
 800a8f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 80a2 	beq.w	800aa42 <_vfiprintf_r+0x20e>
 800a8fe:	2300      	movs	r3, #0
 800a900:	f04f 32ff 	mov.w	r2, #4294967295
 800a904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a908:	f10a 0a01 	add.w	sl, sl, #1
 800a90c:	9304      	str	r3, [sp, #16]
 800a90e:	9307      	str	r3, [sp, #28]
 800a910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a914:	931a      	str	r3, [sp, #104]	; 0x68
 800a916:	4654      	mov	r4, sl
 800a918:	2205      	movs	r2, #5
 800a91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a91e:	4858      	ldr	r0, [pc, #352]	; (800aa80 <_vfiprintf_r+0x24c>)
 800a920:	f7f5 fc6e 	bl	8000200 <memchr>
 800a924:	9a04      	ldr	r2, [sp, #16]
 800a926:	b9d8      	cbnz	r0, 800a960 <_vfiprintf_r+0x12c>
 800a928:	06d1      	lsls	r1, r2, #27
 800a92a:	bf44      	itt	mi
 800a92c:	2320      	movmi	r3, #32
 800a92e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a932:	0713      	lsls	r3, r2, #28
 800a934:	bf44      	itt	mi
 800a936:	232b      	movmi	r3, #43	; 0x2b
 800a938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a93c:	f89a 3000 	ldrb.w	r3, [sl]
 800a940:	2b2a      	cmp	r3, #42	; 0x2a
 800a942:	d015      	beq.n	800a970 <_vfiprintf_r+0x13c>
 800a944:	9a07      	ldr	r2, [sp, #28]
 800a946:	4654      	mov	r4, sl
 800a948:	2000      	movs	r0, #0
 800a94a:	f04f 0c0a 	mov.w	ip, #10
 800a94e:	4621      	mov	r1, r4
 800a950:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a954:	3b30      	subs	r3, #48	; 0x30
 800a956:	2b09      	cmp	r3, #9
 800a958:	d94e      	bls.n	800a9f8 <_vfiprintf_r+0x1c4>
 800a95a:	b1b0      	cbz	r0, 800a98a <_vfiprintf_r+0x156>
 800a95c:	9207      	str	r2, [sp, #28]
 800a95e:	e014      	b.n	800a98a <_vfiprintf_r+0x156>
 800a960:	eba0 0308 	sub.w	r3, r0, r8
 800a964:	fa09 f303 	lsl.w	r3, r9, r3
 800a968:	4313      	orrs	r3, r2
 800a96a:	9304      	str	r3, [sp, #16]
 800a96c:	46a2      	mov	sl, r4
 800a96e:	e7d2      	b.n	800a916 <_vfiprintf_r+0xe2>
 800a970:	9b03      	ldr	r3, [sp, #12]
 800a972:	1d19      	adds	r1, r3, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	9103      	str	r1, [sp, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	bfbb      	ittet	lt
 800a97c:	425b      	neglt	r3, r3
 800a97e:	f042 0202 	orrlt.w	r2, r2, #2
 800a982:	9307      	strge	r3, [sp, #28]
 800a984:	9307      	strlt	r3, [sp, #28]
 800a986:	bfb8      	it	lt
 800a988:	9204      	strlt	r2, [sp, #16]
 800a98a:	7823      	ldrb	r3, [r4, #0]
 800a98c:	2b2e      	cmp	r3, #46	; 0x2e
 800a98e:	d10c      	bne.n	800a9aa <_vfiprintf_r+0x176>
 800a990:	7863      	ldrb	r3, [r4, #1]
 800a992:	2b2a      	cmp	r3, #42	; 0x2a
 800a994:	d135      	bne.n	800aa02 <_vfiprintf_r+0x1ce>
 800a996:	9b03      	ldr	r3, [sp, #12]
 800a998:	1d1a      	adds	r2, r3, #4
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	9203      	str	r2, [sp, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bfb8      	it	lt
 800a9a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9a6:	3402      	adds	r4, #2
 800a9a8:	9305      	str	r3, [sp, #20]
 800a9aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa90 <_vfiprintf_r+0x25c>
 800a9ae:	7821      	ldrb	r1, [r4, #0]
 800a9b0:	2203      	movs	r2, #3
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	f7f5 fc24 	bl	8000200 <memchr>
 800a9b8:	b140      	cbz	r0, 800a9cc <_vfiprintf_r+0x198>
 800a9ba:	2340      	movs	r3, #64	; 0x40
 800a9bc:	eba0 000a 	sub.w	r0, r0, sl
 800a9c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a9c4:	9b04      	ldr	r3, [sp, #16]
 800a9c6:	4303      	orrs	r3, r0
 800a9c8:	3401      	adds	r4, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d0:	482c      	ldr	r0, [pc, #176]	; (800aa84 <_vfiprintf_r+0x250>)
 800a9d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9d6:	2206      	movs	r2, #6
 800a9d8:	f7f5 fc12 	bl	8000200 <memchr>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d03f      	beq.n	800aa60 <_vfiprintf_r+0x22c>
 800a9e0:	4b29      	ldr	r3, [pc, #164]	; (800aa88 <_vfiprintf_r+0x254>)
 800a9e2:	bb1b      	cbnz	r3, 800aa2c <_vfiprintf_r+0x1f8>
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	3307      	adds	r3, #7
 800a9e8:	f023 0307 	bic.w	r3, r3, #7
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	9303      	str	r3, [sp, #12]
 800a9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f2:	443b      	add	r3, r7
 800a9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f6:	e767      	b.n	800a8c8 <_vfiprintf_r+0x94>
 800a9f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	2001      	movs	r0, #1
 800aa00:	e7a5      	b.n	800a94e <_vfiprintf_r+0x11a>
 800aa02:	2300      	movs	r3, #0
 800aa04:	3401      	adds	r4, #1
 800aa06:	9305      	str	r3, [sp, #20]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	f04f 0c0a 	mov.w	ip, #10
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa14:	3a30      	subs	r2, #48	; 0x30
 800aa16:	2a09      	cmp	r2, #9
 800aa18:	d903      	bls.n	800aa22 <_vfiprintf_r+0x1ee>
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0c5      	beq.n	800a9aa <_vfiprintf_r+0x176>
 800aa1e:	9105      	str	r1, [sp, #20]
 800aa20:	e7c3      	b.n	800a9aa <_vfiprintf_r+0x176>
 800aa22:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa26:	4604      	mov	r4, r0
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e7f0      	b.n	800aa0e <_vfiprintf_r+0x1da>
 800aa2c:	ab03      	add	r3, sp, #12
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	462a      	mov	r2, r5
 800aa32:	4b16      	ldr	r3, [pc, #88]	; (800aa8c <_vfiprintf_r+0x258>)
 800aa34:	a904      	add	r1, sp, #16
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7fc f886 	bl	8006b48 <_printf_float>
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	1c78      	adds	r0, r7, #1
 800aa40:	d1d6      	bne.n	800a9f0 <_vfiprintf_r+0x1bc>
 800aa42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa44:	07d9      	lsls	r1, r3, #31
 800aa46:	d405      	bmi.n	800aa54 <_vfiprintf_r+0x220>
 800aa48:	89ab      	ldrh	r3, [r5, #12]
 800aa4a:	059a      	lsls	r2, r3, #22
 800aa4c:	d402      	bmi.n	800aa54 <_vfiprintf_r+0x220>
 800aa4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa50:	f000 faa1 	bl	800af96 <__retarget_lock_release_recursive>
 800aa54:	89ab      	ldrh	r3, [r5, #12]
 800aa56:	065b      	lsls	r3, r3, #25
 800aa58:	f53f af12 	bmi.w	800a880 <_vfiprintf_r+0x4c>
 800aa5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa5e:	e711      	b.n	800a884 <_vfiprintf_r+0x50>
 800aa60:	ab03      	add	r3, sp, #12
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	462a      	mov	r2, r5
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <_vfiprintf_r+0x258>)
 800aa68:	a904      	add	r1, sp, #16
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7fc fb10 	bl	8007090 <_printf_i>
 800aa70:	e7e4      	b.n	800aa3c <_vfiprintf_r+0x208>
 800aa72:	bf00      	nop
 800aa74:	0800e294 	.word	0x0800e294
 800aa78:	0800e2b4 	.word	0x0800e2b4
 800aa7c:	0800e274 	.word	0x0800e274
 800aa80:	0800e224 	.word	0x0800e224
 800aa84:	0800e22e 	.word	0x0800e22e
 800aa88:	08006b49 	.word	0x08006b49
 800aa8c:	0800a80f 	.word	0x0800a80f
 800aa90:	0800e22a 	.word	0x0800e22a

0800aa94 <__swbuf_r>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	460e      	mov	r6, r1
 800aa98:	4614      	mov	r4, r2
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	b118      	cbz	r0, 800aaa6 <__swbuf_r+0x12>
 800aa9e:	6983      	ldr	r3, [r0, #24]
 800aaa0:	b90b      	cbnz	r3, 800aaa6 <__swbuf_r+0x12>
 800aaa2:	f000 f9d9 	bl	800ae58 <__sinit>
 800aaa6:	4b21      	ldr	r3, [pc, #132]	; (800ab2c <__swbuf_r+0x98>)
 800aaa8:	429c      	cmp	r4, r3
 800aaaa:	d12b      	bne.n	800ab04 <__swbuf_r+0x70>
 800aaac:	686c      	ldr	r4, [r5, #4]
 800aaae:	69a3      	ldr	r3, [r4, #24]
 800aab0:	60a3      	str	r3, [r4, #8]
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	071a      	lsls	r2, r3, #28
 800aab6:	d52f      	bpl.n	800ab18 <__swbuf_r+0x84>
 800aab8:	6923      	ldr	r3, [r4, #16]
 800aaba:	b36b      	cbz	r3, 800ab18 <__swbuf_r+0x84>
 800aabc:	6923      	ldr	r3, [r4, #16]
 800aabe:	6820      	ldr	r0, [r4, #0]
 800aac0:	1ac0      	subs	r0, r0, r3
 800aac2:	6963      	ldr	r3, [r4, #20]
 800aac4:	b2f6      	uxtb	r6, r6
 800aac6:	4283      	cmp	r3, r0
 800aac8:	4637      	mov	r7, r6
 800aaca:	dc04      	bgt.n	800aad6 <__swbuf_r+0x42>
 800aacc:	4621      	mov	r1, r4
 800aace:	4628      	mov	r0, r5
 800aad0:	f000 f92e 	bl	800ad30 <_fflush_r>
 800aad4:	bb30      	cbnz	r0, 800ab24 <__swbuf_r+0x90>
 800aad6:	68a3      	ldr	r3, [r4, #8]
 800aad8:	3b01      	subs	r3, #1
 800aada:	60a3      	str	r3, [r4, #8]
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	6022      	str	r2, [r4, #0]
 800aae2:	701e      	strb	r6, [r3, #0]
 800aae4:	6963      	ldr	r3, [r4, #20]
 800aae6:	3001      	adds	r0, #1
 800aae8:	4283      	cmp	r3, r0
 800aaea:	d004      	beq.n	800aaf6 <__swbuf_r+0x62>
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	07db      	lsls	r3, r3, #31
 800aaf0:	d506      	bpl.n	800ab00 <__swbuf_r+0x6c>
 800aaf2:	2e0a      	cmp	r6, #10
 800aaf4:	d104      	bne.n	800ab00 <__swbuf_r+0x6c>
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f000 f919 	bl	800ad30 <_fflush_r>
 800aafe:	b988      	cbnz	r0, 800ab24 <__swbuf_r+0x90>
 800ab00:	4638      	mov	r0, r7
 800ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab04:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <__swbuf_r+0x9c>)
 800ab06:	429c      	cmp	r4, r3
 800ab08:	d101      	bne.n	800ab0e <__swbuf_r+0x7a>
 800ab0a:	68ac      	ldr	r4, [r5, #8]
 800ab0c:	e7cf      	b.n	800aaae <__swbuf_r+0x1a>
 800ab0e:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <__swbuf_r+0xa0>)
 800ab10:	429c      	cmp	r4, r3
 800ab12:	bf08      	it	eq
 800ab14:	68ec      	ldreq	r4, [r5, #12]
 800ab16:	e7ca      	b.n	800aaae <__swbuf_r+0x1a>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f000 f80c 	bl	800ab38 <__swsetup_r>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d0cb      	beq.n	800aabc <__swbuf_r+0x28>
 800ab24:	f04f 37ff 	mov.w	r7, #4294967295
 800ab28:	e7ea      	b.n	800ab00 <__swbuf_r+0x6c>
 800ab2a:	bf00      	nop
 800ab2c:	0800e294 	.word	0x0800e294
 800ab30:	0800e2b4 	.word	0x0800e2b4
 800ab34:	0800e274 	.word	0x0800e274

0800ab38 <__swsetup_r>:
 800ab38:	4b32      	ldr	r3, [pc, #200]	; (800ac04 <__swsetup_r+0xcc>)
 800ab3a:	b570      	push	{r4, r5, r6, lr}
 800ab3c:	681d      	ldr	r5, [r3, #0]
 800ab3e:	4606      	mov	r6, r0
 800ab40:	460c      	mov	r4, r1
 800ab42:	b125      	cbz	r5, 800ab4e <__swsetup_r+0x16>
 800ab44:	69ab      	ldr	r3, [r5, #24]
 800ab46:	b913      	cbnz	r3, 800ab4e <__swsetup_r+0x16>
 800ab48:	4628      	mov	r0, r5
 800ab4a:	f000 f985 	bl	800ae58 <__sinit>
 800ab4e:	4b2e      	ldr	r3, [pc, #184]	; (800ac08 <__swsetup_r+0xd0>)
 800ab50:	429c      	cmp	r4, r3
 800ab52:	d10f      	bne.n	800ab74 <__swsetup_r+0x3c>
 800ab54:	686c      	ldr	r4, [r5, #4]
 800ab56:	89a3      	ldrh	r3, [r4, #12]
 800ab58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab5c:	0719      	lsls	r1, r3, #28
 800ab5e:	d42c      	bmi.n	800abba <__swsetup_r+0x82>
 800ab60:	06dd      	lsls	r5, r3, #27
 800ab62:	d411      	bmi.n	800ab88 <__swsetup_r+0x50>
 800ab64:	2309      	movs	r3, #9
 800ab66:	6033      	str	r3, [r6, #0]
 800ab68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab6c:	81a3      	strh	r3, [r4, #12]
 800ab6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab72:	e03e      	b.n	800abf2 <__swsetup_r+0xba>
 800ab74:	4b25      	ldr	r3, [pc, #148]	; (800ac0c <__swsetup_r+0xd4>)
 800ab76:	429c      	cmp	r4, r3
 800ab78:	d101      	bne.n	800ab7e <__swsetup_r+0x46>
 800ab7a:	68ac      	ldr	r4, [r5, #8]
 800ab7c:	e7eb      	b.n	800ab56 <__swsetup_r+0x1e>
 800ab7e:	4b24      	ldr	r3, [pc, #144]	; (800ac10 <__swsetup_r+0xd8>)
 800ab80:	429c      	cmp	r4, r3
 800ab82:	bf08      	it	eq
 800ab84:	68ec      	ldreq	r4, [r5, #12]
 800ab86:	e7e6      	b.n	800ab56 <__swsetup_r+0x1e>
 800ab88:	0758      	lsls	r0, r3, #29
 800ab8a:	d512      	bpl.n	800abb2 <__swsetup_r+0x7a>
 800ab8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab8e:	b141      	cbz	r1, 800aba2 <__swsetup_r+0x6a>
 800ab90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab94:	4299      	cmp	r1, r3
 800ab96:	d002      	beq.n	800ab9e <__swsetup_r+0x66>
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7ff fb67 	bl	800a26c <_free_r>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	6363      	str	r3, [r4, #52]	; 0x34
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aba8:	81a3      	strh	r3, [r4, #12]
 800abaa:	2300      	movs	r3, #0
 800abac:	6063      	str	r3, [r4, #4]
 800abae:	6923      	ldr	r3, [r4, #16]
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	f043 0308 	orr.w	r3, r3, #8
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	b94b      	cbnz	r3, 800abd2 <__swsetup_r+0x9a>
 800abbe:	89a3      	ldrh	r3, [r4, #12]
 800abc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abc8:	d003      	beq.n	800abd2 <__swsetup_r+0x9a>
 800abca:	4621      	mov	r1, r4
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 fa07 	bl	800afe0 <__smakebuf_r>
 800abd2:	89a0      	ldrh	r0, [r4, #12]
 800abd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abd8:	f010 0301 	ands.w	r3, r0, #1
 800abdc:	d00a      	beq.n	800abf4 <__swsetup_r+0xbc>
 800abde:	2300      	movs	r3, #0
 800abe0:	60a3      	str	r3, [r4, #8]
 800abe2:	6963      	ldr	r3, [r4, #20]
 800abe4:	425b      	negs	r3, r3
 800abe6:	61a3      	str	r3, [r4, #24]
 800abe8:	6923      	ldr	r3, [r4, #16]
 800abea:	b943      	cbnz	r3, 800abfe <__swsetup_r+0xc6>
 800abec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abf0:	d1ba      	bne.n	800ab68 <__swsetup_r+0x30>
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	0781      	lsls	r1, r0, #30
 800abf6:	bf58      	it	pl
 800abf8:	6963      	ldrpl	r3, [r4, #20]
 800abfa:	60a3      	str	r3, [r4, #8]
 800abfc:	e7f4      	b.n	800abe8 <__swsetup_r+0xb0>
 800abfe:	2000      	movs	r0, #0
 800ac00:	e7f7      	b.n	800abf2 <__swsetup_r+0xba>
 800ac02:	bf00      	nop
 800ac04:	20000150 	.word	0x20000150
 800ac08:	0800e294 	.word	0x0800e294
 800ac0c:	0800e2b4 	.word	0x0800e2b4
 800ac10:	0800e274 	.word	0x0800e274

0800ac14 <abort>:
 800ac14:	b508      	push	{r3, lr}
 800ac16:	2006      	movs	r0, #6
 800ac18:	f000 fa52 	bl	800b0c0 <raise>
 800ac1c:	2001      	movs	r0, #1
 800ac1e:	f7f8 f917 	bl	8002e50 <_exit>
	...

0800ac24 <__sflush_r>:
 800ac24:	898a      	ldrh	r2, [r1, #12]
 800ac26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	0710      	lsls	r0, r2, #28
 800ac2e:	460c      	mov	r4, r1
 800ac30:	d458      	bmi.n	800ace4 <__sflush_r+0xc0>
 800ac32:	684b      	ldr	r3, [r1, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dc05      	bgt.n	800ac44 <__sflush_r+0x20>
 800ac38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dc02      	bgt.n	800ac44 <__sflush_r+0x20>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac46:	2e00      	cmp	r6, #0
 800ac48:	d0f9      	beq.n	800ac3e <__sflush_r+0x1a>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac50:	682f      	ldr	r7, [r5, #0]
 800ac52:	602b      	str	r3, [r5, #0]
 800ac54:	d032      	beq.n	800acbc <__sflush_r+0x98>
 800ac56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	075a      	lsls	r2, r3, #29
 800ac5c:	d505      	bpl.n	800ac6a <__sflush_r+0x46>
 800ac5e:	6863      	ldr	r3, [r4, #4]
 800ac60:	1ac0      	subs	r0, r0, r3
 800ac62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac64:	b10b      	cbz	r3, 800ac6a <__sflush_r+0x46>
 800ac66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac68:	1ac0      	subs	r0, r0, r3
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac70:	6a21      	ldr	r1, [r4, #32]
 800ac72:	4628      	mov	r0, r5
 800ac74:	47b0      	blx	r6
 800ac76:	1c43      	adds	r3, r0, #1
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	d106      	bne.n	800ac8a <__sflush_r+0x66>
 800ac7c:	6829      	ldr	r1, [r5, #0]
 800ac7e:	291d      	cmp	r1, #29
 800ac80:	d82c      	bhi.n	800acdc <__sflush_r+0xb8>
 800ac82:	4a2a      	ldr	r2, [pc, #168]	; (800ad2c <__sflush_r+0x108>)
 800ac84:	40ca      	lsrs	r2, r1
 800ac86:	07d6      	lsls	r6, r2, #31
 800ac88:	d528      	bpl.n	800acdc <__sflush_r+0xb8>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	6062      	str	r2, [r4, #4]
 800ac8e:	04d9      	lsls	r1, r3, #19
 800ac90:	6922      	ldr	r2, [r4, #16]
 800ac92:	6022      	str	r2, [r4, #0]
 800ac94:	d504      	bpl.n	800aca0 <__sflush_r+0x7c>
 800ac96:	1c42      	adds	r2, r0, #1
 800ac98:	d101      	bne.n	800ac9e <__sflush_r+0x7a>
 800ac9a:	682b      	ldr	r3, [r5, #0]
 800ac9c:	b903      	cbnz	r3, 800aca0 <__sflush_r+0x7c>
 800ac9e:	6560      	str	r0, [r4, #84]	; 0x54
 800aca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aca2:	602f      	str	r7, [r5, #0]
 800aca4:	2900      	cmp	r1, #0
 800aca6:	d0ca      	beq.n	800ac3e <__sflush_r+0x1a>
 800aca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acac:	4299      	cmp	r1, r3
 800acae:	d002      	beq.n	800acb6 <__sflush_r+0x92>
 800acb0:	4628      	mov	r0, r5
 800acb2:	f7ff fadb 	bl	800a26c <_free_r>
 800acb6:	2000      	movs	r0, #0
 800acb8:	6360      	str	r0, [r4, #52]	; 0x34
 800acba:	e7c1      	b.n	800ac40 <__sflush_r+0x1c>
 800acbc:	6a21      	ldr	r1, [r4, #32]
 800acbe:	2301      	movs	r3, #1
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b0      	blx	r6
 800acc4:	1c41      	adds	r1, r0, #1
 800acc6:	d1c7      	bne.n	800ac58 <__sflush_r+0x34>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0c4      	beq.n	800ac58 <__sflush_r+0x34>
 800acce:	2b1d      	cmp	r3, #29
 800acd0:	d001      	beq.n	800acd6 <__sflush_r+0xb2>
 800acd2:	2b16      	cmp	r3, #22
 800acd4:	d101      	bne.n	800acda <__sflush_r+0xb6>
 800acd6:	602f      	str	r7, [r5, #0]
 800acd8:	e7b1      	b.n	800ac3e <__sflush_r+0x1a>
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	e7ad      	b.n	800ac40 <__sflush_r+0x1c>
 800ace4:	690f      	ldr	r7, [r1, #16]
 800ace6:	2f00      	cmp	r7, #0
 800ace8:	d0a9      	beq.n	800ac3e <__sflush_r+0x1a>
 800acea:	0793      	lsls	r3, r2, #30
 800acec:	680e      	ldr	r6, [r1, #0]
 800acee:	bf08      	it	eq
 800acf0:	694b      	ldreq	r3, [r1, #20]
 800acf2:	600f      	str	r7, [r1, #0]
 800acf4:	bf18      	it	ne
 800acf6:	2300      	movne	r3, #0
 800acf8:	eba6 0807 	sub.w	r8, r6, r7
 800acfc:	608b      	str	r3, [r1, #8]
 800acfe:	f1b8 0f00 	cmp.w	r8, #0
 800ad02:	dd9c      	ble.n	800ac3e <__sflush_r+0x1a>
 800ad04:	6a21      	ldr	r1, [r4, #32]
 800ad06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad08:	4643      	mov	r3, r8
 800ad0a:	463a      	mov	r2, r7
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	47b0      	blx	r6
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dc06      	bgt.n	800ad22 <__sflush_r+0xfe>
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	e78e      	b.n	800ac40 <__sflush_r+0x1c>
 800ad22:	4407      	add	r7, r0
 800ad24:	eba8 0800 	sub.w	r8, r8, r0
 800ad28:	e7e9      	b.n	800acfe <__sflush_r+0xda>
 800ad2a:	bf00      	nop
 800ad2c:	20400001 	.word	0x20400001

0800ad30 <_fflush_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	690b      	ldr	r3, [r1, #16]
 800ad34:	4605      	mov	r5, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	b913      	cbnz	r3, 800ad40 <_fflush_r+0x10>
 800ad3a:	2500      	movs	r5, #0
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	b118      	cbz	r0, 800ad4a <_fflush_r+0x1a>
 800ad42:	6983      	ldr	r3, [r0, #24]
 800ad44:	b90b      	cbnz	r3, 800ad4a <_fflush_r+0x1a>
 800ad46:	f000 f887 	bl	800ae58 <__sinit>
 800ad4a:	4b14      	ldr	r3, [pc, #80]	; (800ad9c <_fflush_r+0x6c>)
 800ad4c:	429c      	cmp	r4, r3
 800ad4e:	d11b      	bne.n	800ad88 <_fflush_r+0x58>
 800ad50:	686c      	ldr	r4, [r5, #4]
 800ad52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d0ef      	beq.n	800ad3a <_fflush_r+0xa>
 800ad5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad5c:	07d0      	lsls	r0, r2, #31
 800ad5e:	d404      	bmi.n	800ad6a <_fflush_r+0x3a>
 800ad60:	0599      	lsls	r1, r3, #22
 800ad62:	d402      	bmi.n	800ad6a <_fflush_r+0x3a>
 800ad64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad66:	f000 f915 	bl	800af94 <__retarget_lock_acquire_recursive>
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	f7ff ff59 	bl	800ac24 <__sflush_r>
 800ad72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad74:	07da      	lsls	r2, r3, #31
 800ad76:	4605      	mov	r5, r0
 800ad78:	d4e0      	bmi.n	800ad3c <_fflush_r+0xc>
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	059b      	lsls	r3, r3, #22
 800ad7e:	d4dd      	bmi.n	800ad3c <_fflush_r+0xc>
 800ad80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad82:	f000 f908 	bl	800af96 <__retarget_lock_release_recursive>
 800ad86:	e7d9      	b.n	800ad3c <_fflush_r+0xc>
 800ad88:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <_fflush_r+0x70>)
 800ad8a:	429c      	cmp	r4, r3
 800ad8c:	d101      	bne.n	800ad92 <_fflush_r+0x62>
 800ad8e:	68ac      	ldr	r4, [r5, #8]
 800ad90:	e7df      	b.n	800ad52 <_fflush_r+0x22>
 800ad92:	4b04      	ldr	r3, [pc, #16]	; (800ada4 <_fflush_r+0x74>)
 800ad94:	429c      	cmp	r4, r3
 800ad96:	bf08      	it	eq
 800ad98:	68ec      	ldreq	r4, [r5, #12]
 800ad9a:	e7da      	b.n	800ad52 <_fflush_r+0x22>
 800ad9c:	0800e294 	.word	0x0800e294
 800ada0:	0800e2b4 	.word	0x0800e2b4
 800ada4:	0800e274 	.word	0x0800e274

0800ada8 <std>:
 800ada8:	2300      	movs	r3, #0
 800adaa:	b510      	push	{r4, lr}
 800adac:	4604      	mov	r4, r0
 800adae:	e9c0 3300 	strd	r3, r3, [r0]
 800adb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adb6:	6083      	str	r3, [r0, #8]
 800adb8:	8181      	strh	r1, [r0, #12]
 800adba:	6643      	str	r3, [r0, #100]	; 0x64
 800adbc:	81c2      	strh	r2, [r0, #14]
 800adbe:	6183      	str	r3, [r0, #24]
 800adc0:	4619      	mov	r1, r3
 800adc2:	2208      	movs	r2, #8
 800adc4:	305c      	adds	r0, #92	; 0x5c
 800adc6:	f7fb fe17 	bl	80069f8 <memset>
 800adca:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <std+0x38>)
 800adcc:	6263      	str	r3, [r4, #36]	; 0x24
 800adce:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <std+0x3c>)
 800add0:	62a3      	str	r3, [r4, #40]	; 0x28
 800add2:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <std+0x40>)
 800add4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <std+0x44>)
 800add8:	6224      	str	r4, [r4, #32]
 800adda:	6323      	str	r3, [r4, #48]	; 0x30
 800addc:	bd10      	pop	{r4, pc}
 800adde:	bf00      	nop
 800ade0:	0800b0f9 	.word	0x0800b0f9
 800ade4:	0800b11b 	.word	0x0800b11b
 800ade8:	0800b153 	.word	0x0800b153
 800adec:	0800b177 	.word	0x0800b177

0800adf0 <_cleanup_r>:
 800adf0:	4901      	ldr	r1, [pc, #4]	; (800adf8 <_cleanup_r+0x8>)
 800adf2:	f000 b8af 	b.w	800af54 <_fwalk_reent>
 800adf6:	bf00      	nop
 800adf8:	0800ad31 	.word	0x0800ad31

0800adfc <__sfmoreglue>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	1e4a      	subs	r2, r1, #1
 800ae00:	2568      	movs	r5, #104	; 0x68
 800ae02:	4355      	muls	r5, r2
 800ae04:	460e      	mov	r6, r1
 800ae06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae0a:	f7ff fa7f 	bl	800a30c <_malloc_r>
 800ae0e:	4604      	mov	r4, r0
 800ae10:	b140      	cbz	r0, 800ae24 <__sfmoreglue+0x28>
 800ae12:	2100      	movs	r1, #0
 800ae14:	e9c0 1600 	strd	r1, r6, [r0]
 800ae18:	300c      	adds	r0, #12
 800ae1a:	60a0      	str	r0, [r4, #8]
 800ae1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae20:	f7fb fdea 	bl	80069f8 <memset>
 800ae24:	4620      	mov	r0, r4
 800ae26:	bd70      	pop	{r4, r5, r6, pc}

0800ae28 <__sfp_lock_acquire>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__sfp_lock_acquire+0x8>)
 800ae2a:	f000 b8b3 	b.w	800af94 <__retarget_lock_acquire_recursive>
 800ae2e:	bf00      	nop
 800ae30:	20000d84 	.word	0x20000d84

0800ae34 <__sfp_lock_release>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__sfp_lock_release+0x8>)
 800ae36:	f000 b8ae 	b.w	800af96 <__retarget_lock_release_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20000d84 	.word	0x20000d84

0800ae40 <__sinit_lock_acquire>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__sinit_lock_acquire+0x8>)
 800ae42:	f000 b8a7 	b.w	800af94 <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	20000d7f 	.word	0x20000d7f

0800ae4c <__sinit_lock_release>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__sinit_lock_release+0x8>)
 800ae4e:	f000 b8a2 	b.w	800af96 <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	20000d7f 	.word	0x20000d7f

0800ae58 <__sinit>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	f7ff fff0 	bl	800ae40 <__sinit_lock_acquire>
 800ae60:	69a3      	ldr	r3, [r4, #24]
 800ae62:	b11b      	cbz	r3, 800ae6c <__sinit+0x14>
 800ae64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae68:	f7ff bff0 	b.w	800ae4c <__sinit_lock_release>
 800ae6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae70:	6523      	str	r3, [r4, #80]	; 0x50
 800ae72:	4b13      	ldr	r3, [pc, #76]	; (800aec0 <__sinit+0x68>)
 800ae74:	4a13      	ldr	r2, [pc, #76]	; (800aec4 <__sinit+0x6c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae7a:	42a3      	cmp	r3, r4
 800ae7c:	bf04      	itt	eq
 800ae7e:	2301      	moveq	r3, #1
 800ae80:	61a3      	streq	r3, [r4, #24]
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f820 	bl	800aec8 <__sfp>
 800ae88:	6060      	str	r0, [r4, #4]
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 f81c 	bl	800aec8 <__sfp>
 800ae90:	60a0      	str	r0, [r4, #8]
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 f818 	bl	800aec8 <__sfp>
 800ae98:	2200      	movs	r2, #0
 800ae9a:	60e0      	str	r0, [r4, #12]
 800ae9c:	2104      	movs	r1, #4
 800ae9e:	6860      	ldr	r0, [r4, #4]
 800aea0:	f7ff ff82 	bl	800ada8 <std>
 800aea4:	68a0      	ldr	r0, [r4, #8]
 800aea6:	2201      	movs	r2, #1
 800aea8:	2109      	movs	r1, #9
 800aeaa:	f7ff ff7d 	bl	800ada8 <std>
 800aeae:	68e0      	ldr	r0, [r4, #12]
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	2112      	movs	r1, #18
 800aeb4:	f7ff ff78 	bl	800ada8 <std>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	61a3      	str	r3, [r4, #24]
 800aebc:	e7d2      	b.n	800ae64 <__sinit+0xc>
 800aebe:	bf00      	nop
 800aec0:	0800de20 	.word	0x0800de20
 800aec4:	0800adf1 	.word	0x0800adf1

0800aec8 <__sfp>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	4607      	mov	r7, r0
 800aecc:	f7ff ffac 	bl	800ae28 <__sfp_lock_acquire>
 800aed0:	4b1e      	ldr	r3, [pc, #120]	; (800af4c <__sfp+0x84>)
 800aed2:	681e      	ldr	r6, [r3, #0]
 800aed4:	69b3      	ldr	r3, [r6, #24]
 800aed6:	b913      	cbnz	r3, 800aede <__sfp+0x16>
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff ffbd 	bl	800ae58 <__sinit>
 800aede:	3648      	adds	r6, #72	; 0x48
 800aee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	d503      	bpl.n	800aef0 <__sfp+0x28>
 800aee8:	6833      	ldr	r3, [r6, #0]
 800aeea:	b30b      	cbz	r3, 800af30 <__sfp+0x68>
 800aeec:	6836      	ldr	r6, [r6, #0]
 800aeee:	e7f7      	b.n	800aee0 <__sfp+0x18>
 800aef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aef4:	b9d5      	cbnz	r5, 800af2c <__sfp+0x64>
 800aef6:	4b16      	ldr	r3, [pc, #88]	; (800af50 <__sfp+0x88>)
 800aef8:	60e3      	str	r3, [r4, #12]
 800aefa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aefe:	6665      	str	r5, [r4, #100]	; 0x64
 800af00:	f000 f847 	bl	800af92 <__retarget_lock_init_recursive>
 800af04:	f7ff ff96 	bl	800ae34 <__sfp_lock_release>
 800af08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af10:	6025      	str	r5, [r4, #0]
 800af12:	61a5      	str	r5, [r4, #24]
 800af14:	2208      	movs	r2, #8
 800af16:	4629      	mov	r1, r5
 800af18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af1c:	f7fb fd6c 	bl	80069f8 <memset>
 800af20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af28:	4620      	mov	r0, r4
 800af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af2c:	3468      	adds	r4, #104	; 0x68
 800af2e:	e7d9      	b.n	800aee4 <__sfp+0x1c>
 800af30:	2104      	movs	r1, #4
 800af32:	4638      	mov	r0, r7
 800af34:	f7ff ff62 	bl	800adfc <__sfmoreglue>
 800af38:	4604      	mov	r4, r0
 800af3a:	6030      	str	r0, [r6, #0]
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d1d5      	bne.n	800aeec <__sfp+0x24>
 800af40:	f7ff ff78 	bl	800ae34 <__sfp_lock_release>
 800af44:	230c      	movs	r3, #12
 800af46:	603b      	str	r3, [r7, #0]
 800af48:	e7ee      	b.n	800af28 <__sfp+0x60>
 800af4a:	bf00      	nop
 800af4c:	0800de20 	.word	0x0800de20
 800af50:	ffff0001 	.word	0xffff0001

0800af54 <_fwalk_reent>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4606      	mov	r6, r0
 800af5a:	4688      	mov	r8, r1
 800af5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af60:	2700      	movs	r7, #0
 800af62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af66:	f1b9 0901 	subs.w	r9, r9, #1
 800af6a:	d505      	bpl.n	800af78 <_fwalk_reent+0x24>
 800af6c:	6824      	ldr	r4, [r4, #0]
 800af6e:	2c00      	cmp	r4, #0
 800af70:	d1f7      	bne.n	800af62 <_fwalk_reent+0xe>
 800af72:	4638      	mov	r0, r7
 800af74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af78:	89ab      	ldrh	r3, [r5, #12]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d907      	bls.n	800af8e <_fwalk_reent+0x3a>
 800af7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af82:	3301      	adds	r3, #1
 800af84:	d003      	beq.n	800af8e <_fwalk_reent+0x3a>
 800af86:	4629      	mov	r1, r5
 800af88:	4630      	mov	r0, r6
 800af8a:	47c0      	blx	r8
 800af8c:	4307      	orrs	r7, r0
 800af8e:	3568      	adds	r5, #104	; 0x68
 800af90:	e7e9      	b.n	800af66 <_fwalk_reent+0x12>

0800af92 <__retarget_lock_init_recursive>:
 800af92:	4770      	bx	lr

0800af94 <__retarget_lock_acquire_recursive>:
 800af94:	4770      	bx	lr

0800af96 <__retarget_lock_release_recursive>:
 800af96:	4770      	bx	lr

0800af98 <__swhatbuf_r>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	460e      	mov	r6, r1
 800af9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa0:	2900      	cmp	r1, #0
 800afa2:	b096      	sub	sp, #88	; 0x58
 800afa4:	4614      	mov	r4, r2
 800afa6:	461d      	mov	r5, r3
 800afa8:	da07      	bge.n	800afba <__swhatbuf_r+0x22>
 800afaa:	2300      	movs	r3, #0
 800afac:	602b      	str	r3, [r5, #0]
 800afae:	89b3      	ldrh	r3, [r6, #12]
 800afb0:	061a      	lsls	r2, r3, #24
 800afb2:	d410      	bmi.n	800afd6 <__swhatbuf_r+0x3e>
 800afb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afb8:	e00e      	b.n	800afd8 <__swhatbuf_r+0x40>
 800afba:	466a      	mov	r2, sp
 800afbc:	f000 f902 	bl	800b1c4 <_fstat_r>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	dbf2      	blt.n	800afaa <__swhatbuf_r+0x12>
 800afc4:	9a01      	ldr	r2, [sp, #4]
 800afc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afce:	425a      	negs	r2, r3
 800afd0:	415a      	adcs	r2, r3
 800afd2:	602a      	str	r2, [r5, #0]
 800afd4:	e7ee      	b.n	800afb4 <__swhatbuf_r+0x1c>
 800afd6:	2340      	movs	r3, #64	; 0x40
 800afd8:	2000      	movs	r0, #0
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	b016      	add	sp, #88	; 0x58
 800afde:	bd70      	pop	{r4, r5, r6, pc}

0800afe0 <__smakebuf_r>:
 800afe0:	898b      	ldrh	r3, [r1, #12]
 800afe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afe4:	079d      	lsls	r5, r3, #30
 800afe6:	4606      	mov	r6, r0
 800afe8:	460c      	mov	r4, r1
 800afea:	d507      	bpl.n	800affc <__smakebuf_r+0x1c>
 800afec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aff0:	6023      	str	r3, [r4, #0]
 800aff2:	6123      	str	r3, [r4, #16]
 800aff4:	2301      	movs	r3, #1
 800aff6:	6163      	str	r3, [r4, #20]
 800aff8:	b002      	add	sp, #8
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	ab01      	add	r3, sp, #4
 800affe:	466a      	mov	r2, sp
 800b000:	f7ff ffca 	bl	800af98 <__swhatbuf_r>
 800b004:	9900      	ldr	r1, [sp, #0]
 800b006:	4605      	mov	r5, r0
 800b008:	4630      	mov	r0, r6
 800b00a:	f7ff f97f 	bl	800a30c <_malloc_r>
 800b00e:	b948      	cbnz	r0, 800b024 <__smakebuf_r+0x44>
 800b010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b014:	059a      	lsls	r2, r3, #22
 800b016:	d4ef      	bmi.n	800aff8 <__smakebuf_r+0x18>
 800b018:	f023 0303 	bic.w	r3, r3, #3
 800b01c:	f043 0302 	orr.w	r3, r3, #2
 800b020:	81a3      	strh	r3, [r4, #12]
 800b022:	e7e3      	b.n	800afec <__smakebuf_r+0xc>
 800b024:	4b0d      	ldr	r3, [pc, #52]	; (800b05c <__smakebuf_r+0x7c>)
 800b026:	62b3      	str	r3, [r6, #40]	; 0x28
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	6020      	str	r0, [r4, #0]
 800b02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	9b00      	ldr	r3, [sp, #0]
 800b034:	6163      	str	r3, [r4, #20]
 800b036:	9b01      	ldr	r3, [sp, #4]
 800b038:	6120      	str	r0, [r4, #16]
 800b03a:	b15b      	cbz	r3, 800b054 <__smakebuf_r+0x74>
 800b03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b040:	4630      	mov	r0, r6
 800b042:	f000 f8d1 	bl	800b1e8 <_isatty_r>
 800b046:	b128      	cbz	r0, 800b054 <__smakebuf_r+0x74>
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	f023 0303 	bic.w	r3, r3, #3
 800b04e:	f043 0301 	orr.w	r3, r3, #1
 800b052:	81a3      	strh	r3, [r4, #12]
 800b054:	89a0      	ldrh	r0, [r4, #12]
 800b056:	4305      	orrs	r5, r0
 800b058:	81a5      	strh	r5, [r4, #12]
 800b05a:	e7cd      	b.n	800aff8 <__smakebuf_r+0x18>
 800b05c:	0800adf1 	.word	0x0800adf1

0800b060 <_malloc_usable_size_r>:
 800b060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b064:	1f18      	subs	r0, r3, #4
 800b066:	2b00      	cmp	r3, #0
 800b068:	bfbc      	itt	lt
 800b06a:	580b      	ldrlt	r3, [r1, r0]
 800b06c:	18c0      	addlt	r0, r0, r3
 800b06e:	4770      	bx	lr

0800b070 <_raise_r>:
 800b070:	291f      	cmp	r1, #31
 800b072:	b538      	push	{r3, r4, r5, lr}
 800b074:	4604      	mov	r4, r0
 800b076:	460d      	mov	r5, r1
 800b078:	d904      	bls.n	800b084 <_raise_r+0x14>
 800b07a:	2316      	movs	r3, #22
 800b07c:	6003      	str	r3, [r0, #0]
 800b07e:	f04f 30ff 	mov.w	r0, #4294967295
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b086:	b112      	cbz	r2, 800b08e <_raise_r+0x1e>
 800b088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b08c:	b94b      	cbnz	r3, 800b0a2 <_raise_r+0x32>
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 f830 	bl	800b0f4 <_getpid_r>
 800b094:	462a      	mov	r2, r5
 800b096:	4601      	mov	r1, r0
 800b098:	4620      	mov	r0, r4
 800b09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b09e:	f000 b817 	b.w	800b0d0 <_kill_r>
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d00a      	beq.n	800b0bc <_raise_r+0x4c>
 800b0a6:	1c59      	adds	r1, r3, #1
 800b0a8:	d103      	bne.n	800b0b2 <_raise_r+0x42>
 800b0aa:	2316      	movs	r3, #22
 800b0ac:	6003      	str	r3, [r0, #0]
 800b0ae:	2001      	movs	r0, #1
 800b0b0:	e7e7      	b.n	800b082 <_raise_r+0x12>
 800b0b2:	2400      	movs	r4, #0
 800b0b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	4798      	blx	r3
 800b0bc:	2000      	movs	r0, #0
 800b0be:	e7e0      	b.n	800b082 <_raise_r+0x12>

0800b0c0 <raise>:
 800b0c0:	4b02      	ldr	r3, [pc, #8]	; (800b0cc <raise+0xc>)
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	f7ff bfd3 	b.w	800b070 <_raise_r>
 800b0ca:	bf00      	nop
 800b0cc:	20000150 	.word	0x20000150

0800b0d0 <_kill_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4d07      	ldr	r5, [pc, #28]	; (800b0f0 <_kill_r+0x20>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	4611      	mov	r1, r2
 800b0dc:	602b      	str	r3, [r5, #0]
 800b0de:	f7f7 fea7 	bl	8002e30 <_kill>
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	d102      	bne.n	800b0ec <_kill_r+0x1c>
 800b0e6:	682b      	ldr	r3, [r5, #0]
 800b0e8:	b103      	cbz	r3, 800b0ec <_kill_r+0x1c>
 800b0ea:	6023      	str	r3, [r4, #0]
 800b0ec:	bd38      	pop	{r3, r4, r5, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000d78 	.word	0x20000d78

0800b0f4 <_getpid_r>:
 800b0f4:	f7f7 be94 	b.w	8002e20 <_getpid>

0800b0f8 <__sread>:
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b100:	f000 f894 	bl	800b22c <_read_r>
 800b104:	2800      	cmp	r0, #0
 800b106:	bfab      	itete	ge
 800b108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b10a:	89a3      	ldrhlt	r3, [r4, #12]
 800b10c:	181b      	addge	r3, r3, r0
 800b10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b112:	bfac      	ite	ge
 800b114:	6563      	strge	r3, [r4, #84]	; 0x54
 800b116:	81a3      	strhlt	r3, [r4, #12]
 800b118:	bd10      	pop	{r4, pc}

0800b11a <__swrite>:
 800b11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11e:	461f      	mov	r7, r3
 800b120:	898b      	ldrh	r3, [r1, #12]
 800b122:	05db      	lsls	r3, r3, #23
 800b124:	4605      	mov	r5, r0
 800b126:	460c      	mov	r4, r1
 800b128:	4616      	mov	r6, r2
 800b12a:	d505      	bpl.n	800b138 <__swrite+0x1e>
 800b12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b130:	2302      	movs	r3, #2
 800b132:	2200      	movs	r2, #0
 800b134:	f000 f868 	bl	800b208 <_lseek_r>
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b13e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b142:	81a3      	strh	r3, [r4, #12]
 800b144:	4632      	mov	r2, r6
 800b146:	463b      	mov	r3, r7
 800b148:	4628      	mov	r0, r5
 800b14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b14e:	f000 b817 	b.w	800b180 <_write_r>

0800b152 <__sseek>:
 800b152:	b510      	push	{r4, lr}
 800b154:	460c      	mov	r4, r1
 800b156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15a:	f000 f855 	bl	800b208 <_lseek_r>
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	bf15      	itete	ne
 800b164:	6560      	strne	r0, [r4, #84]	; 0x54
 800b166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b16e:	81a3      	strheq	r3, [r4, #12]
 800b170:	bf18      	it	ne
 800b172:	81a3      	strhne	r3, [r4, #12]
 800b174:	bd10      	pop	{r4, pc}

0800b176 <__sclose>:
 800b176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b17a:	f000 b813 	b.w	800b1a4 <_close_r>
	...

0800b180 <_write_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d07      	ldr	r5, [pc, #28]	; (800b1a0 <_write_r+0x20>)
 800b184:	4604      	mov	r4, r0
 800b186:	4608      	mov	r0, r1
 800b188:	4611      	mov	r1, r2
 800b18a:	2200      	movs	r2, #0
 800b18c:	602a      	str	r2, [r5, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	f7f7 fe85 	bl	8002e9e <_write>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_write_r+0x1e>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_write_r+0x1e>
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	20000d78 	.word	0x20000d78

0800b1a4 <_close_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4d06      	ldr	r5, [pc, #24]	; (800b1c0 <_close_r+0x1c>)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	f7f7 fe91 	bl	8002ed6 <_close>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_close_r+0x1a>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_close_r+0x1a>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	20000d78 	.word	0x20000d78

0800b1c4 <_fstat_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d07      	ldr	r5, [pc, #28]	; (800b1e4 <_fstat_r+0x20>)
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	602b      	str	r3, [r5, #0]
 800b1d2:	f7f7 fe8c 	bl	8002eee <_fstat>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d102      	bne.n	800b1e0 <_fstat_r+0x1c>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	b103      	cbz	r3, 800b1e0 <_fstat_r+0x1c>
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	bd38      	pop	{r3, r4, r5, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000d78 	.word	0x20000d78

0800b1e8 <_isatty_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4d06      	ldr	r5, [pc, #24]	; (800b204 <_isatty_r+0x1c>)
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	602b      	str	r3, [r5, #0]
 800b1f4:	f7f7 fe8b 	bl	8002f0e <_isatty>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d102      	bne.n	800b202 <_isatty_r+0x1a>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b103      	cbz	r3, 800b202 <_isatty_r+0x1a>
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	20000d78 	.word	0x20000d78

0800b208 <_lseek_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4d07      	ldr	r5, [pc, #28]	; (800b228 <_lseek_r+0x20>)
 800b20c:	4604      	mov	r4, r0
 800b20e:	4608      	mov	r0, r1
 800b210:	4611      	mov	r1, r2
 800b212:	2200      	movs	r2, #0
 800b214:	602a      	str	r2, [r5, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	f7f7 fe84 	bl	8002f24 <_lseek>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_lseek_r+0x1e>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b103      	cbz	r3, 800b226 <_lseek_r+0x1e>
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	20000d78 	.word	0x20000d78

0800b22c <_read_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4d07      	ldr	r5, [pc, #28]	; (800b24c <_read_r+0x20>)
 800b230:	4604      	mov	r4, r0
 800b232:	4608      	mov	r0, r1
 800b234:	4611      	mov	r1, r2
 800b236:	2200      	movs	r2, #0
 800b238:	602a      	str	r2, [r5, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	f7f7 fe12 	bl	8002e64 <_read>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_read_r+0x1e>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_read_r+0x1e>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	20000d78 	.word	0x20000d78

0800b250 <sqrt>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	ed2d 8b02 	vpush	{d8}
 800b256:	ec55 4b10 	vmov	r4, r5, d0
 800b25a:	f000 f82d 	bl	800b2b8 <__ieee754_sqrt>
 800b25e:	4b15      	ldr	r3, [pc, #84]	; (800b2b4 <sqrt+0x64>)
 800b260:	eeb0 8a40 	vmov.f32	s16, s0
 800b264:	eef0 8a60 	vmov.f32	s17, s1
 800b268:	f993 3000 	ldrsb.w	r3, [r3]
 800b26c:	3301      	adds	r3, #1
 800b26e:	d019      	beq.n	800b2a4 <sqrt+0x54>
 800b270:	4622      	mov	r2, r4
 800b272:	462b      	mov	r3, r5
 800b274:	4620      	mov	r0, r4
 800b276:	4629      	mov	r1, r5
 800b278:	f7f5 fc68 	bl	8000b4c <__aeabi_dcmpun>
 800b27c:	b990      	cbnz	r0, 800b2a4 <sqrt+0x54>
 800b27e:	2200      	movs	r2, #0
 800b280:	2300      	movs	r3, #0
 800b282:	4620      	mov	r0, r4
 800b284:	4629      	mov	r1, r5
 800b286:	f7f5 fc39 	bl	8000afc <__aeabi_dcmplt>
 800b28a:	b158      	cbz	r0, 800b2a4 <sqrt+0x54>
 800b28c:	f7fb fb8a 	bl	80069a4 <__errno>
 800b290:	2321      	movs	r3, #33	; 0x21
 800b292:	6003      	str	r3, [r0, #0]
 800b294:	2200      	movs	r2, #0
 800b296:	2300      	movs	r3, #0
 800b298:	4610      	mov	r0, r2
 800b29a:	4619      	mov	r1, r3
 800b29c:	f7f5 fae6 	bl	800086c <__aeabi_ddiv>
 800b2a0:	ec41 0b18 	vmov	d8, r0, r1
 800b2a4:	eeb0 0a48 	vmov.f32	s0, s16
 800b2a8:	eef0 0a68 	vmov.f32	s1, s17
 800b2ac:	ecbd 8b02 	vpop	{d8}
 800b2b0:	bd38      	pop	{r3, r4, r5, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000324 	.word	0x20000324

0800b2b8 <__ieee754_sqrt>:
 800b2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2bc:	ec55 4b10 	vmov	r4, r5, d0
 800b2c0:	4e56      	ldr	r6, [pc, #344]	; (800b41c <__ieee754_sqrt+0x164>)
 800b2c2:	43ae      	bics	r6, r5
 800b2c4:	ee10 0a10 	vmov	r0, s0
 800b2c8:	ee10 3a10 	vmov	r3, s0
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	462a      	mov	r2, r5
 800b2d0:	d110      	bne.n	800b2f4 <__ieee754_sqrt+0x3c>
 800b2d2:	ee10 2a10 	vmov	r2, s0
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	f7f5 f99e 	bl	8000618 <__aeabi_dmul>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	f7f4 ffe2 	bl	80002ac <__adddf3>
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	460d      	mov	r5, r1
 800b2ec:	ec45 4b10 	vmov	d0, r4, r5
 800b2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f4:	2d00      	cmp	r5, #0
 800b2f6:	dc10      	bgt.n	800b31a <__ieee754_sqrt+0x62>
 800b2f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b2fc:	4330      	orrs	r0, r6
 800b2fe:	d0f5      	beq.n	800b2ec <__ieee754_sqrt+0x34>
 800b300:	b15d      	cbz	r5, 800b31a <__ieee754_sqrt+0x62>
 800b302:	ee10 2a10 	vmov	r2, s0
 800b306:	462b      	mov	r3, r5
 800b308:	ee10 0a10 	vmov	r0, s0
 800b30c:	f7f4 ffcc 	bl	80002a8 <__aeabi_dsub>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	f7f5 faaa 	bl	800086c <__aeabi_ddiv>
 800b318:	e7e6      	b.n	800b2e8 <__ieee754_sqrt+0x30>
 800b31a:	1509      	asrs	r1, r1, #20
 800b31c:	d076      	beq.n	800b40c <__ieee754_sqrt+0x154>
 800b31e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b322:	07ce      	lsls	r6, r1, #31
 800b324:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b328:	bf5e      	ittt	pl
 800b32a:	0fda      	lsrpl	r2, r3, #31
 800b32c:	005b      	lslpl	r3, r3, #1
 800b32e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b332:	0fda      	lsrs	r2, r3, #31
 800b334:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b338:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b33c:	2000      	movs	r0, #0
 800b33e:	106d      	asrs	r5, r5, #1
 800b340:	005b      	lsls	r3, r3, #1
 800b342:	f04f 0e16 	mov.w	lr, #22
 800b346:	4684      	mov	ip, r0
 800b348:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b34c:	eb0c 0401 	add.w	r4, ip, r1
 800b350:	4294      	cmp	r4, r2
 800b352:	bfde      	ittt	le
 800b354:	1b12      	suble	r2, r2, r4
 800b356:	eb04 0c01 	addle.w	ip, r4, r1
 800b35a:	1840      	addle	r0, r0, r1
 800b35c:	0052      	lsls	r2, r2, #1
 800b35e:	f1be 0e01 	subs.w	lr, lr, #1
 800b362:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b366:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b36a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b36e:	d1ed      	bne.n	800b34c <__ieee754_sqrt+0x94>
 800b370:	4671      	mov	r1, lr
 800b372:	2720      	movs	r7, #32
 800b374:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b378:	4562      	cmp	r2, ip
 800b37a:	eb04 060e 	add.w	r6, r4, lr
 800b37e:	dc02      	bgt.n	800b386 <__ieee754_sqrt+0xce>
 800b380:	d113      	bne.n	800b3aa <__ieee754_sqrt+0xf2>
 800b382:	429e      	cmp	r6, r3
 800b384:	d811      	bhi.n	800b3aa <__ieee754_sqrt+0xf2>
 800b386:	2e00      	cmp	r6, #0
 800b388:	eb06 0e04 	add.w	lr, r6, r4
 800b38c:	da43      	bge.n	800b416 <__ieee754_sqrt+0x15e>
 800b38e:	f1be 0f00 	cmp.w	lr, #0
 800b392:	db40      	blt.n	800b416 <__ieee754_sqrt+0x15e>
 800b394:	f10c 0801 	add.w	r8, ip, #1
 800b398:	eba2 020c 	sub.w	r2, r2, ip
 800b39c:	429e      	cmp	r6, r3
 800b39e:	bf88      	it	hi
 800b3a0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b3a4:	1b9b      	subs	r3, r3, r6
 800b3a6:	4421      	add	r1, r4
 800b3a8:	46c4      	mov	ip, r8
 800b3aa:	0052      	lsls	r2, r2, #1
 800b3ac:	3f01      	subs	r7, #1
 800b3ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b3b2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b3b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b3ba:	d1dd      	bne.n	800b378 <__ieee754_sqrt+0xc0>
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	d006      	beq.n	800b3ce <__ieee754_sqrt+0x116>
 800b3c0:	1c4c      	adds	r4, r1, #1
 800b3c2:	bf13      	iteet	ne
 800b3c4:	3101      	addne	r1, #1
 800b3c6:	3001      	addeq	r0, #1
 800b3c8:	4639      	moveq	r1, r7
 800b3ca:	f021 0101 	bicne.w	r1, r1, #1
 800b3ce:	1043      	asrs	r3, r0, #1
 800b3d0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b3d4:	0849      	lsrs	r1, r1, #1
 800b3d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b3da:	07c2      	lsls	r2, r0, #31
 800b3dc:	bf48      	it	mi
 800b3de:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b3e2:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	463d      	mov	r5, r7
 800b3ea:	e77f      	b.n	800b2ec <__ieee754_sqrt+0x34>
 800b3ec:	0ada      	lsrs	r2, r3, #11
 800b3ee:	3815      	subs	r0, #21
 800b3f0:	055b      	lsls	r3, r3, #21
 800b3f2:	2a00      	cmp	r2, #0
 800b3f4:	d0fa      	beq.n	800b3ec <__ieee754_sqrt+0x134>
 800b3f6:	02d7      	lsls	r7, r2, #11
 800b3f8:	d50a      	bpl.n	800b410 <__ieee754_sqrt+0x158>
 800b3fa:	f1c1 0420 	rsb	r4, r1, #32
 800b3fe:	fa23 f404 	lsr.w	r4, r3, r4
 800b402:	1e4d      	subs	r5, r1, #1
 800b404:	408b      	lsls	r3, r1
 800b406:	4322      	orrs	r2, r4
 800b408:	1b41      	subs	r1, r0, r5
 800b40a:	e788      	b.n	800b31e <__ieee754_sqrt+0x66>
 800b40c:	4608      	mov	r0, r1
 800b40e:	e7f0      	b.n	800b3f2 <__ieee754_sqrt+0x13a>
 800b410:	0052      	lsls	r2, r2, #1
 800b412:	3101      	adds	r1, #1
 800b414:	e7ef      	b.n	800b3f6 <__ieee754_sqrt+0x13e>
 800b416:	46e0      	mov	r8, ip
 800b418:	e7be      	b.n	800b398 <__ieee754_sqrt+0xe0>
 800b41a:	bf00      	nop
 800b41c:	7ff00000 	.word	0x7ff00000

0800b420 <_init>:
 800b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b422:	bf00      	nop
 800b424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b426:	bc08      	pop	{r3}
 800b428:	469e      	mov	lr, r3
 800b42a:	4770      	bx	lr

0800b42c <_fini>:
 800b42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42e:	bf00      	nop
 800b430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b432:	bc08      	pop	{r3}
 800b434:	469e      	mov	lr, r3
 800b436:	4770      	bx	lr
